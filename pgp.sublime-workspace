{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"res",
				"resolve"
			],
			[
				"border-c",
				"border-color"
			],
			[
				"mo",
				"movePrints"
			],
			[
				"has",
				"hasPrinter"
			],
			[
				"qeu",
				"queue_id"
			],
			[
				"queeu",
				"queue_id"
			],
			[
				"clas",
				"className"
			],
			[
				"mod",
				"modalIsOpen"
			],
			[
				"margi",
				"marginLeft"
			],
			[
				"print",
				"printer"
			],
			[
				"prin",
				"prints"
			],
			[
				"queue",
				"queue_id"
			],
			[
				"tota",
				"total_print"
			],
			[
				"que",
				"queues"
			],
			[
				"init",
				"initQueues"
			],
			[
				"mari",
				"marginTop"
			],
			[
				"cre",
				"createQueue"
			],
			[
				"one",
				"one_queue_mode"
			],
			[
				"re",
				"resolve"
			],
			[
				"on",
				"one_queue_mode"
			],
			[
				"queu",
				"queue_id"
			],
			[
				"cr",
				"createQueue"
			],
			[
				"W",
				"W_Q"
			],
			[
				"con",
				"conf"
			],
			[
				"la",
				"lastIp"
			],
			[
				"_",
				"_cachedConfig"
			],
			[
				"thu",
				"thumb_path"
			],
			[
				"auo",
				"automatic_email"
			],
			[
				"temp",
				"template_id"
			],
			[
				"le",
				"length"
			],
			[
				"parse",
				"parsedEmails"
			],
			[
				"tr",
				"trim"
			],
			[
				"op",
				"options"
			],
			[
				"THU",
				"THUMBS_PRINTS_DIR"
			],
			[
				"_c",
				"_cachedConfig"
			],
			[
				"lo",
				"logger"
			],
			[
				"TH",
				"THUMBS_PRINTS_DIR"
			],
			[
				"th",
				"THUMBS_PRINTS_DIR"
			],
			[
				"PI",
				"PICS_DIR"
			],
			[
				"log",
				"logo"
			],
			[
				"out",
				"output_config"
			],
			[
				"ma",
				"max_print"
			],
			[
				"remove",
				"removeAsync"
			],
			[
				"lan",
				"landscape"
			],
			[
				"q",
				"quality"
			],
			[
				"get",
				"getLayoutImage"
			],
			[
				"max",
				"kiosk_max_print"
			],
			[
				"c",
				"color"
			],
			[
				"cpt",
				"cptLayer"
			],
			[
				"cp",
				"cptLayer"
			],
			[
				"bun",
				"bundleUrl"
			],
			[
				"conf",
				"config"
			],
			[
				"ren",
				"renderPrint"
			],
			[
				"cl",
				"className"
			],
			[
				"JSO",
				"CONFIG_JSON"
			],
			[
				"bund",
				"bundlePath"
			],
			[
				"un",
				"unzip"
			],
			[
				"stat",
				"statusCode"
			],
			[
				"pr",
				"printP"
			],
			[
				"ex",
				"exportDataId"
			],
			[
				"expo",
				"exportPics"
			],
			[
				"exportP",
				"exportPicsDayAction"
			],
			[
				"reder",
				"renderLink"
			],
			[
				"export",
				"exportSlidesDayAction"
			],
			[
				"EX",
				"EXPORT_DIR"
			],
			[
				"_C",
				"_DEFAULT_CLUT_Pixels"
			],
			[
				"bu",
				"buffer_4_6"
			],
			[
				"LOG",
				"LOG_ERROR"
			],
			[
				"_is",
				"_iStart3"
			],
			[
				"sma",
				"smallOpacity"
			],
			[
				"_im",
				"_img2"
			],
			[
				"pro",
				"processImage1"
			],
			[
				"img1",
				"img1Crops"
			],
			[
				"remo",
				"img1RemovedTop"
			],
			[
				"Z",
				"ZPoint"
			],
			[
				"crop",
				"cropY"
			],
			[
				"sub",
				"subImageLoc"
			],
			[
				"h",
				"height"
			],
			[
				"OUT",
				"OUT_HEIGHT"
			],
			[
				"OU",
				"OUT_HEIGHT"
			],
			[
				"fill",
				"fillArea"
			],
			[
				"visi",
				"visibleZoom"
			],
			[
				"sc",
				"scaledSize"
			],
			[
				"o",
				"oX"
			],
			[
				"next",
				"nextLayer"
			],
			[
				"Nex",
				"nextLayer"
			],
			[
				"nex",
				"nextLayer"
			],
			[
				"en",
				"enlargeZoom"
			],
			[
				"to",
				"to_string"
			],
			[
				"resi",
				"resizeImageAndUnsharp"
			],
			[
				"nextI",
				"nextImage"
			],
			[
				"OUT_",
				"OUT_HEIGHT"
			],
			[
				"latest",
				"latestImage"
			],
			[
				"w",
				"width"
			],
			[
				"wi",
				"widthStep"
			],
			[
				"rot",
				"rotate"
			],
			[
				"b",
				"background"
			],
			[
				"upd",
				"updateStatus"
			],
			[
				"up",
				"updateStatus"
			],
			[
				"de",
				"detectCamera"
			],
			[
				"net",
				"network"
			],
			[
				"soc",
				"socketHandler"
			],
			[
				"me",
				"message"
			],
			[
				"gate",
				"gateway_line"
			],
			[
				"fre",
				"free_buffers"
			],
			[
				"tot",
				"totPrint"
			],
			[
				"im",
				"imgCpt"
			],
			[
				"wri",
				"writes"
			],
			[
				"monit",
				"monitClient"
			],
			[
				"fire",
				"fireUpdate"
			],
			[
				"Mo",
				"Monit"
			],
			[
				"searc",
				"searchResult"
			],
			[
				"se",
				"searchEnabled"
			],
			[
				"kios",
				"kiosk_grid"
			],
			[
				"render",
				"renderSharing"
			],
			[
				"pic",
				"pics2"
			],
			[
				"pi",
				"picGM"
			],
			[
				"st",
				"style"
			],
			[
				"not",
				"not-me"
			],
			[
				"_o",
				"_mode"
			],
			[
				"kioks",
				"kiosk_sharing_en"
			],
			[
				"onk",
				"onKioskSharingFrChange"
			],
			[
				"fi",
				"fields"
			],
			[
				"ia",
				"isAdminOrSubAdmin"
			],
			[
				"wo",
				"workInfo"
			],
			[
				"mail",
				"_mailQueue"
			],
			[
				"DE",
				"DEFAULT_PICTURE_TOP"
			],
			[
				"off",
				"offset_x"
			]
		]
	},
	"buffers":
	[
		{
			"file": "update_deps.sh",
			"settings":
			{
				"buffer_size": 389,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 95 files for \"CO\"\n\n/Users/steph/Documents/projects/openpgpjs/Gruntfile.js:\n    4  \n    5    var lintFiles = [\n    6:     'src/config/**/*.js',\n    7      'src/crypto/cipher/aes.js',\n    8      'src/crypto/cipher/blowfish.js',\n    .\n   17      'src/crypto/public_key/rsa.js',\n   18      'src/crypto/*.js',\n   19:     'src/encoding/**/*.js',\n   20      'src/hkp/**/*.js',\n   21      'src/keyring/**/*.js',\n   ..\n   24      'src/worker/**/*.js',\n   25      'src/*.js',\n   26:   ]; // add more over time ... goal should be 100% coverage\n   27  \n   28    var version = grunt.option('release');\n   ..\n   35    }\n   36  \n   37:   // Project configuration.\n   38:   grunt.initConfig({\n   39      pkg: grunt.file.readJSON('package.json'),\n   40      browserify: {\n   ..\n   99          replacements: [{\n  100            from: /OpenPGP.js VERSION/g,\n  101:           to: 'CO'\n  102          }]\n  103        },\n  ...\n  129          banner: '/*! OpenPGP.js v<%= pkg.version %> - ' +\n  130            '<%= grunt.template.today(\"yyyy-mm-dd\") %> - ' +\n  131:           'this is LGPL licensed code, see LICENSE/our website <%= pkg.homepage %> for more information. */'\n  132        }\n  133      },\n  ...\n  153        build: ['Gruntfile.js'],\n  154        options: {\n  155:         config: \".jscsrc\",\n  156          esnext: true,\n  157          verbose: true,\n  ...\n  168      },\n  169      mocha_istanbul: {\n  170:       coverage: {\n  171          src: 'test',\n  172          options: {\n  ...\n  185        }\n  186      },\n  187:     copy: {\n  188        browsertest: {\n  189          expand: true,\n  ...\n  197          cwd: 'node_modules/zlibjs/bin/',\n  198          src: ['rawdeflate.min.js','rawinflate.min.js','zlib.min.js'],\n  199:         dest: 'src/compression/'\n  200        }\n  201      },\n  202      clean: ['dist/'],\n  203:     connect: {\n  204        dev: {\n  205          options: {\n  ...\n  247    // Load the plugin(s)\n  248    grunt.loadNpmTasks('grunt-browserify');\n  249:   grunt.loadNpmTasks('grunt-contrib-uglify');\n  250    grunt.loadNpmTasks('grunt-text-replace');\n  251    grunt.loadNpmTasks('grunt-jsbeautifier');\n  252:   grunt.loadNpmTasks('grunt-contrib-jshint');\n  253    grunt.loadNpmTasks('grunt-jscs');\n  254    grunt.loadNpmTasks('grunt-jsdoc');\n  255    grunt.loadNpmTasks('grunt-mocha-istanbul');\n  256    grunt.loadNpmTasks('grunt-mocha-test');\n  257:   grunt.loadNpmTasks('grunt-contrib-copy');\n  258:   grunt.loadNpmTasks('grunt-contrib-clean');\n  259:   grunt.loadNpmTasks('grunt-contrib-connect');\n  260    grunt.loadNpmTasks('grunt-saucelabs');\n  261:   grunt.loadNpmTasks('grunt-contrib-watch');\n  262  \n  263    grunt.registerTask('set_version', function() {\n  ...\n  294  \n  295    // Build tasks\n  296:   grunt.registerTask('default', ['clean', 'copy:zlib', 'browserify', 'replace', 'uglify']);\n  297    grunt.registerTask('documentation', ['jsdoc']);\n  298    // Test/Dev tasks\n  299    grunt.registerTask('test', ['jshint', 'jscs', 'mochaTest']);\n  300:   grunt.registerTask('coverage', ['mocha_istanbul:coverage']);\n  301:   grunt.registerTask('saucelabs', ['default', 'copy:browsertest', 'connect:test', 'saucelabs-mocha']);\n  302  \n  303  };\n\n/Users/steph/Documents/projects/openpgpjs/src/cleartext.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * @requires config\n   20:  * @requires encoding/armor\n   21   * @requires enums\n   22   * @requires packet\n   ..\n   26  'use strict';\n   27  \n   28: import config from './config';\n   29  import packet from './packet';\n   30  import enums from './enums.js';\n   31: import armor from './encoding/armor.js';\n   32  \n   33  /**\n   ..\n   46    // normalize EOL to canonical form <CR><LF>\n   47    \n   48:   //CO Causse issue in signature!!!!!\n   49    //this.text = text.replace(/\\r/g, '').replace(/[\\t ]+\\n/g, \"\\n\").replace(/\\n/g,\"\\r\\n\");\n   50    this.text = text;\n   ..\n   79      var signaturePacket = new packet.Signature();\n   80      signaturePacket.signatureType = enums.signature.text;\n   81:     signaturePacket.hashAlgorithm = config.prefer_hash_algorithm;\n   82      var signingKeyPacket = privateKeys[i].getSigningKeyPacket();\n   83      signaturePacket.publicKeyAlgorithm = signingKeyPacket.algorithm;\n   ..\n  132    // normalize end of line to \\n\n  133    \n  134:   //CO Causse issue in signature!!!!!\n  135  \n  136    //return this.text.replace(/\\r\\n/g,\"\\n\");\n  ...\n  145  CleartextMessage.prototype.armor = function() {\n  146    var body = {\n  147:     hash: enums.read(enums.hash, config.prefer_hash_algorithm).toUpperCase(),\n  148      text: this.text,\n  149      data: this.packets.write()\n  150    };\n  151:   return armor.encode(enums.armor.signed, body);\n  152  };\n  153  \n  ...\n  160   */\n  161  export function readArmored(armoredText) {\n  162:   var input = armor.decode(armoredText);\n  163    if (input.type !== enums.armor.signed) {\n  164      throw new Error('No cleartext signed message.');\n  ...\n  172  \n  173  /**\n  174:  * Compare hash algorithm specified in the armor header with signatures\n  175   * @private\n  176   * @param  {Array<String>} headers    Armor headers\n  ...\n  204          }\n  205        });\n  206:       hashAlgos = hashAlgos.concat(oneHeader);\n  207      } else {\n  208        throw new Error('Only \"Hash\" header allowed in cleartext signed message');\n\n/Users/steph/Documents/projects/openpgpjs/src/config/config.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * This object contains configuration values.\n   20   * @requires enums\n   21   * @property {Integer} prefer_hash_algorithm\n   22   * @property {Integer} encryption_cipher\n   23:  * @property {Integer} compression\n   24   * @property {Boolean} show_version\n   25:  * @property {Boolean} show_comment\n   26   * @property {Boolean} integrity_protect\n   27   * @property {String} keyserver\n   28   * @property {Boolean} debug If enabled, debug messages will be printed\n   29:  * @module config/config\n   30   */\n   31  \n   ..\n   37    prefer_hash_algorithm: enums.hash.sha256,\n   38    encryption_cipher: enums.symmetric.aes256,\n   39:   compression: enums.compression.zip,\n   40    integrity_protect: true, // use integrity protection for symmetric encryption\n   41    ignore_mdc_error: false, // fail on decrypt if message is not integrity protected\n   42    rsa_blinding: true,\n   43    useNative: true, // use native node.js crypto and Web Crypto apis (if available)\n   44:   zeroCopy: false, // use transferable objects between the Web Worker and main thread\n   45    debug: false,\n   46    show_version: true,\n   47:   show_comment: false,\n   48    versionstring: \"OpenPGP.js VERSION\",\n   49:   commentstring: \"\",\n   50:   keyserver: \"https://keyserver.ubuntu.com\",\n   51    node_store: './openpgp.store'\n   52  };\n\n/Users/steph/Documents/projects/openpgpjs/src/config/index.js:\n    1  /**\n    2:  * @see module:config/config\n    3:  * @module config\n    4   */\n    5  \n    6  'use strict';\n    7  \n    8: export { default } from './config.js';\n\n/Users/steph/Documents/projects/openpgpjs/src/config/localStorage.js:\n    1  /**\n    2:  * This object storing and retrieving configuration from HTML5 local storage.\n    3:  * @module config/localStorage\n    4   */\n    5  \n    .\n    7  \n    8  /**\n    9:  * @constructor\n   10   */\n   11  export default function LocalStorage() {}\n   12  \n   13  /**\n   14:  * Reads the config out of the HTML5 local storage\n   15:  * and initializes the object config.\n   16:  * if config is null the default config will be used\n   17   */\n   18  LocalStorage.prototype.read = function () {\n   19:   var raw = window.localStorage.getItem(\"config\");\n   20    var cf = (raw === null ? null : JSON.parse(raw));\n   21    if (cf === null) {\n   22:     this.config = this.default_config;\n   23      this.write();\n   24    } else {\n   25:     this.config = cf;\n   26    }\n   27  };\n   28  \n   29  /**\n   30:  * Writes the config to HTML5 local storage\n   31   */\n   32  LocalStorage.prototype.write = function () {\n   33:   window.localStorage.setItem(\"config\", JSON.stringify(this.config));\n   34  };\n   35  \n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cfb.js:\n    3  // Modified by Recurity Labs GmbH\n    4  \n    5: // modified version of http://www.hanewin.net/encrypt/PGdecode.js:\n    6  \n    7  /* OpenPGP encryption using RSA/AES\n    8:  * Copyright 2005-2006 Herbert Hanewinkel, www.haneWIN.de\n    9   * version 2.0, check www.haneWIN.de for the latest version\n   10  \n   11   * This software is provided as-is, without express or implied warranty.\n   12:  * Permission to use, copy, modify, distribute or sell this software, with or\n   13   * without fee, for any purpose and by any individual or organization, is hereby\n   14:  * granted, provided that the above copyright notice and this paragraph appear\n   15:  * in all copies. Distribution as a part of an application or binary must\n   16:  * include the above copyright notice in the documentation and/or other\n   17   * materials provided with the application or distribution.\n   18   */\n   ..\n  128  \n  129    /**\n  130:    * Decrypts the prefixed data for the Modification Detection Code (MDC) computation\n  131     * @param {String} cipherfn.encrypt Cipher function to use,\n  132     *  @see module:crypto/cipher.\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cipher/aes.js:\n    1  /* Rijndael (AES) Encryption\n    2:  * Copyright 2005 Herbert Hanewinkel, www.haneWIN.de\n    3   * version 1.1, check www.haneWIN.de for the latest version\n    4  \n    5   * This software is provided as-is, without express or implied warranty.\n    6:  * Permission to use, copy, modify, distribute or sell this software, with or\n    7   * without fee, for any purpose and by any individual or organization, is hereby\n    8:  * granted, provided that the above copyright notice and this paragraph appear\n    9:  * in all copies. Distribution as a part of an application or binary must\n   10:  * include the above copyright notice in the documentation and/or other\n   11   * materials provided with the application or distribution.\n   12   */\n   ..\n   18  'use strict';\n   19  \n   20: // The round constants used in subkey expansion\n   21: var Rcon = new Uint8Array([\n   22      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,\n   23      0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4,\n   ..\n   25  ]);\n   26  \n   27: // Precomputed lookup table for the SBox\n   28  var S = new Uint8Array([\n   29      99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171,\n   ..\n  378    var k = new Array(maxkc);\n  379    var tk = new Array(maxkc);\n  380:   var rconpointer = 0;\n  381  \n  382    if (keylen === 16) {\n  ...\n  421  \n  422      tk[0] ^= S[B1(temp)] | (S[B2(temp)] << 8) | (S[B3(temp)] << 16) | (S[B0(temp)] << 24);\n  423:     tk[0] ^= Rcon[rconpointer++];\n  424  \n  425      if (kc !== 8) {\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cipher/blowfish.js:\n    1  /* Modified by Recurity Labs GmbH\n    2   *\n    3:  * Originally written by nklein software (nklein.com)\n    4   */\n    5  \n    .\n   14   *\n   15   *\n   16:  * The constructor doesn't do much of anything.  It's just here\n   17   * so we can start defining properties and methods and such.\n   18   */\n   ..\n   20  \n   21  /*\n   22:  * Declare the block size so that protocols know what size\n   23   * Initialization Vector (IV) they will need.\n   24   */\n   ..\n  298  //* Maybe I should make the real algorithm above take a vector\n  299  //* instead.  That will involve more looping, but it won't require\n  300: //* the F() method to deconstruct the vector.\n  301  //*\n  302  Blowfish.prototype.encrypt_block = function(vector) {\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cipher/cast5.js:\n    1: // Use of this source code is governed by a BSD-style\n    2  // license that can be found in the LICENSE file.\n    3  \n    4: // Copyright 2010 pjacobs@xeekr.com . All rights reserved.\n    5  \n    6  // Modified by Recurity Labs GmbH\n    .\n   10  \n   11  // cast5.js is a Javascript implementation of CAST-128, as defined in RFC 2144.\n   12: // CAST-128 is a common OpenPGP cipher.\n   13  \n   14  \n   15: // CAST5 constructor\n   16  \n   17  /** @module crypto/cipher/cast5 */\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cipher/des.js:\n    1  //Paul Tero, July 2001\n    2: //http://www.tero.co.uk/des/\n    3  //\n    4  //Optimised for performance with large blocks by Michael Hayworth, November 2001\n    5: //http://www.netdealing.com\n    6  //\n    7  // Modified by Recurity Labs GmbH\n    .\n   10  //ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   11  //IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   12: //ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n   13: //FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   14  //DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n   15  //OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n   16: //HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n   17  //LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n   18  //OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n   ..\n  130      }\n  131  \n  132:     //first each 64 but chunk of the message must be permuted according to IP\n  133      temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  134      right ^= temp;\n  ...\n  313  \n  314        //now apply PC-2, in such a way that E is easier when encrypting or decrypting\n  315:       //this conversion will look like PC-2 except only the last 6 bits of each byte are used\n  316:       //rather than 48 consecutive bits and the order of lines will be according to\n  317        //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n  318        lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(\n  ...\n  337    var pad;\n  338    if (padding === 2 && (padLength < 8)) { //pad the message with spaces\n  339:     pad = \" \".charCodeAt(0);\n  340    } else if (padding === 1) { //PKCS7 padding\n  341      pad = padLength;\n  ...\n  364    var pad;\n  365    if (padding === 2) { // space padded\n  366:     pad = \" \".charCodeAt(0);\n  367    } else if (padding === 1) { // PKCS7\n  368      padLength = message[message.length - 1];\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/cipher/twofish.js:\n    5   * See Cipher.readme.txt for further information.\n    6   *\n    7:  * Copyright(c) 2009 Atsushi Oka [ http://oka.nu/ ]\n    8   * This script file is distributed under the LGPL\n    9   *\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/crypto.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   84     * of the private key used\n   85     * @param {module:type/mpi} data Data to be encrypted as MPI\n   86:    * @return {module:type/mpi} returns a big integer containing the decrypted data; otherwise null\n   87     */\n   88  \n   ..\n  122    },\n  123  \n  124:   /** Returns the number of integers comprising the private key of an algorithm\n  125     * @param {String} algo The public key algorithm\n  126     * @return {Integer} The number of integers.\n  127     */\n  128:   getPrivateMpiCount: function(algo) {\n  129      switch (algo) {\n  130        case 'rsa_encrypt':\n  ...\n  150    },\n  151  \n  152:   getPublicMpiCount: function(algo) {\n  153:     // - A series of multiprecision integers comprising the key material:\n  154      //   Algorithm-Specific Fields for RSA public keys:\n  155      //       - a multiprecision integer (MPI) of RSA public modulus n;\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/hash/index.js:\n   16  import util from '../../util.js';\n   17  \n   18: const rusha = new Rusha(),\n   19    nodeCrypto = util.getNodeCrypto(),\n   20    Buffer = util.getNodeBuffer();\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/hash/md5.js:\n    1  /**\n    2   * A fast MD5 JavaScript implementation\n    3:  * Copyright (c) 2012 Joseph Myers\n    4   * http://www.myersdaily.org/joseph/javascript/md5-text.html\n    5   *\n    6:  * Permission to use, copy, modify, and distribute this software\n    7   * and its documentation for any purposes and without\n    8:  * fee is hereby granted provided that this copyright notice\n    9:  * appears in all copies.\n   10   *\n   11:  * Of course, this soft is provided \"as is\" without express or implied\n   12   * warranty of any kind.\n   13   */\n   ..\n  144    var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  145    for (i = 0; i < s.length; i++) {\n  146:     tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n  147    }\n  148    tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n  ...\n  158  }\n  159  \n  160: /* there needs to be support for Unicode here,\n  161   * unless we pretend that we can redefine the MD-5\n  162   * algorithm for multi-byte characters (perhaps\n  ...\n  167   * how will an ordinary MD-5 sum be matched?\n  168   * There is no way to standardize text to something\n  169:  * like UTF-8 before transformation; speed cost is\n  170   * utterly prohibitive. The JavaScript standard\n  171   * itself needs to look at this: it should start\n  ...\n  177      i; /* Andy King said do it this way. */\n  178    for (i = 0; i < 64; i += 4) {\n  179:     md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) <<\n  180        24);\n  181    }\n  ...\n  208  so if possible we use it. Some IEs\n  209  are the only ones I know of that\n  210: need the idiotic second function,\n  211  generated by an if clause.  */\n  212  \n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/hash/ripe-md.js:\n    1  /*\n    2   * CryptoMX Tools\n    3:  * Copyright (C) 2004 - 2006 Derek Buitenhuis\n    4   *\n    5   * This program is free software; you can redistribute it and/or\n    .\n   13   * GNU General Public License for more details.\n   14   *\n   15:  * You should have received a copy of the GNU General Public License\n   16   * along with this program; if not, write to the Free Software\n   17   * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n   ..\n  151  ];\n  152  \n  153: function compress(MDbuf, X) {\n  154    var blockA = [];\n  155    var blockB = [];\n  ...\n  230    var j = 0;\n  231    for (var i = 0; i < (lswlen & 63); i++) {\n  232:     X[i >>> 2] ^= (strptr.charCodeAt(j++) & 255) << (8 * (i & 3));\n  233    }\n  234  \n  ...\n  236  \n  237    if ((lswlen & 63) > 55) {\n  238:     compress(MDbuf, X);\n  239      X = new Array(16);\n  240      zeroX(X);\n  ...\n  244    X[15] = (lswlen >>> 29) | (mswlen << 3);\n  245  \n  246:   compress(MDbuf, X);\n  247  }\n  248  \n  249  function BYTES_TO_DWORD(fourChars) {\n  250:   var tmp = (fourChars.charCodeAt(3) & 255) << 24;\n  251:   tmp |= (fourChars.charCodeAt(2) & 255) << 16;\n  252:   tmp |= (fourChars.charCodeAt(1) & 255) << 8;\n  253:   tmp |= (fourChars.charCodeAt(0) & 255);\n  254  \n  255    return tmp;\n  ...\n  258  function RMD(message) {\n  259    var MDbuf = new Array(RMDsize / 32);\n  260:   var hashcode = new Array(RMDsize / 8);\n  261    var length;\n  262    var nbytes;\n  ...\n  274        j += 4;\n  275      }\n  276:     compress(MDbuf, X);\n  277    }\n  278  \n  ...\n  280  \n  281    for (i = 0; i < RMDsize / 8; i += 4) {\n  282:     hashcode[i] = MDbuf[i >>> 2] & 255;\n  283:     hashcode[i + 1] = (MDbuf[i >>> 2] >>> 8) & 255;\n  284:     hashcode[i + 2] = (MDbuf[i >>> 2] >>> 16) & 255;\n  285:     hashcode[i + 3] = (MDbuf[i >>> 2] >>> 24) & 255;\n  286    }\n  287  \n  288:   return hashcode;\n  289  }\n  290  \n  291  \n  292  export default function RMDstring(message) {\n  293:   var hashcode = RMD(util.Uint8Array2str(message));\n  294    var retString = \"\";\n  295  \n  296    for (var i = 0; i < RMDsize / 8; i++) {\n  297:     retString += String.fromCharCode(hashcode[i]);\n  298    }\n  299  \n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/hash/sha.js:\n    1  /**\n    2   * @preserve A JavaScript implementation of the SHA family of hashes, as\n    3:  * defined in FIPS PUB 180-2 as well as the corresponding HMAC implementation\n    4   * as defined in FIPS PUB 198a\n    5   *\n    6:  * Copyright Brian Turek 2008-2015\n    7   * Distributed under the BSD License\n    8:  * See http://caligatio.github.com/jsSHA/ for more information\n    9   *\n   10   * Several functions taken from Paul Johnston\n   ..\n   12  \n   13   /**\n   14:   * SUPPORTED_ALGS is the stub for a compile flag that will cause pruning of\n   15    * functions that are not needed when a limited number of SHA families are\n   16    * selected\n   ..\n   28   *\n   29   * @private\n   30:  * @constructor\n   31   * @this {Int_64}\n   32   * @param {number} msint_32 The most significant 32-bits of a 64-bit number\n   ..\n   40  \n   41  /**\n   42:  * Convert a string to an array of big-endian words\n   43   *\n   44   * @private\n   45:  * @param {string} str String to be converted to binary representation\n   46:  * @param {string} utfType The Unicode type, UTF8 or UTF16BE, UTF16LE, to\n   47:  *   use to encode the source string\n   48   * @return {{value : Array.<number>, binLen : number}} Hash list where\n   49:  *   \"value\" contains the output number array and \"binLen\" is the binary\n   50   *   length of \"value\"\n   51   */\n   52  function str2binb(str, utfType)\n   53  {\n   54:   var bin = [], codePnt, binArr = [], byteCnt = 0, i, j, offset;\n   55  \n   56    if (\"UTF8\" === utfType)\n   ..\n   58      for (i = 0; i < str.length; i += 1)\n   59      {\n   60:       codePnt = str.charCodeAt(i);\n   61        binArr = [];\n   62  \n   63:       if (0x80 > codePnt)\n   64        {\n   65:         binArr.push(codePnt);\n   66        }\n   67:       else if (0x800 > codePnt)\n   68        {\n   69:         binArr.push(0xC0 | (codePnt >>> 6));\n   70:         binArr.push(0x80 | (codePnt & 0x3F));\n   71        }\n   72:       else if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {\n   73          binArr.push(\n   74:           0xe0 | (codePnt >>> 12),\n   75:           0x80 | ((codePnt >>> 6) & 0x3f),\n   76:           0x80 | (codePnt & 0x3f)\n   77          );\n   78        }\n   ..\n   80        {\n   81          i += 1;\n   82:         codePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n   83          binArr.push(\n   84:           0xf0 | (codePnt >>> 18),\n   85:           0x80 | ((codePnt >>> 12) & 0x3f),\n   86:           0x80 | ((codePnt >>> 6) & 0x3f),\n   87:           0x80 | (codePnt & 0x3f)\n   88          );\n   89        }\n   ..\n  105      for (i = 0; i < str.length; i += 1)\n  106      {\n  107:       codePnt = str.charCodeAt(i);\n  108        /* Internally strings are UTF-16BE so only change if UTF-16LE */\n  109        if (\"UTF16LE\" === utfType)\n  110        {\n  111:         j = codePnt & 0xFF;\n  112:         codePnt = (j << 8) | (codePnt >> 8);\n  113        }\n  114  \n  ...\n  118          bin.push(0);\n  119        }\n  120:       bin[offset] |= codePnt << (16 - (8 * (byteCnt % 4)));\n  121        byteCnt += 2;\n  122      }\n  ...\n  126  \n  127  /**\n  128:  * Convert a hex string to an array of big-endian words\n  129   *\n  130   * @private\n  131:  * @param {string} str String to be converted to binary representation\n  132   * @return {{value : Array.<number>, binLen : number}} Hash list where\n  133:  *   \"value\" contains the output number array and \"binLen\" is the binary\n  134   *   length of \"value\"\n  135   */\n  ...\n  157      else\n  158      {\n  159:       throw \"String of HEX type contains invalid characters\";\n  160      }\n  161    }\n  ...\n  165  \n  166  /**\n  167:  * Convert a string of raw bytes to an array of big-endian words\n  168   *\n  169   * @private\n  170:  * @param {string} str String of raw bytes to be converted to binary representation\n  171   * @return {{value : Array.<number>, binLen : number}} Hash list where\n  172:  *   \"value\" contains the output number array and \"binLen\" is the binary\n  173   *   length of \"value\"\n  174   */\n  175  function bytes2binb(str)\n  176  {\n  177:   var bin = [], codePnt, i, offset;\n  178  \n  179    for (i = 0; i < str.length; i += 1)\n  180    {\n  181:     codePnt = str.charCodeAt(i);\n  182  \n  183      offset = i >>> 2;\n  ...\n  186        bin.push(0);\n  187      }\n  188:     bin[offset] |= codePnt << (24 - (8 * (i % 4)));\n  189    }\n  190  \n  ...\n  193  \n  194  /**\n  195:  * Convert a Uint8Array of raw bytes to an array of big-endian 32-bit words\n  196   *\n  197   * @private\n  198:  * @param {Uint8Array} str String of raw bytes to be converted to binary representation\n  199   * @return {{value : Array.<number>, binLen : number}} Hash list where\n  200:  *   \"value\" contains the output array and \"binLen\" is the binary\n  201   *   length of \"value\"\n  202   */\n  ...\n  222  \n  223  /**\n  224:  * Convert a base-64 string to an array of big-endian words\n  225   *\n  226   * @private\n  227:  * @param {string} str String to be converted to binary representation\n  228   * @return {{value : Array.<number>, binLen : number}} Hash list where\n  229:  *   \"value\" contains the output number array and \"binLen\" is the binary\n  230   *   length of \"value\"\n  231   */\n  ...\n  274  \n  275  /**\n  276:  * Convert an array of big-endian words to a hex string.\n  277   *\n  278   * @private\n  279:  * @param {Array.<number>} binarray Array of integers to be converted to\n  280   *   hexidecimal representation\n  281   * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list\n  282:  *   containing validated output formatting options\n  283   * @return {string} Hexidecimal representation of the parameter in string\n  284   *   form\n  ...\n  301  \n  302  /**\n  303:  * Convert an array of big-endian words to a base-64 string\n  304   *\n  305   * @private\n  306:  * @param {Array.<number>} binarray Array of integers to be converted to\n  307   *   base-64 representation\n  308   * @param {{outputUpper : boolean, b64Pad : string}} formatOpts Hash list\n  309:  *   containing validated output formatting options\n  310:  * @return {string} Base-64 encoded representation of the parameter in\n  311   *   string form\n  312   */\n  ...\n  341  \n  342  /**\n  343:  * Convert an array of big-endian words to raw bytes string\n  344   *\n  345   * @private\n  346:  * @param {Array.<number>} binarray Array of integers to be converted to\n  347   *   a raw bytes string representation\n  348   * @param {!Object} formatOpts Unused Hash list\n  ...\n  357    {\n  358      srcByte = (binarray[i >>> 2] >>> ((3 - (i % 4)) * 8)) & 0xFF;\n  359:     str += String.fromCharCode(srcByte);\n  360    }\n  361  \n  ...\n  364  \n  365  /**\n  366:  * Convert an array of big-endian words to raw bytes Uint8Array\n  367   *\n  368   * @private\n  369:  * @param {Array.<number>} binarray Array of integers to be converted to\n  370   *   a raw bytes string representation\n  371   * @param {!Object} formatOpts Unused Hash list\n  ...\n  386  \n  387  /**\n  388:  * Validate hash list containing output formatting options, ensuring\n  389   * presence of every option or adding the default value\n  390   *\n  ...\n  393   *   Hash list of output formatting options\n  394   * @return {{outputUpper : boolean, b64Pad : string}} Validated hash list\n  395:  *   containing output formatting options\n  396   */\n  397  function getOutputOpts(outputOpts)\n  ...\n  531   * @private\n  532   * @param {number} x The first 32-bit integer argument\n  533:  * @param {number} y The second 32-bit integer argument\n  534   * @param {number} z The third 32-bit integer argument\n  535   * @return {number} The NIST specified output of the function\n  ...\n  545   * @private\n  546   * @param {number} x The first 32-bit integer argument\n  547:  * @param {number} y The second 32-bit integer argument\n  548   * @param {number} z The third 32-bit integer argument\n  549   * @return {number} The NIST specified output of the function\n  ...\n  559   * @private\n  560   * @param {Int_64} x The first 64-bit integer argument\n  561:  * @param {Int_64} y The second 64-bit integer argument\n  562   * @param {Int_64} z The third 64-bit integer argument\n  563   * @return {Int_64} The NIST specified output of the function\n  ...\n  576   * @private\n  577   * @param {number} x The first 32-bit integer argument\n  578:  * @param {number} y The second 32-bit integer argument\n  579   * @param {number} z The third 32-bit integer argument\n  580   * @return {number} The NIST specified output of the function\n  ...\n  590   * @private\n  591   * @param {Int_64} x The first 64-bit integer argument\n  592:  * @param {Int_64} y The second 64-bit integer argument\n  593   * @param {Int_64} z The third 64-bit integer argument\n  594   * @return {Int_64} The NIST specified output of the function\n  ...\n  729   * @private\n  730   * @param {number} a The first 32-bit integer argument to be added\n  731:  * @param {number} b The second 32-bit integer argument to be added\n  732   * @return {number} The sum of a + b\n  733   */\n  ...\n  746   * @private\n  747   * @param {number} a The first 32-bit integer argument to be added\n  748:  * @param {number} b The second 32-bit integer argument to be added\n  749   * @param {number} c The third 32-bit integer argument to be added\n  750   * @param {number} d The fourth 32-bit integer argument to be added\n  ...\n  766   * @private\n  767   * @param {number} a The first 32-bit integer argument to be added\n  768:  * @param {number} b The second 32-bit integer argument to be added\n  769   * @param {number} c The third 32-bit integer argument to be added\n  770   * @param {number} d The fourth 32-bit integer argument to be added\n  ...\n  788   * @private\n  789   * @param {Int_64} x The first 64-bit integer argument to be added\n  790:  * @param {Int_64} y The second 64-bit integer argument to be added\n  791   * @return {Int_64} The sum of x + y\n  792   */\n  ...\n  812   * @private\n  813   * @param {Int_64} a The first 64-bit integer argument to be added\n  814:  * @param {Int_64} b The second 64-bit integer argument to be added\n  815   * @param {Int_64} c The third 64-bit integer argument to be added\n  816   * @param {Int_64} d The fouth 64-bit integer argument to be added\n  ...\n  842   * @private\n  843   * @param {Int_64} a The first 64-bit integer argument to be added\n  844:  * @param {Int_64} b The second 64-bit integer argument to be added\n  845   * @param {Int_64} c The third 64-bit integer argument to be added\n  846   * @param {Int_64} d The fouth 64-bit integer argument to be added\n  ...\n  881   *   hash of message\n  882   */\n  883: function coreSHA1(message, messageLen)\n  884  {\n  885    var W = [], a, b, c, d, e, T, ch = ch_32, parity = parity_32,\n  ...\n  966   *   hash of message\n  967   */\n  968: function coreSHA2(message, messageLen, variant)\n  969  {\n  970    var a, b, c, d, e, f, g, h, T1, T2, H, numRounds, lengthPosition, i, t,\n  ...\n 1122    message[messageLen >>> 5] |= 0x80 << (24 - messageLen % 32);\n 1123    /* Append length of binary string in the position such that the new\n 1124:    * length is correct */\n 1125    message[lengthPosition] = messageLen;\n 1126  \n ....\n 1145          int1 = (message.length <= offset) ? 0 : message[offset];\n 1146          int2 = (message.length <= offset + 1) ? 0 : message[offset + 1];\n 1147:         /* Bit of a hack - for 32-bit, the second term is ignored */\n 1148          W[t] = new Int(int1, int2);\n 1149        }\n ....\n 1226   * be hashed as the parameter\n 1227   *\n 1228:  * @constructor\n 1229   * @this {jsSHA}\n 1230   * @param {string} srcString The string to be hashed\n 1231   * @param {string} inputFormat The format of srcString, HEX, ASCII, TEXT,\n 1232     *   B64, or BYTES\n 1233:  * @param {string=} encoding The text encoding to use to encode the source\n 1234   *   string\n 1235   */\n 1236: var jsSHA = function(srcString, inputFormat, encoding)\n 1237  {\n 1238:   var strBinLen = 0, strToHash = [0], utfType = '', srcConvertRet = null;\n 1239  \n 1240:   utfType = encoding || \"UTF8\";\n 1241  \n 1242    if (!((\"UTF8\" === utfType) || (\"UTF16BE\" === utfType) || (\"UTF16LE\" === utfType)))\n 1243    {\n 1244:     throw \"encoding must be UTF8, UTF16BE, or UTF16LE\";\n 1245    }\n 1246  \n 1247:   /* Convert the input string into the correct type */\n 1248    if (\"HEX\" === inputFormat)\n 1249    {\n ....\n 1252        throw \"srcString of HEX type must be in byte increments\";\n 1253      }\n 1254:     srcConvertRet = hex2binb(srcString);\n 1255:     strBinLen = srcConvertRet[\"binLen\"];\n 1256:     strToHash = srcConvertRet[\"value\"];\n 1257    }\n 1258    else if ((\"TEXT\" === inputFormat) || (\"ASCII\" === inputFormat))\n 1259    {\n 1260:     srcConvertRet = str2binb(srcString, utfType);\n 1261:     strBinLen = srcConvertRet[\"binLen\"];\n 1262:     strToHash = srcConvertRet[\"value\"];\n 1263    }\n 1264    else if (\"B64\" === inputFormat)\n 1265    {\n 1266:     srcConvertRet = b642binb(srcString);\n 1267:     strBinLen = srcConvertRet[\"binLen\"];\n 1268:     strToHash = srcConvertRet[\"value\"];\n 1269    }\n 1270    else if (\"BYTES\" === inputFormat)\n 1271    {\n 1272:     srcConvertRet = bytes2binb(srcString);\n 1273:     strBinLen = srcConvertRet[\"binLen\"];\n 1274:     strToHash = srcConvertRet[\"value\"];\n 1275    }\n 1276    else if (\"TYPED\" === inputFormat)\n 1277    {\n 1278:     srcConvertRet = typed2binb(srcString);\n 1279:     strBinLen = srcConvertRet[\"binLen\"];\n 1280:     strToHash = srcConvertRet[\"value\"];\n 1281    }\n 1282    else\n ....\n 1349        for (i = 0; i < numRounds; i += 1)\n 1350        {\n 1351:         message = coreSHA1(message, messageBinLen);\n 1352          messageBinLen = 160;\n 1353        }\n ....\n 1357        for (i = 0; i < numRounds; i += 1)\n 1358        {\n 1359:         message = coreSHA2(message, messageBinLen, variant);\n 1360          messageBinLen = 224;\n 1361        }\n ....\n 1365        for (i = 0; i < numRounds; i += 1)\n 1366        {\n 1367:         message = coreSHA2(message, messageBinLen, variant);\n 1368          messageBinLen = 256;\n 1369        }\n ....\n 1373        for (i = 0; i < numRounds; i += 1)\n 1374        {\n 1375:         message = coreSHA2(message, messageBinLen, variant);\n 1376          messageBinLen = 384;\n 1377        }\n ....\n 1381        for (i = 0; i < numRounds; i += 1)\n 1382        {\n 1383:         message = coreSHA2(message, messageBinLen, variant);\n 1384          messageBinLen = 512;\n 1385        }\n ....\n 1415      var formatFunc, keyToUse, blockByteSize, blockBitSize, i,\n 1416        retVal, lastArrayIndex, keyBinLen, hashBitSize,\n 1417:       keyWithIPad = [], keyWithOPad = [], keyConvertRet = null;\n 1418  \n 1419      /* Validate the output format selection */\n ....\n 1467      if (\"HEX\" === inputFormat)\n 1468      {\n 1469:       keyConvertRet = hex2binb(key);\n 1470:       keyBinLen = keyConvertRet[\"binLen\"];\n 1471:       keyToUse = keyConvertRet[\"value\"];\n 1472      }\n 1473      else if ((\"TEXT\" === inputFormat) || (\"ASCII\" === inputFormat))\n 1474      {\n 1475:       keyConvertRet = str2binb(key, utfType);\n 1476:       keyBinLen = keyConvertRet[\"binLen\"];\n 1477:       keyToUse = keyConvertRet[\"value\"];\n 1478      }\n 1479      else if (\"B64\" === inputFormat)\n 1480      {\n 1481:       keyConvertRet = b642binb(key);\n 1482:       keyBinLen = keyConvertRet[\"binLen\"];\n 1483:       keyToUse = keyConvertRet[\"value\"];\n 1484      }\n 1485      else if (\"BYTES\" === inputFormat)\n 1486      {\n 1487:       keyConvertRet = bytes2binb(key);\n 1488:       keyBinLen = keyConvertRet[\"binLen\"];\n 1489:       keyToUse = keyConvertRet[\"value\"];\n 1490      }\n 1491      else\n ....\n 1504        if ((\"SHA-1\" === variant) && (1 & SUPPORTED_ALGS))\n 1505        {\n 1506:         keyToUse = coreSHA1(keyToUse, keyBinLen);\n 1507        }\n 1508        else if (6 & SUPPORTED_ALGS)\n 1509        {\n 1510:         keyToUse = coreSHA2(keyToUse, keyBinLen, variant);\n 1511        }\n 1512        else\n ....\n 1545      if ((\"SHA-1\" === variant) && (1 & SUPPORTED_ALGS))\n 1546      {\n 1547:       retVal = coreSHA1(\n 1548:         keyWithOPad.concat(\n 1549:           coreSHA1(\n 1550:             keyWithIPad.concat(strToHash),\n 1551              blockBitSize + strBinLen\n 1552            )\n ....\n 1556      else if (6 & SUPPORTED_ALGS)\n 1557      {\n 1558:       retVal = coreSHA2(\n 1559:         keyWithOPad.concat(\n 1560:           coreSHA2(\n 1561:             keyWithIPad.concat(strToHash),\n 1562              blockBitSize + strBinLen,\n 1563              variant\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/index.js:\n   15  import crypto from './crypto.js';\n   16  \n   17: const mod = {\n   18    /** @see module:crypto/cipher */\n   19    cipher: cipher,\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/pkcs1.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * PKCS1 encoding\n   20   * @requires crypto/crypto\n   21   * @requires crypto/hash\n   ..\n   67      randomByte = random.getSecureRandomOctet();\n   68      if (randomByte !== 0) {\n   69:       result += String.fromCharCode(randomByte);\n   70      }\n   71    }\n   ..\n   78      /**\n   79       * create a EME-PKCS1-v1_5 padding (See {@link http://tools.ietf.org/html/rfc4880#section-13.1.1|RFC 4880 13.1.1})\n   80:      * @param {String} M message to be encoded\n   81       * @param {Integer} k the length in octets of the key modulus\n   82       * @return {String} EME-PKCS1 padded message\n   83       */\n   84:     encode: function(M, k) {\n   85        var mLen = M.length;\n   86        // length checking\n   ..\n   88          throw new Error('Message too long');\n   89        }\n   90:       // Generate an octet string PS of length k - mLen - 3 consisting of\n   91        // pseudo-randomly generated nonzero octets\n   92        var PS = getPkcs1Padding(k - mLen - 3);\n   93:       // Concatenate PS, the message M, and other padding to form an\n   94:       // encoded message EM of length k octets as EM = 0x00 || 0x02 || PS || 0x00 || M.\n   95:       var EM = String.fromCharCode(0) +\n   96:                String.fromCharCode(2) +\n   97                 PS +\n   98:                String.fromCharCode(0) +\n   99                 M;\n  100        return EM;\n  101      },\n  102      /**\n  103:      * decodes a EME-PKCS1-v1_5 padding (See {@link http://tools.ietf.org/html/rfc4880#section-13.1.2|RFC 4880 13.1.2})\n  104:      * @param {String} EM encoded message, an octet string\n  105       * @return {String} message, an octet string\n  106       */\n  107:     decode: function(EM) {\n  108        // leading zeros truncated by jsbn\n  109:       if (EM.charCodeAt(0) !== 0) {\n  110:         EM = String.fromCharCode(0) + EM;\n  111        }\n  112:       var firstOct = EM.charCodeAt(0);\n  113:       var secondOct = EM.charCodeAt(1);\n  114        var i = 2;\n  115:       while (EM.charCodeAt(i) !== 0 && i < EM.length) {\n  116          i++;\n  117        }\n  118        var psLen = i - 2;\n  119:       var separator = EM.charCodeAt(i++);\n  120:       if (firstOct === 0 && secondOct === 2 && psLen >= 8 && separator === 0) {\n  121          return EM.substr(i);\n  122        } else {\n  ...\n  130       * create a EMSA-PKCS1-v1_5 padding (See {@link http://tools.ietf.org/html/rfc4880#section-13.1.3|RFC 4880 13.1.3})\n  131       * @param {Integer} algo Hash algorithm type used\n  132:      * @param {String} M message to be encoded\n  133:      * @param {Integer} emLen intended length in octets of the encoded message\n  134:      * @returns {String} encoded message\n  135       */\n  136:     encode: function(algo, M, emLen) {\n  137        var i;\n  138        // Apply the hash function to the message M to produce a hash value H\n  ...\n  145        var T = '';\n  146        for (i = 0; i < hash_headers[algo].length; i++) {\n  147:         T += String.fromCharCode(hash_headers[algo][i]);\n  148        }\n  149        // add hash value to prefix\n  ...\n  152        var tLen = T.length;\n  153        if (emLen < tLen + 11) {\n  154:         throw new Error('Intended encoded message length too short');\n  155        }\n  156:       // an octet string PS consisting of emLen - tLen - 3 octets with hexadecimal value 0xFF\n  157        // The length of PS will be at least 8 octets\n  158        var PS = '';\n  159        for (i = 0; i < (emLen - tLen - 3); i++) {\n  160:         PS += String.fromCharCode(0xff);\n  161        }\n  162:       // Concatenate PS, the hash prefix T, and other padding to form the\n  163:       // encoded message EM as EM = 0x00 || 0x01 || PS || 0x00 || T.\n  164:       var EM = String.fromCharCode(0x00) +\n  165:                String.fromCharCode(0x01) +\n  166                 PS +\n  167:                String.fromCharCode(0x00) +\n  168                 T;\n  169        return new BigInteger(util.hexstrdump(EM), 16);\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/public_key/dsa.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   32  import hashModule from '../hash';\n   33  import util from '../../util.js';\n   34: import config from '../../config';\n   35  \n   36  export default function DSA() {\n   ..\n   66  \n   67    function select_hash_algorithm(q) {\n   68:     var usersetting = config.prefer_hash_algorithm;\n   69      /*\n   70       * 1024-bit key, 160-bit q, SHA-1, SHA-224, SHA-256, SHA-384, or SHA-512 hash\n   ..\n  107      var hashed_data = util.getLeftNBits(util.Uint8Array2str(hashModule.digest(hashalgo, util.str2Uint8Array(m))), q.bitLength());\n  108      var hash = new BigInteger(util.hexstrdump(hashed_data), 16);\n  109:     if (BigInteger.ZERO.compareTo(s1) >= 0 ||\n  110:       s1.compareTo(q) >= 0 ||\n  111:       BigInteger.ZERO.compareTo(s2) >= 0 ||\n  112:       s2.compareTo(q) >= 0) {\n  113        util.print_debug(\"invalid DSA Signature\");\n  114        return null;\n  115      }\n  116      var w = s2.modInverse(q);\n  117:     if (BigInteger.ZERO.compareTo(w) === 0) {\n  118        util.print_debug(\"invalid DSA Signature\");\n  119        return null;\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/public_key/elgamal.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/public_key/jsbn.js:\n    1  /*\n    2:  * Copyright (c) 2003-2005  Tom Wu (tjw@cs.Stanford.EDU)\n    3   * All Rights Reserved.\n    4   *\n    .\n    6   *\n    7   * Permission is hereby granted, free of charge, to any person obtaining\n    8:  * a copy of this software and associated documentation files (the\n    9   * \"Software\"), to deal in the Software without restriction, including\n   10:  * without limitation the rights to use, copy, modify, merge, publish,\n   11:  * distribute, sublicense, and/or sell copies of the Software, and to\n   12   * permit persons to whom the Software is furnished to do so, subject to\n   13:  * the following conditions:\n   14   *\n   15:  * The above copyright notice and this permission notice shall be\n   16:  * included in all copies or substantial portions of the Software.\n   17   *\n   18   * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n   ..\n   21   *\n   22   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n   23:  * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n   24   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n   25   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n   26:  * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n   27   *\n   28:  * In addition, the following condition applies:\n   29   *\n   30:  * All redistributions must retain an intact copy of this copyright notice\n   31   * and disclaimer.\n   32   */\n   ..\n   49  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n   50  \n   51: // (public) Constructor\n   52  \n   53  export default function BigInteger(a, b, c) {\n   ..\n   64  }\n   65  \n   66: // am: Compute w_j += (x*this_i), propagate carries,\n   67  // c is initial carry, returns final carry.\n   68  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n   ..\n   81    return c;\n   82  }\n   83: // am2 avoids a big mult-and-extract completely.\n   84  // Max digit bits should be <= 30 because we do bitwise ops\n   85  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n   ..\n  137  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n  138  \n  139: // Digit conversions\n  140  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  141  var BI_RC = new Array();\n  142  var rr, vv;\n  143: rr = \"0\".charCodeAt(0);\n  144  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n  145: rr = \"a\".charCodeAt(0);\n  146  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n  147: rr = \"A\".charCodeAt(0);\n  148  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n  149  \n  ...\n  153  \n  154  function intAt(s, i) {\n  155:   var c = BI_RC[s.charCodeAt(i)];\n  156    return (c == null) ? -1 : c;\n  157  }\n  158  \n  159: // (protected) copy this to r\n  160  \n  161: function bnpCopyTo(r) {\n  162    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n  163    r.t = this.t;\n  ...\n  206      if (x < 0) {\n  207        if (s.charAt(i) == \"-\") mi = true;\n  208:       continue;\n  209      }\n  210      mi = false;\n  ...\n  289  // (public) return + if this > a, - if this < a, 0 if equal\n  290  \n  291: function bnCompareTo(a) {\n  292    var r = this.s - a.s;\n  293    if (r != 0) return r;\n  ...\n  471    if (pt.t < pm.t) {\n  472      if (q != null) q.fromInt(0);\n  473:     if (r != null) this.copyTo(r);\n  474      return;\n  475    }\n  ...\n  483      pt.lShiftTo(nsh, r);\n  484    } else {\n  485:     pm.copyTo(y);\n  486:     pt.copyTo(r);\n  487    }\n  488    var ys = y.t;\n  ...\n  497      t = (q == null) ? nbi() : q;\n  498    y.dlShiftTo(j, t);\n  499:   if (r.compareTo(t) >= 0) {\n  500      r[r.t++] = 1;\n  501      r.subTo(t, r);\n  ...\n  528    var r = nbi();\n  529    this.abs().divRemTo(a, null, r);\n  530:   if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  531    return r;\n  532  }\n  ...\n  538  }\n  539  \n  540: function cConvert(x) {\n  541:   if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  542    else return x;\n  543  }\n  ...\n  561  }\n  562  \n  563: Classic.prototype.convert = cConvert;\n  564  Classic.prototype.revert = cRevert;\n  565  Classic.prototype.reduce = cReduce;\n  ...\n  606  // xR mod m\n  607  \n  608: function montConvert(x) {\n  609    var r = nbi();\n  610    x.abs().dlShiftTo(this.m.t, r);\n  611    r.divRemTo(this.m, null, r);\n  612:   if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  613    return r;\n  614  }\n  ...\n  618  function montRevert(x) {\n  619    var r = nbi();\n  620:   x.copyTo(r);\n  621    this.reduce(r);\n  622    return r;\n  ...\n  632      var j = x[i] & 0x7fff;\n  633      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n  634:     // use am to combine the multiply-shift-add into one call\n  635      j = i + this.m.t;\n  636      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n  ...\n  643    x.clamp();\n  644    x.drShiftTo(this.m.t, x);\n  645:   if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  646  }\n  647  \n  ...\n  660  }\n  661  \n  662: Montgomery.prototype.convert = montConvert;\n  663  Montgomery.prototype.revert = montRevert;\n  664  Montgomery.prototype.reduce = montReduce;\n  ...\n  678    var r = nbi(),\n  679      r2 = nbi(),\n  680:     g = z.convert(this),\n  681      i = nbits(e) - 1;\n  682:   g.copyTo(r);\n  683    while (--i >= 0) {\n  684      z.sqrTo(r, r2);\n  ...\n  703  \n  704  // protected\n  705: BigInteger.prototype.copyTo = bnpCopyTo;\n  706  BigInteger.prototype.fromInt = bnpFromInt;\n  707  BigInteger.prototype.fromString = bnpFromString;\n  ...\n  723  BigInteger.prototype.negate = bnNegate;\n  724  BigInteger.prototype.abs = bnAbs;\n  725: BigInteger.prototype.compareTo = bnCompareTo;\n  726  BigInteger.prototype.bitLength = bnBitLength;\n  727  BigInteger.prototype.mod = bnMod;\n  728  BigInteger.prototype.modPowInt = bnModPowInt;\n  729  \n  730: // \"constants\"\n  731  BigInteger.ZERO = nbv(0);\n  732  BigInteger.ONE = nbv(1);\n  ...\n  752  \n  753  /*\n  754:  * Copyright (c) 2003-2005  Tom Wu (tjw@cs.Stanford.EDU)\n  755   * All Rights Reserved.\n  756   *\n  ...\n  758   *\n  759   * Permission is hereby granted, free of charge, to any person obtaining\n  760:  * a copy of this software and associated documentation files (the\n  761   * \"Software\"), to deal in the Software without restriction, including\n  762:  * without limitation the rights to use, copy, modify, merge, publish,\n  763:  * distribute, sublicense, and/or sell copies of the Software, and to\n  764   * permit persons to whom the Software is furnished to do so, subject to\n  765:  * the following conditions:\n  766   *\n  767:  * The above copyright notice and this permission notice shall be\n  768:  * included in all copies or substantial portions of the Software.\n  769   *\n  770   * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n  ...\n  773   *\n  774   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n  775:  * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n  776   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n  777   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n  778:  * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  779   *\n  780:  * In addition, the following condition applies:\n  781   *\n  782:  * All redistributions must retain an intact copy of this copyright notice\n  783   * and disclaimer.\n  784   */\n  ...\n  793  function bnClone() {\n  794    var r = nbi();\n  795:   this.copyTo(r);\n  796    return r;\n  797  }\n  ...\n  835  }\n  836  \n  837: // (protected) convert to radix string\n  838  \n  839  function bnpToRadix(b) {\n  ...\n  854  }\n  855  \n  856: // (protected) convert from radix string\n  857  \n  858  function bnpFromRadix(s, b) {\n  ...\n  868      if (x < 0) {\n  869        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n  870:       continue;\n  871      }\n  872      w = b * w + x;\n  ...\n  885  }\n  886  \n  887: // (protected) alternate constructor\n  888  \n  889  function bnpFromNumber(a, b, c) {\n  ...\n  913  }\n  914  \n  915: // (public) convert to bigendian byte array\n  916  \n  917  function bnToByteArray() {\n  ...\n  944  \n  945  function bnEquals(a) {\n  946:   return (this.compareTo(a) == 0);\n  947  }\n  948  \n  949  function bnMin(a) {\n  950:   return (this.compareTo(a) < 0) ? this : a;\n  951  }\n  952  \n  953  function bnMax(a) {\n  954:   return (this.compareTo(a) > 0) ? this : a;\n  955  }\n  956  \n  ...\n 1096  // (public) return number of set bits\n 1097  \n 1098: function bnBitCount() {\n 1099    var r = 0,\n 1100      x = this.s & this.DM;\n ....\n 1266  }\n 1267  \n 1268: NullExp.prototype.convert = nNop;\n 1269  NullExp.prototype.revert = nNop;\n 1270  NullExp.prototype.mulTo = nMulTo;\n ....\n 1316  }\n 1317  \n 1318: function barrettConvert(x) {\n 1319    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n 1320:   else if (x.compareTo(this.m) < 0) return x;\n 1321    else {\n 1322      var r = nbi();\n 1323:     x.copyTo(r);\n 1324      this.reduce(r);\n 1325      return r;\n ....\n 1341    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n 1342    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n 1343:   while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n 1344    x.subTo(this.r2, x);\n 1345:   while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n 1346  }\n 1347  \n ....\n 1360  }\n 1361  \n 1362: Barrett.prototype.convert = barrettConvert;\n 1363  Barrett.prototype.revert = barrettRevert;\n 1364  Barrett.prototype.reduce = barrettReduce;\n ....\n 1385      z = new Montgomery(m);\n 1386  \n 1387:   // precomputation\n 1388    var g = new Array(),\n 1389      n = 3,\n 1390      k1 = k - 1,\n 1391      km = (1 << k) - 1;\n 1392:   g[1] = z.convert(this);\n 1393    if (k > 1) {\n 1394      var g2 = nbi();\n ....\n 1423      }\n 1424      if (is1) { // ret == 1, don't bother squaring or multiplying it\n 1425:       g[w].copyTo(r);\n 1426        is1 = false;\n 1427      } else {\n ....\n 1459    var x = (this.s < 0) ? this.negate() : this.clone();\n 1460    var y = (a.s < 0) ? a.negate() : a.clone();\n 1461:   if (x.compareTo(y) < 0) {\n 1462      var t = x;\n 1463      x = y;\n ....\n 1475      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n 1476      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n 1477:     if (x.compareTo(y) >= 0) {\n 1478        x.subTo(y, x);\n 1479        x.rShiftTo(1, x);\n ....\n 1533        d.rShiftTo(1, d);\n 1534      }\n 1535:     if (u.compareTo(v) >= 0) {\n 1536        u.subTo(v, u);\n 1537        if (ac) a.subTo(c, a);\n ....\n 1543      }\n 1544    }\n 1545:   if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n 1546:   if (d.compareTo(m) >= 0) return d.subtract(m);\n 1547    if (d.signum() < 0) d.addTo(m, d);\n 1548    else return d;\n ....\n 1615    var size = (ba.length - 1) * 8 + nbits(ba[0]);\n 1616    var result = \"\";\n 1617:   result += String.fromCharCode((size & 0xFF00) >> 8);\n 1618:   result += String.fromCharCode(size & 0xFF);\n 1619    result += util.bin2str(ba);\n 1620    return result;\n ....\n 1641      a.fromInt(j);\n 1642      var y = a.modPow(r, this);\n 1643:     if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n 1644        var j = 1;\n 1645:       while (j++ < k && y.compareTo(n1) != 0) {\n 1646          y = y.modPowInt(2, this);\n 1647:         if (y.compareTo(BigInteger.ONE) == 0) return false;\n 1648        }\n 1649:       if (y.compareTo(n1) != 0) return false;\n 1650      }\n 1651    }\n ....\n 1686  BigInteger.prototype.shiftRight = bnShiftRight;\n 1687  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n 1688: BigInteger.prototype.bitCount = bnBitCount;\n 1689  BigInteger.prototype.testBit = bnTestBit;\n 1690  BigInteger.prototype.setBit = bnSetBit;\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/public_key/rsa.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   30  import util from '../../util.js';\n   31  import random from '../random.js';\n   32: import config from '../../config';\n   33  \n   34  function SecureRandom() {\n   ..\n   78     */\n   79    function decrypt(m, n, e, d, p, q, u) {\n   80:     if (config.rsa_blinding) {\n   81        m = blind(m, n, e);\n   82      }\n   ..\n   94      }\n   95      t = t.multiply(p).add(xp);\n   96:     if (config.rsa_blinding) {\n   97        t = unblind(t, n);\n   98      }\n   ..\n  120    }\n  121  \n  122:   // \"empty\" RSA key constructor\n  123  \n  124    function KeyObject() {\n  ...\n  178          if (key instanceof ArrayBuffer) {\n  179            // parse raw ArrayBuffer bytes to jwk/json (WebKit/Safari/IE11 quirk)\n  180:           return decodeKey(JSON.parse(String.fromCharCode.apply(null, new Uint8Array(key))));\n  181          }\n  182:         return decodeKey(key);\n  183        });\n  184      }\n  ...\n  194      }\n  195  \n  196:     function decodeKey(jwk) {\n  197        // map JWK parameters to local BigInteger type system\n  198        var key = new KeyObject();\n  ...\n  214  \n  215      //\n  216:     // JS code\n  217      //\n  218  \n  ...\n  227          for (;;) {\n  228            key.p = new BigInteger(B - qs, 1, rng);\n  229:           if (key.p.subtract(BigInteger.ONE).gcd(key.ee).compareTo(BigInteger.ONE) === 0 && key.p.isProbablePrime(10)) {\n  230              break;\n  231            }\n  ...\n  233          for (;;) {\n  234            key.q = new BigInteger(qs, 1, rng);\n  235:           if (key.q.subtract(BigInteger.ONE).gcd(key.ee).compareTo(BigInteger.ONE) === 0 && key.q.isProbablePrime(10)) {\n  236              break;\n  237            }\n  238          }\n  239:         if (key.p.compareTo(key.q) <= 0) {\n  240            var t = key.p;\n  241            key.p = key.q;\n  ...\n  245          var q1 = key.q.subtract(BigInteger.ONE);\n  246          var phi = p1.multiply(q1);\n  247:         if (phi.gcd(key.ee).compareTo(BigInteger.ONE) === 0) {\n  248            key.n = key.p.multiply(key.q);\n  249            key.d = key.ee.modInverse(phi);\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/random.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   28  import type_mpi from '../type/mpi.js';\n   29  import util from '../util.js';\n   30: const nodeCrypto = util.detectNode() && require('crypto');\n   31  \n   32  export default {\n   ..\n  108      if (bits % 8 > 0) {\n  109  \n  110:       randomBits = String.fromCharCode(\n  111        (Math.pow(2, bits % 8) - 1) &\n  112:         randomBits.charCodeAt(0)) +\n  113          randomBits.substring(1);\n  114      }\n  ...\n  119  \n  120    getRandomBigIntegerInRange: function(min, max) {\n  121:     if (max.compareTo(min) <= 0) {\n  122        throw new Error('Illegal parameter value: max <= min');\n  123      }\n  ...\n  125      var range = max.subtract(min);\n  126      var r = this.getRandomBigInteger(range.bitLength());\n  127:     while (r.compareTo(range) > 0) {\n  128        r = this.getRandomBigInteger(range.bitLength());\n  129      }\n  ...\n  153  \n  154  /**\n  155:  * Concat array of secure random numbers to buffer\n  156   * @param {Uint8Array} buf\n  157   */\n  ...\n  173  \n  174  /**\n  175:  * Take numbers out of buffer and copy to array\n  176   * @param {Uint8Array} buf the destination array\n  177   */\n\n/Users/steph/Documents/projects/openpgpjs/src/crypto/signature.js:\n   19     * @param {Array<module:type/mpi>} msg_MPIs Signature multiprecision integers\n   20     * @param {Array<module:type/mpi>} publickey_MPIs Public key multiprecision integers\n   21:    * @param {Uint8Array} data Data on where the signature was computed on.\n   22     * @return {Boolean} true if signature (sig_data was equal to data over hash)\n   23     */\n   ..\n   40          m = msg_MPIs[0].toBigInteger();\n   41          var EM = rsa.verify(m, e, n);\n   42:         var EM2 = pkcs1.emsa.encode(hash_algo, data, k);\n   43:         return EM.compareTo(EM2) === 0;\n   44        case 16:\n   45          // Elgamal (Encrypt-Only) [ELGAMAL] [HAC]\n   ..\n   56          m = data;\n   57          var dopublic = dsa.verify(hash_algo, s1, s2, m, p, q, g, y);\n   58:         return dopublic.compareTo(s1) === 0;\n   59        default:\n   60          throw new Error('Invalid signature algorithm.');\n   ..\n   89          var d = keyIntegers[2].toBigInteger();\n   90          var n = keyIntegers[0].toBigInteger();\n   91:         m = pkcs1.emsa.encode(hash_algo,\n   92            data, keyIntegers[0].byteLength());\n   93          return util.str2Uint8Array(rsa.sign(m, d, n).toMPI());\n\n/Users/steph/Documents/projects/openpgpjs/src/encoding/armor.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * @requires encoding/base64\n   20   * @requires enums\n   21:  * @requires config\n   22:  * @module encoding/armor\n   23   */\n   24  \n   ..\n   27  import base64 from './base64.js';\n   28  import enums from '../enums.js';\n   29: import config from '../config';\n   30  \n   31  /**\n   ..\n   72    } else\n   73    // BEGIN PGP MESSAGE\n   74:   // Used for signed, encrypted, or compressed files.\n   75    if (/MESSAGE/.test(header[1])) {\n   76      return enums.armor.message;\n   ..\n   99  function addheader() {\n  100    var result = \"\";\n  101:   if (config.show_version) {\n  102:     result += \"Version: \" + config.versionstring + '\\r\\n';\n  103    }\n  104:   if (config.show_comment) {\n  105:     result += \"Comment: \" + config.commentstring + '\\r\\n';\n  106    }\n  107    result += '\\r\\n';\n  ...\n  112  \n  113  /**\n  114:  * Calculates a checksum over the given data and returns it base64 encoded\n  115   * @param {String} data Data to create a CRC-24 checksum for\n  116:  * @return {String} Base64 encoded checksum\n  117   */\n  118  function getCheckSum(data) {\n  119    var c = createcrc24(data);\n  120    var bytes = new Uint8Array([c >> 16, (c >> 8) & 0xFF, c & 0xFF]);\n  121:   return base64.encode(bytes);\n  122  }\n  123  \n  124  /**\n  125:  * Calculates the checksum over the given data and compares it with the\n  126:  * given base64 encoded checksum\n  127   * @param {String} data Data to create a CRC-24 checksum for\n  128:  * @param {String} checksum Base64 encoded checksum\n  129:  * @return {Boolean} True if the given checksum is correct; otherwise false\n  130   */\n  131  function verifyCheckSum(data, checksum) {\n  ...\n  208   * @param {String} text OpenPGP armored message part\n  209   * @returns {(Boolean|Object)} Either false in case of an error\n  210:  * or an object with attribute \"headers\" containing the headers and\n  211:  * and an attribute \"body\" containing the body.\n  212   */\n  213  function splitHeaders(text) {\n  ...\n  234  \n  235  /**\n  236:  * Verify armored headers. RFC4880, section 6.3: \"OpenPGP should consider improperly formatted\n  237:  * Armor Headers to be corruption of the ASCII Armor.\"\n  238   * @private\n  239   * @param  {Array<String>} headers Armor headers\n  ...\n  241  function verifyHeaders(headers) {\n  242    for (var i = 0; i < headers.length; i++) {\n  243:     if (!/^(Version|Comment|MessageID|Hash|Charset): .+$/.test(headers[i])) {\n  244        throw new Error('Improperly formatted armor header: ' + headers[i]);\n  245      }\n  ...\n  251   * @param {String} text OpenPGP armored message part\n  252   * @returns {(Boolean|Object)} Either false in case of an error\n  253:  * or an object with attribute \"body\" containing the body\n  254:  * and an attribute \"checksum\" containing the checksum.\n  255   */\n  256  function splitChecksum(text) {\n  ...\n  271  /**\n  272   * DeArmor an OpenPGP armored message; verify the checksum and return\n  273:  * the encoded bytes\n  274   * @param {String} text OpenPGP armored message\n  275:  * @returns {Object} An object with attribute \"text\" containing the message text,\n  276:  * an attribute \"data\" containing the bytes and \"type\" for the ASCII armor type\n  277   * @static\n  278   */\n  ...\n  303  \n  304      result = {\n  305:       data: base64.decode(msg_sum.body),\n  306        headers: msg.headers,\n  307        type: type\n  ...\n  318      result = {\n  319        text: msg.body.replace(/\\n$/, '').replace(/\\n/g, \"\\r\\n\"),\n  320:       data: base64.decode(sig_sum.body),\n  321        headers: msg.headers,\n  322        type: type\n  ...\n  356        result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"/\" + parttotal + \"-----\\r\\n\");\n  357        result.push(addheader());\n  358:       result.push(base64.encode(body));\n  359        result.push(\"\\r\\n=\" + getCheckSum(body) + \"\\r\\n\");\n  360        result.push(\"-----END PGP MESSAGE, PART \" + partindex + \"/\" + parttotal + \"-----\\r\\n\");\n  ...\n  363        result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"-----\\r\\n\");\n  364        result.push(addheader());\n  365:       result.push(base64.encode(body));\n  366        result.push(\"\\r\\n=\" + getCheckSum(body) + \"\\r\\n\");\n  367        result.push(\"-----END PGP MESSAGE, PART \" + partindex + \"-----\\r\\n\");\n  ...\n  373        result.push(\"\\r\\n-----BEGIN PGP SIGNATURE-----\\r\\n\");\n  374        result.push(addheader());\n  375:       result.push(base64.encode(body.data));\n  376        result.push(\"\\r\\n=\" + getCheckSum(body.data) + \"\\r\\n\");\n  377        result.push(\"-----END PGP SIGNATURE-----\\r\\n\");\n  ...\n  380        result.push(\"-----BEGIN PGP MESSAGE-----\\r\\n\");\n  381        result.push(addheader());\n  382:       result.push(base64.encode(body));\n  383        result.push(\"\\r\\n=\" + getCheckSum(body) + \"\\r\\n\");\n  384        result.push(\"-----END PGP MESSAGE-----\\r\\n\");\n  ...\n  387        result.push(\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n\");\n  388        result.push(addheader());\n  389:       result.push(base64.encode(body));\n  390        result.push(\"\\r\\n=\" + getCheckSum(body) + \"\\r\\n\");\n  391        result.push(\"-----END PGP PUBLIC KEY BLOCK-----\\r\\n\\r\\n\");\n  ...\n  394        result.push(\"-----BEGIN PGP PRIVATE KEY BLOCK-----\\r\\n\");\n  395        result.push(addheader());\n  396:       result.push(base64.encode(body));\n  397        result.push(\"\\r\\n=\" + getCheckSum(body) + \"\\r\\n\");\n  398        result.push(\"-----END PGP PRIVATE KEY BLOCK-----\\r\\n\");\n  ...\n  404  \n  405  export default {\n  406:   encode: armor,\n  407:   decode: dearmor\n  408  };\n  409  \n\n/Users/steph/Documents/projects/openpgpjs/src/encoding/base64.js:\n    1: /* OpenPGP radix-64/base64 string encoding/decoding\n    2:  * Copyright 2005 Herbert Hanewinkel, www.haneWIN.de\n    3   * version 1.0, check www.haneWIN.de for the latest version\n    4   *\n    5   * This software is provided as-is, without express or implied warranty.\n    6:  * Permission to use, copy, modify, distribute or sell this software, with or\n    7   * without fee, for any purpose and by any individual or organization, is hereby\n    8:  * granted, provided that the above copyright notice and this paragraph appear\n    9:  * in all copies. Distribution as a part of an application or binary must\n   10:  * include the above copyright notice in the documentation and/or other materials\n   11   * provided with the application or distribution.\n   12   */\n   13  \n   14  /**\n   15:  * @module encoding/base64\n   16   */\n   17  \n   ..\n   21  \n   22  /**\n   23:  * Convert binary array to radix-64\n   24:  * @param {Uint8Array} t Uint8Array to convert\n   25   * @returns {string} radix-64 version of input string\n   26   * @static\n   ..\n   83  \n   84  /**\n   85:  * Convert radix-64 to binary array\n   86:  * @param {String} t radix-64 string to convert\n   87   * @returns {Uint8Array} binary array version of input string\n   88   * @static\n   ..\n  110  \n  111  export default {\n  112:   encode: s2r,\n  113:   decode: r2s\n  114  };\n  115  \n\n/Users/steph/Documents/projects/openpgpjs/src/enums.js:\n   51     * @readonly\n   52     */\n   53:   compression: {\n   54:     uncompressed: 0,\n   55      /** RFC1951 */\n   56      zip: 1,\n   ..\n   86      publicKey: 6,\n   87      secretSubkey: 7,\n   88:     compressed: 8,\n   89      symmetricallyEncrypted: 9,\n   90      marker: 10,\n   ..\n   95      userAttribute: 17,\n   96      symEncryptedIntegrityProtected: 18,\n   97:     modificationDetectionCode: 19\n   98    },\n   99  \n  ...\n  104    literal: {\n  105      /** Binary data 'b' */\n  106:     binary: 'b'.charCodeAt(),\n  107      /** Text data 't' */\n  108:     text: 't'.charCodeAt(),\n  109      /** Utf8 data 'u' */\n  110:     utf8: 'u'.charCodeAt()\n  111    },\n  112  \n  ...\n  120      binary: 0,\n  121      /** 0x01: Signature of a canonical text document.<br/>\n  122:      * Canonicalyzing the document by converting line endings. */\n  123      text: 1,\n  124      /** 0x02: Standalone signature.<br/>\n  125:      * This signature is a signature of only its own subpacket contents.\n  126       * It is calculated identically to a signature over a zero-lengh\n  127       * binary document.  Note that it doesn't make sense to have a V3\n  ...\n  154       * (0x1F).  It should be issued by the same key that issued the\n  155       * revoked signature or an authorized revocation key.  The signature\n  156:      * is computed over the same data as the certificate that it\n  157       * revokes, and should have a later creation date than that\n  158       * certificate. */\n  ...\n  164       * other packets.  A signature that binds a signing subkey MUST have\n  165       * an Embedded Signature subpacket in this binding signature that\n  166:      * contains a 0x19 signature made by the signing subkey on the\n  167       * primary key and subkey. */\n  168      subkey_binding: 24,\n  ...\n  194       * revoked key is not to be used.  Only revocation signatures by the\n  195       * key being revoked, or by an authorized revocation key, should be\n  196:      * considered valid revocation signatures.a */\n  197      key_revocation: 32,\n  198      /** 0x28: Subkey revocation signature<br/>\n  ...\n  200       * A revoked subkey is not to be used.  Only revocation signatures\n  201       * by the top-level signature key that is bound to this subkey, or\n  202:      * by an authorized revocation key, should be considered valid\n  203       * revocation signatures.<br/>\n  204       * <br/>\n  ...\n  207      subkey_revocation: 40,\n  208      /** 0x40: Timestamp signature.<br/>\n  209:      * This signature is only meaningful for the timestamp contained in\n  210       * it. */\n  211      timestamp: 64,\n  212:     /** 0x50: Third-Party Confirmation signature.<br/>\n  213       * This signature is a signature over some other OpenPGP Signature\n  214       * packet(s).  It is analogous to a notary seal on the signed data.\n  ...\n  233      revocable: 7,\n  234      key_expiration_time: 9,\n  235:     placeholder_backwards_compatibility: 10,\n  236      preferred_symmetric_algorithms: 11,\n  237      revocation_key: 12,\n  ...\n  239      notation_data: 20,\n  240      preferred_hash_algorithms: 21,\n  241:     preferred_compression_algorithms: 22,\n  242      key_server_preferences: 23,\n  243      preferred_key_server: 24,\n  ...\n  261      /** 0x02 - This key may be used to sign data. */\n  262      sign_data: 2,\n  263:     /** 0x04 - This key may be used to encrypt communications. */\n  264:     encrypt_communication: 4,\n  265      /** 0x08 - This key may be used to encrypt storage. */\n  266      encrypt_storage: 8,\n  267:     /** 0x10 - The private component of this key may have been split\n  268       *        by a secret-sharing mechanism. */\n  269      split_private_key: 16,\n  270      /** 0x20 - This key may be used for authentication. */\n  271      authentication: 32,\n  272:     /** 0x80 - The private component of this key may be in the\n  273       *        possession of more than one person. */\n  274      shared_private_key: 128\n  ...\n  300    },\n  301  \n  302:   /** Asserts validity and converts from string/integer to integer. */\n  303    write: function(type, e) {\n  304      if (typeof e === 'number') {\n  ...\n  313    },\n  314  \n  315:   /** Converts from an integer to string. */\n  316    read: function(type, e) {\n  317      for (var i in type) {\n\n/Users/steph/Documents/projects/openpgpjs/src/hkp.js:\n    1  // OpenPGP.js - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2015 Tankred Hase\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * @fileoverview This class implements a client for the OpenPGP HTTP Keyserver Protocol (HKP)\n   20   * in order to lookup and upload keys on standard public key servers.\n   21   */\n   ..\n   23  'use strict';\n   24  \n   25: import config from './config';\n   26  \n   27  /**\n   28:  * Initialize the HKP client and configure it with the key server url and fetch function.\n   29:  * @constructor\n   30   * @param {String}    keyServerBaseUrl  (optional) The HKP key server base url including\n   31:  *   the protocol to use e.g. https://pgp.mit.edu\n   32   */\n   33  export default function HKP(keyServerBaseUrl) {\n   34:   this._baseUrl = keyServerBaseUrl ? keyServerBaseUrl : config.keyserver;\n   35    this._fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');\n   36  }\n   ..\n   48  \n   49    if (options.keyId) {\n   50:     uri += '0x' + encodeURIComponent(options.keyId);\n   51    } else if (options.query) {\n   52:     uri += encodeURIComponent(options.query);\n   53    } else {\n   54      throw new Error('You must provide a query parameter!');\n   ..\n   80      method: 'post',\n   81      headers: {\n   82:       'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n   83      },\n   84:     body: 'keytext=' + encodeURIComponent(publicKeyArmored)\n   85    });\n   86  };\n\n/Users/steph/Documents/projects/openpgpjs/src/index.js:\n   25   */\n   26  import * as keyMod from './key';\n   27: export const key = keyMod;\n   28  \n   29  /**\n   ..\n   32   */\n   33  import * as messageMod from './message';\n   34: export const message = messageMod;\n   35  \n   36  /**\n   ..\n   39   */\n   40  import * as cleartextMod from './cleartext';\n   41: export const cleartext = cleartextMod;\n   42  \n   43  /**\n   ..\n   72  \n   73  /**\n   74:  * @see module:encoding/armor\n   75   * @name module:openpgp.armor\n   76   */\n   77: export { default as armor } from './encoding/armor';\n   78  \n   79  /**\n   ..\n   84  \n   85  /**\n   86:  * @see module:config/config\n   87:  * @name module:openpgp.config\n   88   */\n   89: export { default as config } from './config/config';\n   90  \n   91  /**\n\n/Users/steph/Documents/projects/openpgpjs/src/key.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * @requires config\n   20:  * @requires encoding/armor\n   21   * @requires enums\n   22   * @requires packet\n   ..\n   28  import packet from './packet';\n   29  import enums from './enums.js';\n   30: import armor from './encoding/armor.js';\n   31: import config from './config';\n   32  import util from './util';\n   33  \n   34  /**\n   35   * @class\n   36:  * @classdesc Class that represents an OpenPGP key. Must contain a primary key.\n   37:  * Can contain additional subkeys, signatures, user ids, user attributes.\n   38   * @param  {module:packet/packetlist} packetlist The packets that form this key\n   39   */\n   ..\n   93              if (!user) {\n   94                util.print_debug('Dropping certification signatures without preceding user packet');\n   95:               continue;\n   96              }\n   97              if (packetlist[i].issuerKeyId.equals(primaryKeyId)) {\n   ..\n  129              if (!subKey) {\n  130                util.print_debug('Dropping subkey binding signature without preceding subkey packet');\n  131:               continue;\n  132              }\n  133              subKey.bindingSignature = packetlist[i];\n  ...\n  139              if (!subKey) {\n  140                util.print_debug('Dropping subkey revocation signature without preceding subkey packet');\n  141:               continue;\n  142              }\n  143              subKey.revocationSignature = packetlist[i];\n  ...\n  157    packetlist.push(this.primaryKey);\n  158    packetlist.push(this.revocationSignature);\n  159:   packetlist.concat(this.directSignatures);\n  160    var i;\n  161    for (i = 0; i < this.users.length; i++) {\n  162:     packetlist.concat(this.users[i].toPacketlist());\n  163    }\n  164    if (this.subKeys) {\n  165      for (i = 0; i < this.subKeys.length; i++) {\n  166:       packetlist.concat(this.subKeys[i].toPacketlist());\n  167      }\n  168    }\n  ...\n  189   */\n  190  Key.prototype.getAllKeyPackets = function() {\n  191:   return [this.primaryKey].concat(this.getSubkeyPackets());\n  192  };\n  193  \n  ...\n  255  \n  256  /**\n  257:  * Returns key as public key (shallow copy)\n  258   * @return {module:key~Key} new public Key\n  259   */\n  ...\n  289  Key.prototype.armor = function() {\n  290    var type = this.isPublic() ? enums.armor.public_key : enums.armor.private_key;\n  291:   return armor.encode(type, this.toPacketlist().write());\n  292  };\n  293  \n  ...\n  324      return primaryUser.selfCertificate.preferredHashAlgorithms[0];\n  325    }\n  326:   return config.prefer_hash_algorithm;\n  327  };\n  328  \n  ...\n  331           keyPacket.algorithm !== enums.read(enums.publicKey, enums.publicKey.rsa_sign) &&\n  332           (!signature.keyFlags ||\n  333:           (signature.keyFlags[0] & enums.keyFlags.encrypt_communication) !== 0 ||\n  334            (signature.keyFlags[0] & enums.keyFlags.encrypt_storage) !== 0);\n  335  }\n  ...\n  348   */\n  349  Key.prototype.getEncryptionKeyPacket = function() {\n  350:   // V4: by convention subkeys are prefered for encryption service\n  351    // V3: keys MUST NOT have subkeys\n  352    if (this.subKeys) {\n  ...\n  493    for (var i = 0; i < this.users.length; i++) {\n  494      if (!this.users[i].userId || !this.users[i].selfCertifications) {\n  495:       continue;\n  496      }\n  497      for (var j = 0; j < this.users[i].selfCertifications.length; j++) {\n  ...\n  523  \n  524  /**\n  525:  * Update key with new components from specified key with same key ID:\n  526   * users, subkeys, certificates are merged into the destination key,\n  527   * duplicates are ignored.\n  ...\n  645    var packetlist = new packet.List();\n  646    packetlist.push(this.userId || this.userAttribute);\n  647:   packetlist.concat(this.revocationCertifications);\n  648:   packetlist.concat(this.selfCertifications);\n  649:   packetlist.concat(this.otherCertifications);\n  650    return packetlist;\n  651  };\n  ...\n  726      if (this.isRevoked(this.selfCertifications[i], primaryKey)) {\n  727        status = enums.keyStatus.revoked;\n  728:       continue;\n  729      }\n  730      if (!(this.selfCertifications[i].verified ||\n  731          this.selfCertifications[i].verify(primaryKey, {userid: this.userId || this.userAttribute, key: primaryKey}))) {\n  732        status = enums.keyStatus.invalid;\n  733:       continue;\n  734      }\n  735      if (this.selfCertifications[i].isExpired()) {\n  736        status = enums.keyStatus.expired;\n  737:       continue;\n  738      }\n  739      status = enums.keyStatus.valid;\n  ...\n  744  \n  745  /**\n  746:  * Update user with new components from specified user\n  747   * @param  {module:key~User} user source user to merge\n  748   * @param  {module:packet/signature} primaryKey primary key used for validation\n  ...\n  852  \n  853  /**\n  854:  * Update subkey with new components from specified subkey\n  855   * @param  {module:key~SubKey} subKey source subkey to merge\n  856   * @param  {module:packet/signature} primaryKey primary key used for validation\n  ...\n  892    result.keys = [];\n  893    try {\n  894:     var input = armor.decode(armoredText);\n  895      if (!(input.type === enums.armor.public_key || input.type === enums.armor.private_key)) {\n  896        throw new Error('Armored text not of type key');\n  ...\n  925   *                             RSA is 1. See {@link http://tools.ietf.org/html/rfc4880#section-9.1}\n  926   * @param {Integer} options.numBits    number of bits for the key creation.\n  927:  * @param {String|Array<String>}  options.userIds    assumes already in form of \"User Name <username@email.com>\"\n  928                                                       If array is used, the first userId is set as primary user Id\n  929   * @param {String}  options.passphrase The passphrase used to encrypt the resulting private key\n  ...\n  987        signaturePacket.signatureType = enums.signature.cert_generic;\n  988        signaturePacket.publicKeyAlgorithm = options.keyType;\n  989:       signaturePacket.hashAlgorithm = config.prefer_hash_algorithm;\n  990        signaturePacket.keyFlags = [enums.keyFlags.certify_keys | enums.keyFlags.sign_data];\n  991        signaturePacket.preferredSymmetricAlgorithms = [];\n  ...\n  999        signaturePacket.preferredHashAlgorithms.push(enums.hash.sha1);\n 1000        signaturePacket.preferredHashAlgorithms.push(enums.hash.sha512);\n 1001:       signaturePacket.preferredCompressionAlgorithms = [];\n 1002:       signaturePacket.preferredCompressionAlgorithms.push(enums.compression.zlib);\n 1003:       signaturePacket.preferredCompressionAlgorithms.push(enums.compression.zip);\n 1004  \n 1005       \n ....\n 1011          signaturePacket.isPrimaryUserID = true;\n 1012        }\n 1013:       if (config.integrity_protect) {\n 1014          signaturePacket.features = [];\n 1015          signaturePacket.features.push(1); // Modification Detection\n ....\n 1028      subkeySignaturePacket.signatureType = enums.signature.subkey_binding;\n 1029      subkeySignaturePacket.publicKeyAlgorithm = options.keyType;\n 1030:     subkeySignaturePacket.hashAlgorithm = config.prefer_hash_algorithm;\n 1031:     subkeySignaturePacket.keyFlags = [enums.keyFlags.encrypt_communication | enums.keyFlags.encrypt_storage];\n 1032      \n 1033      if(options.expiration){\n ....\n 1059      var primaryUser = key.getPrimaryUser();\n 1060      if (!primaryUser || !primaryUser.selfCertificate.preferredSymmetricAlgorithms) {\n 1061:       return config.encryption_cipher;\n 1062      }\n 1063      primaryUser.selfCertificate.preferredSymmetricAlgorithms.forEach(function(algo, index) {\n 1064:       var entry = prioMap[algo] || (prioMap[algo] = {prio: 0, count: 0, algo: algo});\n 1065        entry.prio += 64 >> index;\n 1066:       entry.count++;\n 1067      });\n 1068    });\n 1069:   var prefAlgo = {prio: 0, algo: config.encryption_cipher};\n 1070    for (var algo in prioMap) {\n 1071      try {\n ....\n 1073            algo !== enums.symmetric.idea && // not implemented\n 1074            enums.read(enums.symmetric, algo) && // known algorithm\n 1075:           prioMap[algo].count === keys.length && // available for all keys\n 1076            prioMap[algo].prio > prefAlgo.prio) {\n 1077          prefAlgo = prioMap[algo];\n ....\n 1086  //////////////////////////\n 1087  //                      //\n 1088: //   CO revoke          //\n 1089  //                      //\n 1090  //////////////////////////\n ....\n 1096    signaturePacket.signatureType = enums.signature.key_revocation;\n 1097    signaturePacket.publicKeyAlgorithm =enums.publicKey.rsa_encrypt_sign;\n 1098:   signaturePacket.hashAlgorithm = config.prefer_hash_algorithm;\n 1099    signaturePacket.verified= true;\n 1100  \n\n/Users/steph/Documents/projects/openpgpjs/src/keyring/keyring.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   32   * Initialization routine for the keyring. This method reads the\n   33   * keyring from HTML5 local storage and initializes this instance.\n   34:  * @constructor\n   35   * @param {class} [storeHandler] class implementing load() and store() methods\n   36   */\n   ..\n   66  Keyring.prototype.getKeysForId = function (keyId, deep) {\n   67    var result = [];\n   68:   result = result.concat(this.publicKeys.getForId(keyId, deep) || []);\n   69:   result = result.concat(this.privateKeys.getForId(keyId, deep) || []);\n   70    return result.length ? result : null;\n   71  };\n   ..\n   79  Keyring.prototype.removeKeysForId = function (keyId) {\n   80    var result = [];\n   81:   result = result.concat(this.publicKeys.removeForId(keyId) || []);\n   82:   result = result.concat(this.privateKeys.removeForId(keyId) || []);\n   83    return result.length ? result : null;\n   84  };\n   ..\n   89   */\n   90  Keyring.prototype.getAllKeys = function () {\n   91:   return this.publicKeys.keys.concat(this.privateKeys.keys);\n   92  };\n   93  \n\n/Users/steph/Documents/projects/openpgpjs/src/keyring/localstore.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   18  /**\n   19   * The class that deals with storage of the keyring. Currently the only option is to use HTML5 local storage.\n   20:  * @requires config\n   21   * @module keyring/localstore\n   22   * @param {String} prefix prefix for itemnames in localstore\n   ..\n   25  'use strict';\n   26  \n   27: import config from '../config';\n   28  import * as keyModule from '../key.js';\n   29  import util from '../util.js';\n   ..\n   36      this.storage = window.localStorage;\n   37    } else {\n   38:     this.storage = new (require('node-localstorage').LocalStorage)(config.node_store);\n   39    }\n   40  }\n\n/Users/steph/Documents/projects/openpgpjs/src/lib/rusha.js:\n    2   * Rusha, a JavaScript implementation of the Secure Hash Algorithm, SHA-1,\n    3   * as defined in FIPS PUB 180-1, tuned for high performance with large inputs.\n    4:  * (http://github.com/srijs/rusha)\n    5   *\n    6   * Inspired by Paul Johnstons implementation (http://pajhome.org.uk/crypt/md5).\n    7   *\n    8:  * Copyright (c) 2013 Sam Rijs (http://awesam.de).\n    9   * Released under the terms of the MIT license as follows:\n   10   *\n   11   * Permission is hereby granted, free of charge, to any person obtaining a\n   12:  * copy of this software and associated documentation files (the \"Software\"),\n   13   * to deal in the Software without restriction, including without limitation\n   14:  * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n   15:  * and/or sell copies of the Software, and to permit persons to whom the\n   16:  * Software is furnished to do so, subject to the following conditions:\n   17   *\n   18:  * The above copyright notice and this permission notice shall be included in\n   19:  * all copies or substantial portions of the Software.\n   20   *\n   21   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   22   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   23   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   24:  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   25:  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n   26:  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n   27   * IN THE SOFTWARE.\n   28   */\n   ..\n   51              }\n   52          };\n   53:     // The Rusha object is a wrapper around the low-level RushaCore.\n   54:     // It provides means of converting different inputs to the\n   55:     // format accepted by RushaCore as well as other utility methods.\n   56      function Rusha(chunkSize) {\n   57          'use strict';\n   ..\n   73              bin[((chunkLen >> 2) + 2 & ~15) + 15] = msgLen << 3;\n   74          };\n   75:         // Convert a binary string and write it to the heap.\n   76:         // A binary string is expected to only contain char codes < 256.\n   77:         var convStr = function (H8, H32, start, len, off) {\n   78              var str = this, i, om = off % 4, lm = len % 4, j = len - lm;\n   79              if (j > 0) {\n   80                  switch (om) {\n   81                  case 0:\n   82:                     H8[off + 3 | 0] = str.charCodeAt(start);\n   83                  case 1:\n   84:                     H8[off + 2 | 0] = str.charCodeAt(start + 1);\n   85                  case 2:\n   86:                     H8[off + 1 | 0] = str.charCodeAt(start + 2);\n   87                  case 3:\n   88:                     H8[off | 0] = str.charCodeAt(start + 3);\n   89                  }\n   90              }\n   91              for (i = om; i < j; i = i + 4 | 0) {\n   92:                 H32[off + i >> 2] = str.charCodeAt(start + i) << 24 | str.charCodeAt(start + i + 1) << 16 | str.charCodeAt(start + i + 2) << 8 | str.charCodeAt(start + i + 3);\n   93              }\n   94              switch (lm) {\n   95              case 3:\n   96:                 H8[off + j + 1 | 0] = str.charCodeAt(start + j + 2);\n   97              case 2:\n   98:                 H8[off + j + 2 | 0] = str.charCodeAt(start + j + 1);\n   99              case 1:\n  100:                 H8[off + j + 3 | 0] = str.charCodeAt(start + j);\n  101              }\n  102          };\n  103:         // Convert a buffer or array and write it to the heap.\n  104:         // The buffer or array is expected to only contain elements < 256.\n  105:         var convBuf = function (H8, H32, start, len, off) {\n  106              var buf = this, i, om = off % 4, lm = len % 4, j = len - lm;\n  107              if (j > 0) {\n  ...\n  129              }\n  130          };\n  131:         var convBlob = function (H8, H32, start, len, off) {\n  132              var blob = this, i, om = off % 4, lm = len % 4, j = len - lm;\n  133              var buf = new Uint8Array(reader.readAsArrayBuffer(blob.slice(start, start + len)));\n  ...\n  156              }\n  157          };\n  158:         var convFn = function (data) {\n  159              switch (util.getDataType(data)) {\n  160              case 'string':\n  161:                 return convStr.bind(data);\n  162              case 'array':\n  163:                 return convBuf.bind(data);\n  164              case 'buffer':\n  165:                 return convBuf.bind(data);\n  166              case 'arraybuffer':\n  167:                 return convBuf.bind(new Uint8Array(data));\n  168              case 'view':\n  169:                 return convBuf.bind(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n  170              case 'blob':\n  171:                 return convBlob.bind(data);\n  172              }\n  173          };\n  ...\n  186              }\n  187          };\n  188:         // Convert an ArrayBuffer into its hexadecimal string representation.\n  189          var hex = function (arrayBuffer) {\n  190              var i, x, hex_tab = '0123456789abcdef', res = [], binarray = new Uint8Array(arrayBuffer);\n  ...\n  229              self$2.h8 = new Int8Array(self$2.heap);\n  230  \n  231:             //UPD steph: original new  Rusha._core causes issues on older firefox \n  232  \n  233:             self$2.core = Rusha._core({\n  234                  Int32Array: Int32Array,\n  235                  DataView: DataView\n  ...\n  237              self$2.buffer = null;\n  238          };\n  239:         // Iinitializethe datastructures according\n  240          // to a chunk siyze.\n  241          init(chunkSize || 64 * 1024);\n  ...\n  257          // Write data to the heap.\n  258          var write = function (data, chunkOffset, chunkLen) {\n  259:             convFn(data)(self$2.h8, self$2.h32, chunkOffset, chunkLen, 0);\n  260          };\n  261:         // Initialize and call the RushaCore,\n  262          // assuming an input buffer of length len * 4.\n  263:         var coreCall = function (data, chunkOffset, chunkLen, msgLen, finalize) {\n  264              var padChunkLen = chunkLen;\n  265              if (finalize) {\n  ...\n  267              }\n  268              write(data, chunkOffset, chunkLen);\n  269:             self$2.core.hash(padChunkLen, self$2.padMaxChunkLen);\n  270          };\n  271          var getRawDigest = function (heap, padMaxChunkLen) {\n  ...\n  286                  var chunkOffset = 0, chunkLen = self$2.maxChunkLen, last;\n  287                  for (chunkOffset = 0; msgLen > chunkOffset + chunkLen; chunkOffset += chunkLen) {\n  288:                     coreCall(str, chunkOffset, chunkLen, msgLen, false);\n  289                  }\n  290:                 coreCall(str, chunkOffset, msgLen - chunkOffset, msgLen, true);\n  291                  return getRawDigest(self$2.heap, self$2.padMaxChunkLen);\n  292              };\n  ...\n  298      }\n  299      ;\n  300:     // The low-level RushCore module provides the heart of Rusha,\n  301      // a high-speed sha1 implementation working on an Int32Array heap.\n  302:     // At first glance, the implementation seems complicated, however\n  303      // with the SHA1 spec at hand, it is obvious this almost a textbook\n  304      // implementation that has a few functions hand-inlined and a few loops\n  305      // hand-unrolled.\n  306:     Rusha._core = function RushaCore(stdlib, foreign, heap) {\n  307          'use asm';\n  308          var H = new stdlib.Int32Array(heap);\n  ...\n  394      }\n  395      // If we're running in a webworker, accept\n  396:     // messages containing a jobid and a buffer\n  397      // or blob object, and return the hash result.\n  398      if (typeof FileReaderSync !== 'undefined') {\n\n/Users/steph/Documents/projects/openpgpjs/src/message.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * @requires config\n   20   * @requires crypto\n   21:  * @requires encoding/armor\n   22   * @requires enums\n   23   * @requires packet\n   ..\n   30  import packet from './packet';\n   31  import enums from './enums.js';\n   32: import armor from './encoding/armor.js';\n   33: import config from './config';\n   34  import crypto from './crypto';\n   35  import * as keyModule from './key.js';\n   ..\n   38   * @class\n   39   * @classdesc Class that represents an OpenPGP message.\n   40:  * Can be an encrypted message, signed message, compressed message or literal message\n   41   * @param  {module:packet/packetlist} packetlist The packets that form this message\n   42   * See {@link http://tools.ietf.org/html/rfc4880#section-11.3}\n   ..\n   69  Message.prototype.getSigningKeyIds = function() {\n   70    var keyIds = [];\n   71:   var msg = this.unwrapCompressed();\n   72    // search for one pass signatures\n   73    var onePassSigList = msg.packets.filterByTag(enums.packet.onePassSignature);\n   ..\n   90   * @param  {Object} sessionKey   (optional) session key in the form: { data:Uint8Array, algorithm:String }\n   91   * @param  {String} password     (optional) password used to decrypt\n   92:  * @return {Message}             new message with decrypted content\n   93   */\n   94  Message.prototype.decrypt = function(privateKey, sessionKey, password) {\n   ..\n  203   * @param  {Array<Key>} keys           (optional) public key(s) for message encryption\n  204   * @param  {Array<String>} passwords   (optional) password(s) for message encryption\n  205:  * @return {Message}                   new message with encrypted content\n  206   */\n  207  Message.prototype.encrypt = function(keys, passwords) {\n  ...\n  210      symAlgo = keyModule.getPreferredSymAlgo(keys);\n  211    } else if (passwords) {\n  212:     symAlgo = config.encryption_cipher;\n  213    } else {\n  214      throw new Error('No keys or passwords');\n  ...\n  220  \n  221    var symEncryptedPacket;\n  222:   if (config.integrity_protect) {\n  223      symEncryptedPacket = new packet.SymEncryptedIntegrityProtected();\n  224    } else {\n  ...\n  240   * @param  {Array<Key>} publicKeys     (optional) public key(s) for message encryption\n  241   * @param  {Array<String>} passwords   (optional) for message encryption\n  242:  * @return {Message}                   new message with encrypted content\n  243   */\n  244  export function encryptSessionKey(sessionKey, symAlgo, publicKeys, passwords) {\n  ...\n  258          packetlist.push(pkESKeyPacket);\n  259        } else {\n  260:         throw new Error('Could not find valid key packet for encryption in key ' + key.primaryKey.getKeyId().toHex());\n  261        }\n  262      });\n  ...\n  280   * Sign the message (the literal data packet of the message)\n  281   * @param  {Array<module:key~Key>} privateKey private keys with decrypted secret key data for signing\n  282:  * @return {module:message~Message}      new message with signed content\n  283   */\n  284  Message.prototype.sign = function(privateKeys) {\n  ...\n  302      onePassSig.type = signatureType;\n  303      //TODO get preferred hashg algo from key signature\n  304:     onePassSig.hashAlgorithm = config.prefer_hash_algorithm;\n  305      signingKeyPacket = privateKeys[i].getSigningKeyPacket();\n  306      if (!signingKeyPacket) {\n  307:       throw new Error('Could not find valid key packet for signing in key ' + privateKeys[i].primaryKey.getKeyId().toHex());\n  308      }\n  309      onePassSig.publicKeyAlgorithm = signingKeyPacket.algorithm;\n  ...\n  317      var signaturePacket = new packet.Signature();\n  318      signaturePacket.signatureType = signatureType;\n  319:     signaturePacket.hashAlgorithm = config.prefer_hash_algorithm;\n  320      signaturePacket.publicKeyAlgorithm = signingKeyPacket.algorithm;\n  321      if (!signingKeyPacket.isDecrypted) {\n  ...\n  336  Message.prototype.verify = function(keys) {\n  337    var result = [];\n  338:   var msg = this.unwrapCompressed();\n  339    var literalDataList = msg.packets.filterByTag(enums.packet.literal);\n  340    if (literalDataList.length !== 1) {\n  ...\n  365  \n  366  /**\n  367:  * Unwrap compressed message\n  368:  * @return {module:message~Message} message Content of compressed message\n  369   */\n  370: Message.prototype.unwrapCompressed = function() {\n  371:   var compressed = this.packets.filterByTag(enums.packet.compressed);\n  372:   if (compressed.length) {\n  373:     return new Message(compressed[0].packets);\n  374    } else {\n  375      return this;\n  ...\n  382   */\n  383  Message.prototype.armor = function() {\n  384:   return armor.encode(enums.armor.message, this.packets.write());\n  385  };\n  386  \n  ...\n  394    //TODO how do we want to handle bad text? Exception throwing\n  395    //TODO don't accept non-message armored texts\n  396:   var input = armor.decode(armoredText).data;\n  397    return read(input);\n  398  }\n  ...\n  411  \n  412  /**\n  413:  * Create a message object from signed content and a detached armored signature.\n  414:  * @param {String} content An 8 bit ascii string containing e.g. a MIME subtree with text nodes or attachments\n  415   * @param {String} detachedSignature The detached ascii armored PGP signature\n  416   */\n  417: export function readSignedContent(content, detachedSignature) {\n  418    var literalDataPacket = new packet.Literal();\n  419:   literalDataPacket.setBytes(util.str2Uint8Array(content), enums.read(enums.literal, enums.literal.binary));\n  420    var packetlist = new packet.List();\n  421    packetlist.push(literalDataPacket);\n  422:   var input = armor.decode(detachedSignature).data;\n  423    packetlist.read(input);\n  424    return new Message(packetlist);\n  ...\n  434  export function fromText(text, filename) {\n  435    var literalDataPacket = new packet.Literal();\n  436:   // text will be converted to UTF8\n  437    literalDataPacket.setText(text);\n  438    if (filename !== undefined) {\n\n/Users/steph/Documents/projects/openpgpjs/src/openpgp.js:\n    1  // OpenPGP.js - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2016 Tankred Hase\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   20   * @requires cleartext\n   21   * @requires key\n   22:  * @requires config\n   23   * @requires util\n   24   * @module openpgp\n   ..\n   27  /**\n   28   * @fileoverview The openpgp base module should provide all of the functionality\n   29:  * to consume the openpgp.js library. All additional classes are documented\n   30   * for extending and developing on top of the base library.\n   31   */\n   ..\n   36  import * as cleartext from './cleartext.js';\n   37  import * as key from './key.js';\n   38: import config from './config/config.js';\n   39  import util from './util';\n   40  import AsyncProxy from './worker/async_proxy.js';\n   ..\n   59  export function initWorker({ path='openpgp.worker.js', worker } = {}) {\n   60    if (worker || typeof window !== 'undefined' && window.Worker) {\n   61:     asyncProxy = new AsyncProxy({ path, worker, config });\n   62      return true;\n   63    }\n   ..\n   98   */\n   99  export function generateKey({ userIds=[], passphrase, numBits=2048, unlocked=false, expiration=0 } = {}) {\n  100:   const options = formatUserIds({ userIds, passphrase, numBits, unlocked,expiration });\n  101  \n  102    if (!util.getWebCrypto() && asyncProxy) { // use web worker if web crypto apis are not supported\n  ...\n  111  \n  112    })).catch(err => {\n  113:     console.error(err);\n  114      // js fallback already tried\n  115:     if (config.debug) { console.error(err); }\n  116      if (!util.getWebCrypto()) {\n  117        throw new Error('Error generating keypair using js fallback');\n  118      }\n  119      // fall back to js keygen in a worker\n  120:     if (config.debug) { console.log('Error generating keypair using native WebCrypto... falling back back to js'); }\n  121      return asyncProxy.delegate('generateKey', options);\n  122  \n  ...\n  217  \n  218      message = message.decrypt(privateKey, sessionKey, password);\n  219:     const result = parseMessage(message, format);\n  220      if (publicKeys && result.data) { // verify only if publicKeys are specified\n  221        result.signatures = message.verify(publicKeys);\n  ...\n  252    return execute(() => {\n  253  \n  254:     const cleartextMessage = new cleartext.CleartextMessage(data);\n  255      cleartextMessage.sign(privateKeys);\n  256  \n  ...\n  306   * @param  {Key|Array<Key>} publicKeys        (optional) array of public keys or single key, used to encrypt the key\n  307   * @param  {String|Array<String>} passwords   (optional) passwords for the message\n  308:  * @return {Promise<Message>}                 the encrypted session key packets contained in a message object\n  309   * @static\n  310   */\n  ...\n  326   * Decrypt a symmetric session key with a private key or password. Either a private key or\n  327   *   a password must be specified.\n  328:  * @param  {Message} message              a message object containing the encrypted session key packets\n  329   * @param  {Key} privateKey               (optional) private key with decrypted secret key data\n  330   * @param  {String} password              (optional) a single password to decrypt the session key\n  ...\n  347  //////////////////////////\n  348  //                      //\n  349: //   CO revoke          //\n  350  //                      //\n  351  //////////////////////////\n  ...\n  363  //////////////////////////\n  364  //                      //\n  365: //   CO  passphrase    //\n  366  //                      //\n  367  //////////////////////////\n  ...\n  438      }\n  439      if (util.isUserId(id)) {\n  440:       return id; // user id is already in correct format... no conversion necessary\n  441      }\n  442:     // name and email address can be empty but must be of the correct type\n  443      id.name = id.name || '';\n  444      id.email = id.email || '';\n  ...\n  504  \n  505  /**\n  506:  * Command pattern that wraps synchronous code into a promise.\n  507   * @param  {function} cmd     The synchronous function with a return value\n  508   *                              to be wrapped in a promise\n  ...\n  512  function execute(cmd, message) {\n  513    // wrap the sync cmd in a promise\n  514:   const promise = new Promise(resolve => resolve(cmd()));\n  515    // handler error globally\n  516    return promise.catch(onError.bind(null, message));\n  ...\n  524  function onError(message, error) {\n  525    // log the stack trace\n  526:   if (config.debug) { console.error(error.stack); }\n  527    // rethrow new high level error for api users\n  528    throw new Error(message + ': ' + error.message);\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/all_packets.js:\n    9  import * as packets from './all_packets.js'; // re-import module to parse packets from tag\n   10  \n   11: /** @see module:packet/compressed */\n   12: export { default as Compressed } from './compressed.js';\n   13  /** @see module:packet/sym_encrypted_integrity_protected */\n   14  export { default as SymEncryptedIntegrityProtected } from './sym_encrypted_integrity_protected.js';\n   ..\n   72  \n   73  /**\n   74:  * Convert tag name to class name\n   75   * @param {String} tag property name from {@link module:enums.packet}\n   76   * @returns {String}\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/clone.js:\n    1  // OpenPGP.js - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2015 Tankred Hase\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   39  \n   40  /**\n   41:  * Create a packetlist from the correspoding object types.\n   42   * @param  {Object} options   the object passed to and from the web worker\n   43   * @return {Object}           a mutated version of the options optject\n   ..\n   68  \n   69  /**\n   70:  * Creates an object with the correct prototype from a corresponding packetlist.\n   71   * @param  {Object} options   the object passed to and from the web worker\n   72   * @param  {String} method    the public api function name to be delegated to the worker\n   ..\n   98  \n   99  function packetlistCloneToKey(clone) {\n  100:   const packetlist = Packetlist.fromStructuredClone(clone);\n  101    return new key.Key(packetlist);\n  102  }\n  103  \n  104  function packetlistCloneToMessage(clone) {\n  105:   const packetlist = Packetlist.fromStructuredClone(clone.packets);\n  106    return new message.Message(packetlist);\n  107  }\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/compressed.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * Implementation of the Compressed Data Packet (Tag 8)<br/>\n   20   * <br/>\n   21:  * {@link http://tools.ietf.org/html/rfc4880#section-5.6|RFC4880 5.6}: The Compressed Data packet contains compressed data.  Typically,\n   22:  * this packet is found as the contents of an encrypted packet, or following\n   23:  * a Signature or One-Pass Signature packet, and contains a literal data packet.\n   24:  * @requires compression/zlib\n   25:  * @requires compression/rawinflate\n   26:  * @requires compression/rawdeflate\n   27   * @requires enums\n   28   * @requires util\n   29:  * @module packet/compressed\n   30   */\n   31  \n   ..\n   34  import enums from '../enums.js';\n   35  import util from '../util.js';\n   36: import Zlib from '../compression/zlib.min.js';\n   37: import RawInflate from '../compression/rawinflate.min.js';\n   38: import RawDeflate from '../compression/rawdeflate.min.js';\n   39  \n   40  /**\n   41:  * @constructor\n   42   */\n   43: export default function Compressed() {\n   44    /**\n   45     * Packet type\n   46     * @type {module:enums.packet}\n   47     */\n   48:   this.tag = enums.packet.compressed;\n   49    /**\n   50     * List of packets\n   ..\n   53    this.packets = null;\n   54    /**\n   55:    * Compression algorithm\n   56:    * @type {compression}\n   57     */\n   58    this.algorithm = 'zip';\n   59  \n   60    /**\n   61:    * Compressed packet data\n   62     * @type {String}\n   63     */\n   64:   this.compressed = null;\n   65  }\n   66  \n   ..\n   69   * @param {String} bytes Payload of a tag 8 packet\n   70   */\n   71: Compressed.prototype.read = function (bytes) {\n   72:   // One octet that gives the algorithm used to compress the packet.\n   73:   this.algorithm = enums.read(enums.compression, bytes[0]);\n   74  \n   75:   // Compressed data, which makes up the remainder of the packet.\n   76:   this.compressed = bytes.subarray(1, bytes.length);\n   77  \n   78:   this.decompress();\n   79  };\n   80  \n   ..\n   82  \n   83  /**\n   84:  * Return the compressed packet.\n   85:  * @return {String} binary compressed packet\n   86   */\n   87: Compressed.prototype.write = function () {\n   88:   if (this.compressed === null) {\n   89:     this.compress();\n   90    }\n   91  \n   92:   return util.concatUint8Array(new Uint8Array([enums.write(enums.compression, this.algorithm)]), this.compressed);\n   93  };\n   94  \n   95  \n   96  /**\n   97:  * Decompression method for decompressing the compressed data\n   98   * read by read_packet\n   99   */\n  100: Compressed.prototype.decompress = function () {\n  101:   var decompressed, inflate;\n  102  \n  103    switch (this.algorithm) {\n  104:     case 'uncompressed':\n  105:       decompressed = this.compressed;\n  106        break;\n  107  \n  108      case 'zip':\n  109:       inflate = new RawInflate.Zlib.RawInflate(this.compressed);\n  110:       decompressed = inflate.decompress();\n  111        break;\n  112  \n  113      case 'zlib':\n  114:       inflate = new Zlib.Zlib.Inflate(this.compressed);\n  115:       decompressed = inflate.decompress();\n  116        break;\n  117  \n  118      case 'bzip2':\n  119        // TODO: need to implement this\n  120:       throw new Error('Compression algorithm BZip2 [BZ2] is not implemented.');\n  121  \n  122      default:\n  123:       throw new Error(\"Compression algorithm unknown :\" + this.alogrithm);\n  124    }\n  125  \n  126:   this.packets.read(decompressed);\n  127  };\n  128  \n  129  /**\n  130:  * Compress the packet data (member decompressedData)\n  131   */\n  132: Compressed.prototype.compress = function () {\n  133:   var uncompressed, deflate;\n  134:   uncompressed = this.packets.write();\n  135  \n  136    switch (this.algorithm) {\n  137  \n  138:     case 'uncompressed':\n  139:       // - Uncompressed\n  140:       this.compressed = uncompressed;\n  141        break;\n  142  \n  143      case 'zip':\n  144        // - ZIP [RFC1951]\n  145:       deflate = new RawDeflate.Zlib.RawDeflate(uncompressed);\n  146:       this.compressed = deflate.compress();\n  147        break;\n  148  \n  149      case 'zlib':\n  150        // - ZLIB [RFC1950]\n  151:       deflate = new Zlib.Zlib.Deflate(uncompressed);\n  152:       this.compressed = deflate.compress();\n  153        break;\n  154  \n  ...\n  156        //  - BZip2 [BZ2]\n  157        // TODO: need to implement this\n  158:       throw new Error(\"Compression algorithm BZip2 [BZ2] is not implemented.\");\n  159  \n  160      default:\n  161:       throw new Error(\"Compression algorithm unknown :\" + this.type);\n  162    }\n  163  };\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/index.js:\n    5  import List from './packetlist.js';\n    6  \n    7: const mod = {\n    8    /** @see module:packet/packetlist */\n    9    List: List,\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/literal.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   19   * Implementation of the Literal Data Packet (Tag 11)<br/>\n   20   * <br/>\n   21:  * {@link http://tools.ietf.org/html/rfc4880#section-5.9|RFC4880 5.9}: A Literal Data packet contains the body of a message; data that\n   22   * is not to be further interpreted.\n   23   * @requires enums\n   ..\n   32  \n   33  /**\n   34:  * @constructor\n   35   */\n   36  export default function Literal() {\n   ..\n   44  /**\n   45   * Set the packet data to a javascript native string, end of line\n   46:  * will be normalized to \\r\\n and by default text is converted to UTF8\n   47   * @param {String} text Any native javascript string\n   48   */\n   49  Literal.prototype.setText = function(text) {\n   50    // normalize EOL to \\r\\n\n   51:   //MOD co\n   52   text = text.replace(/\\r/g, '').replace(/\\n/g, '\\r\\n');\n   53  \n   54:   // encode UTF8\n   55:  this.data = this.format === 'utf8' ? util.str2Uint8Array(util.encode_utf8(text)) : util.str2Uint8Array(text);\n   56  };\n   57  \n   ..\n   62   */\n   63  Literal.prototype.getText = function() {\n   64:   // decode UTF8\n   65:   var text = util.decode_utf8(util.Uint8Array2str(this.data));\n   66    return text.replace(/\\r\\n/g, '\\n');\n   67  };\n   ..\n  116  \n  117    var filename_len = bytes[1];\n  118:   this.filename = util.decode_utf8(util.Uint8Array2str(bytes.subarray(2, 2 + filename_len)));\n  119  \n  120    this.date = util.readDate(bytes.subarray(2 + filename_len, 2 + filename_len + 4));\n  ...\n  131   */\n  132  Literal.prototype.write = function() {\n  133:   var filename = util.str2Uint8Array(util.encode_utf8(this.filename));\n  134    var filename_length = new Uint8Array([filename.length]);\n  135  \n  ...\n  138    var data = this.getBytes();\n  139  \n  140:   return util.concatUint8Array([format, filename_length, filename, date, data]);\n  141  };\n  142  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/marker.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   35  \n   36  /**\n   37:  * @constructor\n   38   */\n   39  export default function Marker() {\n   ..\n   58      return true;\n   59    }\n   60:   // marker packet does not contain \"PGP\"\n   61    return false;\n   62  };\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/one_pass_signature.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   19   * Implementation of the One-Pass Signature Packets (Tag 4)<br/>\n   20   * <br/>\n   21:  * {@link http://tools.ietf.org/html/rfc4880#section-5.4|RFC4880 5.4}: The One-Pass Signature packet precedes the signed data and contains\n   22   * enough information to allow the receiver to begin calculating any\n   23   * hashes needed to verify the signature.  It allows the Signature\n   24   * packet to be placed at the end of the message, so that the signer\n   25:  * can compute the entire signed message in one pass.\n   26  * @requires util\n   27   * @requires enums\n   ..\n   37  \n   38  /**\n   39:  * @constructor\n   40   */\n   41  export default function OnePassSignature() {\n   ..\n   94    var end = new Uint8Array([this.flags]);\n   95  \n   96:   return util.concatUint8Array([start, this.signingKeyId.write(), end]);\n   97  };\n   98  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/packet.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   51  \n   52    /**\n   53:    * Encodes a given integer of length to the openpgp length specifier to a\n   54     * string\n   55     *\n   56:    * @param {Integer} length The length to encode\n   57     * @return {Uint8Array} String with openpgp length representation\n   58     */\n   ..\n   68        return new Uint8Array([((length - 192) >> 8) + 192, (length - 192) & 0xFF]);\n   69      } else {\n   70:       return util.concatUint8Array([new Uint8Array([255]), util.writeNumber(length, 4)]);\n   71      }\n   72    },\n   ..\n   82    writeHeader: function(tag_type, length) {\n   83      /* we're only generating v4 packet headers here */\n   84:     return util.concatUint8Array([new Uint8Array([0xC0 | tag_type]), this.writeSimpleLength(length)]);\n   85    },\n   86  \n   ..\n   98        return new Uint8Array([0x80 | (tag_type << 2), length]);\n   99      } else if (length < 65536) {\n  100:       return util.concatUint8Array([0x80 | (tag_type << 2) | 1, util.writeNumber(length, 2)]);\n  101      } else {\n  102:       return util.concatUint8Array([0x80 | (tag_type << 2) | 2, util.writeNumber(length, 4)]);\n  103      }\n  104    },\n  ...\n  116      if (input === null || input.length <= position || input.subarray(position, input.length).length < 2 || (input[position] &\n  117        0x80) === 0) {\n  118:       throw new Error(\"Error during parsing. This message / key probably does not conform to a valid OpenPGP format.\");\n  119      }\n  120      var mypos = position;\n  ...\n  172            // an implementation SHOULD NOT use indeterminate-length\n  173            // packets except where the end of the data will be clear\n  174:           // from the context, and even then it is better to use a\n  175            // definite length, or a new format header. The new format\n  176            // headers described below have a mechanism for precisely\n  177:           // encoding data of indeterminate length.\n  178            packet_length = len;\n  179            break;\n  ...\n  245      }\n  246      else if(bodydata instanceof Array) {\n  247:       bodydata = util.concatUint8Array(bodydata);\n  248      }\n  249  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/packetlist.js:\n   18  \n   19  /**\n   20:  * @constructor\n   21   */\n   22  export default function Packetlist() {\n   23:   /** The number of packets contained within the list.\n   24     * @readonly\n   25     * @type {Integer} */\n   ..\n   47  \n   48  /**\n   49:  * Creates a binary representation of openpgp objects contained within the\n   50   * class instance.\n   51:  * @returns {Uint8Array} A Uint8Array containing valid openpgp packets.\n   52   */\n   53  Packetlist.prototype.write = function () {\n   ..\n   60    }\n   61  \n   62:   return util.concatUint8Array(arr);\n   63  };\n   64  \n   ..\n  176  \n  177  /**\n  178:  * Concatenates packetlist or array of packets\n  179   */\n  180: Packetlist.prototype.concat = function (packetlist) {\n  181    if (packetlist) {\n  182      for (var i = 0; i < packetlist.length; i++) {\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/public_key.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   20   * <br/>\n   21   * {@link http://tools.ietf.org/html/rfc4880#section-5.5|RFC4480 5.5}:\n   22:  * A key material packet contains all the information about a public or\n   23   * private key.  There are four variants of this packet type, and two\n   24:  * major versions.  Consequently, this section is complex.\n   25   * @requires crypto\n   26   * @requires enums\n   ..\n   40  \n   41  /**\n   42:  * @constructor\n   43   */\n   44  export default function PublicKey() {\n   ..\n   94      this.algorithm = enums.read(enums.publicKey, bytes[pos++]);\n   95  \n   96:     var mpicount = crypto.getPublicMpiCount(this.algorithm);\n   97      this.mpi = [];\n   98  \n   ..\n  100      var p = 0;\n  101  \n  102:     for (var i = 0; i < mpicount && p < bmpi.length; i++) {\n  103  \n  104        this.mpi[i] = new type_mpi();\n  ...\n  126   * Same as write_private_key, but has less information because of\n  127   * public key.\n  128:  * @return {Uint8Array} OpenPGP packet body contents,\n  129   */\n  130  PublicKey.prototype.write = function () {\n  ...\n  139    arr.push(new Uint8Array([enums.write(enums.publicKey, this.algorithm)]));\n  140  \n  141:   var mpicount = crypto.getPublicMpiCount(this.algorithm);\n  142  \n  143:   for (var i = 0; i < mpicount; i++) {\n  144      arr.push(this.mpi[i].write());\n  145    }\n  146  \n  147:   return util.concatUint8Array(arr);\n  148  };\n  149  \n  ...\n  160    var bytes = this.writePublicKey();\n  161  \n  162:   return util.concatUint8Array([new Uint8Array([0x99]), util.writeNumber(bytes.length, 2), bytes]);\n  163  };\n  164  \n  ...\n  183  /**\n  184   * Calculates the fingerprint of the key\n  185:  * @return {String} A string containing the fingerprint in lowercase hex\n  186   */\n  187  PublicKey.prototype.getFingerprint = function () {\n  ...\n  194      this.fingerprint = util.Uint8Array2str(crypto.hash.sha1(toHash));\n  195    } else if (this.version === 3) {\n  196:     var mpicount = crypto.getPublicMpiCount(this.algorithm);\n  197:     for (var i = 0; i < mpicount; i++) {\n  198        toHash += this.mpi[i].toBytes();\n  199      }\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/public_key_encrypted_session_key.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   47  \n   48  /**\n   49:  * @constructor\n   50   */\n   51  export default function PublicKeyEncryptedSessionKey() {\n   ..\n   80    var i = 10;\n   81  \n   82:   var integerCount = (function(algo) {\n   83      switch (algo) {\n   84        case 'rsa_encrypt':\n   ..\n   96    this.encrypted = [];\n   97  \n   98:   for (var j = 0; j < integerCount; j++) {\n   99      var mpi = new type_mpi();\n  100      i += mpi.read(bytes.subarray(i, bytes.length));\n  ...\n  116    }\n  117  \n  118:   return util.concatUint8Array(arr);\n  119  };\n  120  \n  121  PublicKeyEncryptedSessionKey.prototype.encrypt = function (key) {\n  122:   var data = String.fromCharCode(\n  123      enums.write(enums.symmetric, this.sessionKeyAlgorithm));\n  124  \n  ...\n  128  \n  129    var mpi = new type_mpi();\n  130:   mpi.fromBytes(crypto.pkcs1.eme.encode(\n  131      data,\n  132      key.mpi[0].byteLength()));\n  ...\n  154    var checksum = util.readNumber(util.str2Uint8Array(result.substr(result.length - 2)));\n  155  \n  156:   var decoded = crypto.pkcs1.eme.decode(result);\n  157  \n  158:   key = util.str2Uint8Array(decoded.substring(1, decoded.length - 2));\n  159  \n  160    if (checksum !== util.calc_checksum(key)) {\n  ...\n  163      this.sessionKey = key;\n  164      this.sessionKeyAlgorithm =\n  165:       enums.read(enums.symmetric, decoded.charCodeAt(0));\n  166    }\n  167  };\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/public_subkey.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   28  \n   29  /**\n   30:  * @constructor\n   31   * @extends module:packet/public_key\n   32   */\n   ..\n   37  \n   38  PublicSubkey.prototype = new publicKey();\n   39: PublicSubkey.prototype.constructor = PublicSubkey;\n   40  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/secret_key.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   20   * <br/>\n   21   * {@link http://tools.ietf.org/html/rfc4880#section-5.5|RFC4480 5.5}:\n   22:  * A key material packet contains all the information about a public or\n   23   * private key.  There are four variants of this packet type, and two\n   24:  * major versions.  Consequently, this section is complex.\n   25   * @requires crypto\n   26   * @requires enums\n   ..\n   42  \n   43  /**\n   44:  * @constructor\n   45   * @extends module:packet/public_key\n   46   */\n   ..\n   55  \n   56  SecretKey.prototype = new publicKey();\n   57: SecretKey.prototype.constructor = SecretKey;\n   58  \n   59  function get_hash_len(hash) {\n   ..\n   90    }\n   91  \n   92:   var mpis = crypto.getPrivateMpiCount(algorithm);\n   93  \n   94    var j = 0;\n   ..\n  105  function write_cleartext_mpi(hash_algorithm, algorithm, mpi) {\n  106    var arr = [];\n  107:   var discard = crypto.getPublicMpiCount(algorithm);\n  108  \n  109    for (var i = discard; i < mpi.length; i++) {\n  ...\n  111    }\n  112  \n  113:   var bytes = util.concatUint8Array(arr);\n  114  \n  115    var hash = get_hash_fn(hash_algorithm)(bytes);\n  116  \n  117:   return util.concatUint8Array([bytes, hash]);\n  118  }\n  119  \n  ...\n  132  \n  133  \n  134:   // - One octet indicating string-to-key usage conventions.  Zero\n  135    //   indicates that the secret-key data is not encrypted.  255 or 254\n  136    //   indicates that a string-to-key specifier is being given.  Any\n  ...\n  141      this.encrypted = bytes;\n  142    } else {\n  143:     // - Plain or encrypted multiprecision integers comprising the secret\n  144      //   key data.  These algorithm-specific fields are as described\n  145      //   below.\n  ...\n  148        throw parsedMPI;\n  149      }\n  150:     this.mpi = this.mpi.concat(parsedMPI);\n  151      this.isDecrypted = true;\n  152    }\n  ...\n  155  \n  156  /** Creates an OpenPGP key packet for the given key.\n  157:   * @return {String} A string of bytes containing the secret key OpenPGP packet\n  158    */\n  159  SecretKey.prototype.write = function () {\n  ...\n  167    }\n  168  \n  169:   return util.concatUint8Array(arr);\n  170  };\n  171  \n  ...\n  199    arr.push(crypto.cfb.normalEncrypt(symmetric, key, cleartext, iv));\n  200  \n  201:   this.encrypted = util.concatUint8Array(arr);\n  202  };\n  203  \n  ...\n  214   * @param {String} str_passphrase The passphrase for this private key\n  215   * as string\n  216:  * @return {Boolean} True if the passphrase was correct or MPI already\n  217   *                   decrypted; false if not\n  218   */\n  ...\n  268      return false;\n  269    }\n  270:   this.mpi = this.mpi.concat(parsedMPI);\n  271    this.isDecrypted = true;\n  272    return true;\n  ...\n  289      throw new Error('If secret key is not encrypted, clearing private MPIs is irreversible.');\n  290    }\n  291:   this.mpi = this.mpi.slice(0, crypto.getPublicMpiCount(this.algorithm));\n  292    this.isDecrypted = false;\n  293  };\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/secret_subkey.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   28  \n   29  /**\n   30:  * @constructor\n   31   * @extends module:packet/secret_key\n   32   */\n   ..\n   37  \n   38  SecretSubkey.prototype = new secretKey();\n   39: SecretSubkey.prototype.constructor = SecretSubkey;\n   40  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/signature.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   21   * {@link http://tools.ietf.org/html/rfc4880#section-5.2|RFC4480 5.2}:\n   22   * A Signature packet describes a binding between some public key and\n   23:  * some data.  The most common signatures are a signature of a file or a\n   24   * block of text, and a signature that is a certification of a User ID.\n   25   * @requires crypto\n   ..\n   40  \n   41  /**\n   42:  * @constructor\n   43   */\n   44  export default function Signature() {\n   ..\n   70    this.notation = null;\n   71    this.preferredHashAlgorithms = null;\n   72:   this.preferredCompressionAlgorithms = null;\n   73    this.keyServerPreferences = null;\n   74    this.preferredKeyServer = null;\n   ..\n  135  \n  136        function subpackets(bytes) {\n  137:         // Two-octet scalar octet count for following subpacket data.\n  138          var subpacket_length = util.readNumber(\n  139            bytes.subarray(0, 2));\n  ...\n  200    arr.push(this.signedHashValue);\n  201    arr.push(this.signature);\n  202:   return util.concatUint8Array(arr);\n  203  };\n  204  \n  ...\n  206   * Signs provided data. This needs to be done prior to serialization.\n  207   * @param {module:packet/secret_key} key private key used to sign the message.\n  208:  * @param {Object} data Contains packets to be signed.\n  209   */\n  210  Signature.prototype.sign = function (key, data) {\n  ...\n  220    arr.push(this.write_all_sub_packets());\n  221  \n  222:   this.signatureData = util.concatUint8Array(arr);\n  223  \n  224    var trailer = this.calculateTrailer();\n  225  \n  226:   var toHash = util.concatUint8Array([this.toSign(signatureType, data), this.signatureData, trailer]);\n  227  \n  228    var hash = crypto.hash.digest(hashAlgorithm, toHash);\n  ...\n  271  \n  272      bytes = new Uint8Array([this.revocationKeyClass, this.revocationKeyAlgorithm]);\n  273:     bytes = util.concatUint8Array([bytes, this.revocationKeyFingerprint]);\n  274      arr.push(write_sub_packet(sub.revocation_key, bytes));\n  275    }\n  ...\n  287          bytes.push(util.writeNumber(value.length, 2));\n  288          bytes.push(util.str2Uint8Array(name + value));\n  289:         bytes = util.concatUint8Array(bytes);\n  290          arr.push(write_sub_packet(sub.notation_data, bytes));\n  291        }\n  ...\n  296      arr.push(write_sub_packet(sub.preferred_hash_algorithms, bytes));\n  297    }\n  298:   if (this.preferredCompressionAlgorithms !== null) {\n  299:     bytes = util.str2Uint8Array(util.bin2str(this.preferredCompressionAlgorithms));\n  300:     arr.push(write_sub_packet(sub.preferred_compression_algorithms, bytes));\n  301    }\n  302    if (this.keyServerPreferences !== null) {\n  ...\n  321    }\n  322    if (this.reasonForRevocationFlag !== null) {\n  323:     bytes = util.str2Uint8Array(String.fromCharCode(this.reasonForRevocationFlag) + this.reasonForRevocationString);\n  324      arr.push(write_sub_packet(sub.reason_for_revocation, bytes));\n  325    }\n  ...\n  331      bytes = [new Uint8Array([this.signatureTargetPublicKeyAlgorithm, this.signatureTargetHashAlgorithm])];\n  332      bytes.push(util.str2Uint8Array(this.signatureTargetHash));\n  333:     bytes = util.concatUint8Array(bytes);\n  334      arr.push(write_sub_packet(sub.signature_target, bytes));\n  335    }\n  ...\n  338    }\n  339  \n  340:   var result = util.concatUint8Array(arr);\n  341    var length = util.writeNumber(result.length, 2);\n  342  \n  343:   return util.concatUint8Array([length, result]);\n  344  };\n  345  \n  ...\n  356    arr.push(new Uint8Array([type]));\n  357    arr.push(data);\n  358:   return util.concatUint8Array(arr);\n  359  }\n  360  \n  ...\n  374    // The leftwost bit denotes a \"critical\" packet, but we ignore it.\n  375    var type = bytes[mypos++] & 0x7F;\n  376:   var seconds;\n  377  \n  378    // subpacket type\n  ...\n  383        break;\n  384      case 3:\n  385:       // Signature Expiration Time in seconds\n  386:       seconds = util.readNumber(bytes.subarray(mypos, bytes.length));\n  387  \n  388:       this.signatureNeverExpires = seconds === 0;\n  389:       this.signatureExpirationTime = seconds;\n  390  \n  391        break;\n  ...\n  408        break;\n  409      case 9:\n  410:       // Key Expiration Time in seconds\n  411:       seconds = util.readNumber(bytes.subarray(mypos, bytes.length));\n  412  \n  413:       this.keyExpirationTime = seconds;\n  414:       this.keyNeverExpires = seconds === 0;\n  415  \n  416        break;\n  ...\n  460        break;\n  461      case 22:\n  462:       // Preferred Compression Algorithms\n  463:       read_array.call(this, 'preferredCompressionAlgorithms', bytes.subarray(mypos, bytes.length));\n  464        break;\n  465      case 23:\n  ...\n  549  \n  550        if (this.version === 4) {\n  551:         return util.concatUint8Array([this.toSign(t.key, data),\n  552            new Uint8Array([tag]),\n  553            util.writeNumber(bytes.length, 4),\n  554            bytes]);\n  555        } else if (this.version === 3) {\n  556:         return util.concatUint8Array([this.toSign(t.key, data),\n  557            bytes]);\n  558        }\n  ...\n  562      case t.subkey_revocation:\n  563      case t.key_binding:\n  564:       return util.concatUint8Array([this.toSign(t.key, data),this.toSign(t.key, {\n  565          key: data.bind\n  566        })]);\n  ...\n  591    }\n  592    var first = new Uint8Array([4, 0xFF]); //Version, ?\n  593:   return util.concatUint8Array([first, util.writeNumber(this.signatureData.length, 4)]);\n  594  };\n  595  \n  ...\n  611  \n  612  \n  613:   var mpicount = 0;\n  614    // Algorithm-Specific Fields for RSA signatures:\n  615    //      - multiprecision number (MPI) of RSA signature value m**d mod n.\n  616    if (publicKeyAlgorithm > 0 && publicKeyAlgorithm < 4) {\n  617:     mpicount = 1;\n  618    }\n  619    //    Algorithm-Specific Fields for DSA signatures:\n  ...\n  621    //      - MPI of DSA value s.\n  622    else if (publicKeyAlgorithm === 17) {\n  623:     mpicount = 2;\n  624    }\n  625  \n  626    var mpi = [],\n  627      i = 0;\n  628:   for (var j = 0; j < mpicount; j++) {\n  629      mpi[j] = new type_mpi();\n  630      i += mpi[j].read(this.signature.subarray(i, this.signature.length));\n  ...\n  633    this.verified = crypto.signature.verify(publicKeyAlgorithm,\n  634      hashAlgorithm, mpi, key.mpi,\n  635:     util.concatUint8Array([bytes, this.signatureData, trailer]));\n  636  \n  637    return this.verified;\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/sym_encrypted_integrity_protected.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   24   * a variant of the Symmetrically Encrypted Data packet. It is a new feature\n   25   * created for OpenPGP that addresses the problem of detecting a modification to\n   26:  * encrypted data. It is used in combination with a Modification Detection Code\n   27   * packet.\n   28   * @requires crypto\n   29   * @requires util\n   30   * @requires enums\n   31:  * @requires config\n   32   * @module packet/sym_encrypted_integrity_protected\n   33   */\n   ..\n   39  import enums from '../enums.js';\n   40  import asmCrypto from 'asmcrypto-lite';\n   41: const nodeCrypto = util.getNodeCrypto();\n   42: const Buffer = util.getNodeBuffer();\n   43  \n   44  /**\n   45:  * @constructor\n   46   */\n   47  export default function SymEncryptedIntegrityProtected() {\n   ..\n   51    /**\n   52     * If after decrypting the packet this is set to true,\n   53:    * a modification has been detected and thus the contents\n   54     * should be discarded.\n   55     * @type {Boolean}\n   ..\n   75  SymEncryptedIntegrityProtected.prototype.write = function () {\n   76    // 1 = Version\n   77:   return util.concatUint8Array([new Uint8Array([1]), this.encrypted]);\n   78  };\n   79  \n   ..\n   83    var prefixrandom = crypto.getPrefixRandom(sessionKeyAlgorithm);\n   84    var repeat = new Uint8Array([prefixrandom[prefixrandom.length - 2], prefixrandom[prefixrandom.length - 1]]);\n   85:   var prefix = util.concatUint8Array([prefixrandom, repeat]);\n   86  \n   87:   // Modification detection code packet.\n   88    var mdc = new Uint8Array([0xD3, 0x14]);\n   89  \n   90:   // This could probably be cleaned up to use less memory\n   91:   var tohash = util.concatUint8Array([bytes, mdc]);\n   92:   var hash = crypto.hash.sha1(util.concatUint8Array([prefix, tohash]));\n   93:   tohash = util.concatUint8Array([tohash, hash]);\n   94  \n   95:   if(sessionKeyAlgorithm.substr(0,3) === 'aes') { // AES optimizations. Native code for node, asmCrypto for browser.\n   96      var blockSize = crypto.cipher[sessionKeyAlgorithm].blockSize;\n   97  \n   98:     if(nodeCrypto) { // Node crypto library. Only loaded if config.useNative === true\n   99        var cipherObj = new nodeCrypto.createCipheriv('aes-' + sessionKeyAlgorithm.substr(3,3) + '-cfb',\n  100          new Buffer(key), new Buffer(new Uint8Array(blockSize)));\n  101:       this.encrypted = new Uint8Array(cipherObj.update(new Buffer(util.concatUint8Array([prefix, tohash]))));\n  102  \n  103      } else { // asm.js fallback\n  104:       this.encrypted = asmCrypto.AES_CFB.encrypt(util.concatUint8Array([prefix, tohash]), key);\n  105      }\n  106  \n  ...\n  112  \n  113  /**\n  114:  * Decrypts the encrypted data contained in this object read_packet must\n  115   * have been called before\n  116   *\n  ...\n  123    var decrypted;\n  124  \n  125:   if(sessionKeyAlgorithm.substr(0,3) === 'aes') {  // AES optimizations. Native code for node, asmCrypto for browser.\n  126      var blockSize = crypto.cipher[sessionKeyAlgorithm].blockSize;\n  127  \n  128:     if(nodeCrypto) { // Node crypto library. Only loaded if config.useNative === true\n  129        var decipherObj = new nodeCrypto.createDecipheriv('aes-' + sessionKeyAlgorithm.substr(3,3) + '-cfb',\n  130          new Buffer(key), new Buffer(new Uint8Array(blockSize)));\n  ...\n  142    }\n  143  \n  144:   // there must be a modification detection code packet as the\n  145    // last packet and everything gets hashed except the hash itself\n  146:   this.hash = util.Uint8Array2str(crypto.hash.sha1(util.concatUint8Array([crypto.cfb.mdc(sessionKeyAlgorithm, key, this.encrypted),\n  147      decrypted.subarray(0, decrypted.length - 20)])));\n  148  \n\n/Users/steph/Documents/projects/openpgpjs/src/packet/sym_encrypted_session_key.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   45  \n   46  /**\n   47:  * @constructor\n   48   */\n   49  export default function SymEncryptedSessionKey() {\n   ..\n   94      this.sessionKeyEncryptionAlgorithm;\n   95  \n   96:   var bytes = util.concatUint8Array([new Uint8Array([this.version, enums.write(enums.symmetric, algo)]), this.s2k.write()]);\n   97  \n   98    if (this.encrypted !== null) {\n   99:     bytes = util.concatUint8Array([bytes, this.encrypted]);\n  100    }\n  101    return bytes;\n  ...\n  147      this.sessionKey = crypto.getRandomBytes(crypto.cipher[this.sessionKeyAlgorithm].keySize);\n  148    }\n  149:   private_key = util.concatUint8Array([algo_enum, this.sessionKey]);\n  150  \n  151    this.encrypted = crypto.cfb.normalEncrypt(\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/symmetrically_encrypted.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   19   * Implementation of the Symmetrically Encrypted Data Packet (Tag 9)<br/>\n   20   * <br/>\n   21:  * {@link http://tools.ietf.org/html/rfc4880#section-5.7|RFC4880 5.7}: The Symmetrically Encrypted Data packet contains data encrypted\n   22:  * with a symmetric-key algorithm. When it has been decrypted, it contains other\n   23:  * packets (usually a literal data packet or compressed data packet, but in\n   24   * theory other Symmetrically Encrypted Data packets or sequences of packets\n   25   * that form whole OpenPGP messages).\n   ..\n   33  import crypto from '../crypto';\n   34  import enums from '../enums.js';\n   35: import config from '../config';\n   36  \n   37  /**\n   38:  * @constructor\n   39   */\n   40  export default function SymmetricallyEncrypted() {\n   41    this.tag = enums.packet.symmetricallyEncrypted;\n   42    this.encrypted = null;\n   43:   /** Decrypted packets contained within.\n   44     * @type {module:packet/packetlist} */\n   45    this.packets =  null;\n   46:   this.ignore_mdc_error = config.ignore_mdc_error;\n   47  }\n   48  \n   ..\n   61   *             Symmetric key algorithm to use // See {@link http://tools.ietf.org/html/rfc4880#section-9.2|RFC4880 9.2}\n   62   * @param {String} key\n   63:  *             Key as string with the corresponding length to the\n   64   *            algorithm\n   65   */\n   ..\n   71         sessionKeyAlgorithm === 'aes192' ||\n   72         sessionKeyAlgorithm === 'aes256')) {\n   73:     throw new Error('Decryption failed due to missing MDC in combination with modern cipher.');\n   74    }\n   75    this.packets.read(decrypted);\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/trust.js:\n    9  \n   10  /**\n   11:  * @constructor\n   12   */\n   13  export default function Trust() {\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/user_attribute.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   28   * While User Attribute packets are not a required part of the OpenPGP\n   29   * standard, implementations SHOULD provide at least enough\n   30:  * compatibility to properly handle a certification signature on the\n   31   * User Attribute packet.  A simple way to do this is by treating the\n   32:  * User Attribute packet as a User ID packet with opaque contents, but\n   33   * an implementation may use any method desired.\n   34   * module packet/user_attribute\n   ..\n   44  \n   45  /**\n   46:  * @constructor\n   47   */\n   48  export default function UserAttribute() {\n   ..\n   76      arr.push(util.str2Uint8Array(this.attributes[i]));\n   77    }\n   78:   return util.concatUint8Array(arr);\n   79  };\n   80  \n   81  /**\n   82:  * Compare for equality\n   83   * @param  {module:user_attribute~UserAttribute} usrAttr\n   84   * @return {Boolean}         true if equal\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/userid.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   19   * Implementation of the User ID Packet (Tag 13)<br/>\n   20   * <br/>\n   21:  * A User ID packet consists of UTF-8 text that is intended to represent\n   22:  * the name and email address of the key holder.  By convention, it\n   23   * includes an RFC 2822 [RFC2822] mail name-addr, but there are no\n   24:  * restrictions on its content.  The packet length in the header\n   25   * specifies the length of the User ID.\n   26   * @requires util\n   ..\n   35  \n   36  /**\n   37:  * @constructor\n   38   */\n   39  export default function Userid() {\n   40    this.tag = enums.packet.userid;\n   41:   /** A string containing the user id. Usually in the form\n   42:    * John Doe <john@example.com>\n   43     * @type {String}\n   44     */\n   ..\n   51   */\n   52  Userid.prototype.read = function (bytes) {\n   53:   this.userid = util.decode_utf8(util.Uint8Array2str(bytes));\n   54  };\n   55  \n   ..\n   59   */\n   60  Userid.prototype.write = function () {\n   61:   return util.str2Uint8Array(util.encode_utf8(this.userid));\n   62  };\n   63  \n\n/Users/steph/Documents/projects/openpgpjs/src/type/keyid.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   32  \n   33  /**\n   34:  * @constructor\n   35   */\n   36  export default function Keyid() {\n\n/Users/steph/Documents/projects/openpgpjs/src/type/mpi.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   27   * to hold large integers such as the ones used in cryptographic\n   28   * calculations.\n   29:  * An MPI consists of two pieces: a two-octet scalar that is the length\n   30:  * of the MPI in bits followed by a string of octets that contain the\n   31   * actual integer.\n   32   * @requires crypto/public_key/jsbn\n   ..\n   41  \n   42  /**\n   43:  * @constructor\n   44   */\n   45  export default function MPI() {\n   ..\n   67    //    The length field of an MPI describes the length starting from its\n   68    //    most significant non-zero bit.  Thus, the MPI [00 02 01] is not\n   69:   //    formed correctly.  It should be [00 01 01].\n   70  \n   71    // TODO: Verification of this size method! This size calculation as\n   ..\n   93  \n   94  /**\n   95:  * Converts the mpi object to a bytes as specified in {@link http://tools.ietf.org/html/rfc4880#section-3.2|RFC4880 3.2}\n   96   * @return {Uint8Aray} mpi Byte representation\n   97   */\n   ..\n  109  \n  110  MPI.fromClone = function (clone) {\n  111:   clone.data.copyTo = BigInteger.prototype.copyTo;\n  112    var bn = new BigInteger();\n  113:   clone.data.copyTo(bn);\n  114    var mpi = new MPI();\n  115    mpi.data = bn;\n\n/Users/steph/Documents/projects/openpgpjs/src/type/s2k.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   19   * Implementation of the String-to-key specifier ({@link http://tools.ietf.org/html/rfc4880#section-3.7|RFC4880 3.7})<br/>\n   20   * <br/>\n   21:  * String-to-key (S2K) specifiers are used to convert passphrase strings\n   22   * into symmetric-key encryption/decryption keys.  They are used in two\n   23   * places, currently: to encrypt the secret part of private keys in the\n   24:  * private keyring, and to convert passphrases to encryption keys for\n   25   * symmetrically encrypted messages.\n   26   * @requires crypto\n   ..\n   37  \n   38  /**\n   39:  * @constructor\n   40   */\n   41  export default function S2K() {\n   ..\n   51  }\n   52  \n   53: S2K.prototype.get_count = function () {\n   54    // Exponent bias, defined in RFC4880\n   55    var expbias = 6;\n   ..\n   81        i += 8;\n   82  \n   83:       // Octet 10: count, a one-octet, coded value\n   84        this.c = bytes[i++];\n   85        break;\n   ..\n  132    }\n  133  \n  134:   return util.concatUint8Array(arr);\n  135  };\n  136  \n  ...\n  138   * Produces a key using the specified passphrase and the defined\n  139   * hashAlgorithm\n  140:  * @param {String} passphrase Passphrase containing user input\n  141:  * @return {Uint8Array} Produced key with a length corresponding to\n  142   * hashAlgorithm hash length\n  143   */\n  144  S2K.prototype.produce_key = function (passphrase, numBytes) {\n  145:   passphrase = util.str2Uint8Array(util.encode_utf8(passphrase));\n  146  \n  147    function round(prefix, s2k) {\n  ...\n  150      switch (s2k.type) {\n  151        case 'simple':\n  152:         return crypto.hash.digest(algorithm, util.concatUint8Array([prefix,passphrase]));\n  153  \n  154        case 'salted':\n  155          return crypto.hash.digest(algorithm,\n  156:           util.concatUint8Array([prefix, s2k.salt, passphrase]));\n  157  \n  158        case 'iterated':\n  159          var isp = [],\n  160:           count = s2k.get_count(),\n  161:           data = util.concatUint8Array([s2k.salt,passphrase]);\n  162  \n  163:         while (isp.length * data.length < count) {\n  164            isp.push(data);\n  165          }\n  166  \n  167:         isp = util.concatUint8Array(isp);\n  168  \n  169:         if (isp.length > count) {\n  170:           isp = isp.subarray(0, count);\n  171          }\n  172  \n  173:         return crypto.hash.digest(algorithm, util.concatUint8Array([prefix,isp]));\n  174  \n  175        case 'gnu':\n  ...\n  197    }\n  198  \n  199:   return util.concatUint8Array(arr).subarray(0, numBytes);\n  200  };\n  201  \n\n/Users/steph/Documents/projects/openpgpjs/src/util.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   17  \n   18  /**\n   19:  * This object contains utility functions\n   20:  * @requires config\n   21   * @module util\n   22   */\n   ..\n   24  'use strict';\n   25  \n   26: import config from './config';\n   27  \n   28  export default {\n   ..\n   44        return false;\n   45      }\n   46:     const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n   47      return re.test(data);\n   48    },\n   ..\n   56  \n   57    /**\n   58:    * Get transferable objects to pass buffers with zero copy (similar to \"pass by reference\" in C++)\n   59     *   See: https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n   60     * @param  {Object} obj           the options object to be passed to the web worker\n   ..\n   62     */\n   63    getTransferables: function(obj) {\n   64:     if (config.zeroCopy && Object.prototype.isPrototypeOf(obj)) {\n   65:       const transferables = [];\n   66:       this.collectBuffers(obj, transferables);\n   67        return transferables.length ? transferables : undefined;\n   68      }\n   69    },\n   70  \n   71:   collectBuffers: function(obj, collection) {\n   72      if (!obj) {\n   73        return;\n   74      }\n   75:     if (this.isUint8Array(obj) && collection.indexOf(obj.buffer) === -1) {\n   76:       collection.push(obj.buffer);\n   77        return;\n   78      }\n   79      if (Object.prototype.isPrototypeOf(obj)) {\n   80        for (let key in obj) { // recursively search all children\n   81:         this.collectBuffers(obj[key], collection);\n   82        }\n   83      }\n   ..\n  124      var i = 0;\n  125      while (c < e) {\n  126:       h = str.charCodeAt(c++).toString(16);\n  127        while (h.length < 2) {\n  128          h = \"0\" + h;\n  ...\n  139    /**\n  140     * Create hexstring from a binary\n  141:    * @param {String} str String to convert\n  142:    * @return {String} String containing the hexadecimal values\n  143     */\n  144    hexstrdump: function (str) {\n  ...\n  151      var h;\n  152      while (c < e) {\n  153:       h = str.charCodeAt(c++).toString(16);\n  154        while (h.length < 2) {\n  155          h = \"0\" + h;\n  ...\n  161  \n  162    /**\n  163:    * Create binary string from a hex encoded string\n  164:    * @param {String} str Hex string to convert\n  165:    * @return {String} String containing the binary values\n  166     */\n  167    hex2bin: function (hex) {\n  168      var str = '';\n  169      for (var i = 0; i < hex.length; i += 2) {\n  170:       str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  171      }\n  172      return str;\n  ...\n  175    /**\n  176     * Creating a hex string from an binary array of integers (0..255)\n  177:    * @param {String} str Array of bytes to convert\n  178     * @return {String} Hexadecimal representation of the array\n  179     */\n  ...\n  195  \n  196    /**\n  197:    * Convert a native javascript string to a string of utf8 bytes\n  198:    * @param {String} str The string to convert\n  199     * @return {String} A valid squence of utf8 bytes\n  200     */\n  201:   encode_utf8: function (str) {\n  202:     return unescape(encodeURIComponent(str));\n  203    },\n  204  \n  205    /**\n  206:    * Convert a string of utf8 bytes to a native javascript string\n  207     * @param {String} utf8 A valid squence of utf8 bytes\n  208     * @return {String} A native javascript string\n  209     */\n  210:   decode_utf8: function (utf8) {\n  211      if (typeof utf8 !== 'string') {\n  212        throw new Error('Parameter \"utf8\" is not of type string');\n  213      }\n  214      try {\n  215:       return decodeURIComponent(escape(utf8));\n  216      } catch (e) {\n  217        return utf8;\n  ...\n  220  \n  221    /**\n  222:    * Convert an array of integers(0.255) to a string\n  223:    * @param {Array<Integer>} bin An array of (binary) integers to convert\n  224     * @return {String} The string representation of the array\n  225     */\n  ...\n  227      var result = [];\n  228      for (var i = 0; i < bin.length; i++) {\n  229:       result[i] = String.fromCharCode(bin[i]);\n  230      }\n  231      return result.join('');\n  ...\n  233  \n  234    /**\n  235:    * Convert a string to an array of integers(0.255)\n  236:    * @param {String} str String to convert\n  237     * @return {Array<Integer>} An array of (binary) integers\n  238     */\n  ...\n  240      var result = [];\n  241      for (var i = 0; i < str.length; i++) {\n  242:       result[i] = str.charCodeAt(i);\n  243      }\n  244      return result;\n  ...\n  247  \n  248    /**\n  249:    * Convert a string to a Uint8Array\n  250:    * @param {String} str String to convert\n  251     * @return {Uint8Array} The array of (binary) integers\n  252     */\n  ...\n  258      var result = new Uint8Array(str.length);\n  259      for (var i = 0; i < str.length; i++) {\n  260:       result[i] = str.charCodeAt(i);\n  261      }\n  262      return result;\n  ...\n  264  \n  265    /**\n  266:    * Convert a Uint8Array to a string. This currently functions\n  267     * the same as bin2str.\n  268     * @function module:util.Uint8Array2str\n  269:    * @param {Uint8Array} bin An array of (binary) integers to convert\n  270     * @return {String} String representation of the array\n  271     */\n  ...\n  277      var result = [];\n  278      for (var i = 0; i < bin.length; i++) {\n  279:       result[i] = String.fromCharCode(bin[i]);\n  280      }\n  281      return result.join('');\n  ...\n  283  \n  284    /**\n  285:    * Concat Uint8arrays\n  286:    * @function module:util.concatUint8Array\n  287:    * @param {Array<Uint8array>} Array of Uint8Arrays to concatenate\n  288:    * @return {Uint8array} Concatenated array\n  289     */\n  290:   concatUint8Array: function (arrays) {\n  291      var totalLength = 0;\n  292      arrays.forEach(function (element) {\n  293        if(!Uint8Array.prototype.isPrototypeOf(element)) {\n  294:         throw new Error('concatUint8Array: Data must be in the form of a Uint8Array');\n  295        }\n  296  \n  ...\n  309  \n  310    /**\n  311:    * Deep copy Uint8Array\n  312:    * @function module:util.copyUint8Array\n  313:    * @param {Uint8Array} Array to copy\n  314     * @return {Uint8Array} new Uint8Array\n  315     */\n  316:   copyUint8Array: function (array) {\n  317      if(!Uint8Array.prototype.isPrototypeOf(array)) {\n  318        throw new Error('Data must be in the form of a Uint8Array');\n  319      }\n  320  \n  321:     var copy = new Uint8Array(array.length);\n  322:     copy.set(array);\n  323:     return copy;\n  324    },\n  325  \n  ...\n  328     * @function module:util.equalsUint8Array\n  329     * @param {Uint8Array} first array\n  330:    * @param {Uint8Array} second array\n  331     * @return {Boolean} equality\n  332     */\n  ...\n  350    /**\n  351     * Calculates a 16bit sum of a Uint8Array by adding each character\n  352:    * codes modulus 65535\n  353     * @param {Uint8Array} Uint8Array to create a sum of\n  354:    * @return {Integer} An integer containing the sum of all character\n  355:    * codes % 65535\n  356     */\n  357    calc_checksum: function (text) {\n  ...\n  371     * Helper function to print a debug message. Debug\n  372     * messages are only printed if\n  373:    * @link module:config/config.debug is set to true.\n  374     * @param {String} str String of the debug message\n  375     */\n  376    print_debug: function (str) {\n  377:     if (config.debug) {\n  378:       console.log(str);\n  379      }\n  380    },\n  ...\n  383     * Helper function to print a debug message. Debug\n  384     * messages are only printed if\n  385:    * @link module:config/config.debug is set to true.\n  386     * Different than print_debug because will call hexstrdump iff necessary.\n  387     * @param {String} str String of the debug message\n  388     */\n  389    print_debug_hexstr_dump: function (str, strToHex) {\n  390:     if (config.debug) {\n  391        str = str + this.hexstrdump(strToHex);\n  392:       console.log(str);\n  393      }\n  394    },\n  395  \n  396:   getLeftNBits: function (string, bitcount) {\n  397:     var rest = bitcount % 8;\n  398      if (rest === 0) {\n  399:       return string.substring(0, bitcount / 8);\n  400      }\n  401:     var bytes = (bitcount - rest) / 8 + 1;\n  402      var result = string.substring(0, bytes);\n  403:     return this.shiftRight(result, 8 - rest); // +String.fromCharCode(string.charCodeAt(bytes -1) << (8-rest) & 0xFF);\n  404    },\n  405  \n  ...\n  407     * Shifting a string to n bits right\n  408     * @param {String} value The string to shift\n  409:    * @param {Integer} bitcount Amount of bits to shift (MUST be smaller\n  410     * than 9)\n  411     * @return {String} Resulting string.\n  412     */\n  413:   shiftRight: function (value, bitcount) {\n  414      var temp = this.str2bin(value);\n  415:     if (bitcount % 8 !== 0) {\n  416        for (var i = temp.length - 1; i >= 0; i--) {\n  417:         temp[i] >>= bitcount % 8;\n  418          if (i > 0) {\n  419:           temp[i] |= (temp[i - 1] << (8 - (bitcount % 8))) & 0xFF;\n  420          }\n  421        }\n  ...\n  451  \n  452    /**\n  453:    * Get native Web Cryptography api. The default configuration is to use\n  454:    * the api when available. But it can also be deactivated with config.useNative\n  455     * @return {Object}   The SubtleCrypto api or 'undefined'\n  456     */\n  457    getWebCrypto: function() {\n  458:     if (!config.useNative) {\n  459        return;\n  460      }\n  ...\n  486  \n  487    /**\n  488:    * Converts an IE11 web crypro api result to a promise.\n  489     *   This is required since IE11 implements an old version of the\n  490     *   Web Crypto specification that does not use promises.\n  ...\n  498          reject(new Error(errmsg));\n  499        };\n  500:       cryptoOp.oncomplete = function (e) {\n  501          resolve(e.target.result);\n  502        };\n  ...\n  512  \n  513    /**\n  514:    * Get native Node.js crypto api. The default configuration is to use\n  515:    * the api when available. But it can also be deactivated with config.useNative\n  516     * @return {Object}   The crypto module or 'undefined'\n  517     */\n  518    getNodeCrypto: function() {\n  519:     if (!this.detectNode() || !config.useNative) {\n  520        return;\n  521      }\n  ...\n  525  \n  526    /**\n  527:    * Get native Node.js Buffer constructor. This should be used since\n  528     * Buffer is not available under browserify.\n  529:    * @return {Function}   The Buffer constructor or 'undefined'\n  530     */\n  531    getNodeBuffer: function() {\n\n/Users/steph/Documents/projects/openpgpjs/src/worker/async_proxy.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   22  import packet from '../packet';\n   23  \n   24: const INITIAL_RANDOM_SEED = 50000, // random bytes seeded to worker\n   25      RANDOM_SEED_REQUEST = 20000; // random bytes seeded after worker request\n   26  \n   27  /**\n   28   * Initializes a new proxy and loads the web worker\n   29:  * @constructor\n   30   * @param {String} path     The path to the worker or 'openpgp.worker.js' by default\n   31:  * @param {Object} config   config The worker configuration\n   32   * @param {Object} worker   alternative to path parameter: web worker initialized with 'openpgp.worker.js'\n   33   * @return {Promise}\n   34   */\n   35: export default function AsyncProxy({ path='openpgp.worker.js', worker, config } = {}) {\n   36    this.worker = worker || new Worker(path);\n   37    this.worker.onmessage = this.onMessage.bind(this);\n   ..\n   42    // FIFO\n   43    this.tasks = [];\n   44:   if (config) {\n   45:     this.worker.postMessage({ event:'configure', config });\n   46    }\n   47  }\n   ..\n   51   */\n   52  AsyncProxy.prototype.onMessage = function(event) {\n   53:   const msg = event.data;\n   54    switch (msg.event) {\n   55      case 'method-return':\n   ..\n   75   */\n   76  AsyncProxy.prototype.seedRandom = function(size) {\n   77:   const buf = this.getRandomBuffer(size);\n   78    this.worker.postMessage({ event:'seed-random', buf }, util.getTransferables.call(util, buf));\n   79  };\n   ..\n   88      return null;\n   89    }\n   90:   const buf = new Uint8Array(size);\n   91    crypto.random.getRandomValues(buf);\n   92    return buf;\n   ..\n  101  \n  102  /**\n  103:  * Generic proxy function that handles all commands from the public api.\n  104   * @param  {String} method    the public api function to be delegated to the worker thread\n  105   * @param  {Object} options   the api function's options\n  106:  * @return {Promise}          see the corresponding public api functions for their return types\n  107   */\n  108  AsyncProxy.prototype.delegate = function(method, options) {\n\n/Users/steph/Documents/projects/openpgpjs/src/worker/worker.js:\n    1  // GPG4Browsers - An OpenPGP implementation in javascript\n    2: // Copyright (C) 2011 Recurity Labs GmbH\n    3  //\n    4  // This library is free software; you can redistribute it and/or\n    .\n   12  // Lesser General Public License for more details.\n   13  //\n   14: // You should have received a copy of the GNU Lesser General Public\n   15  // License along with this library; if not, write to the Free Software\n   16  // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   ..\n   33  \n   34    switch (msg.event) {\n   35:     case 'configure':\n   36:       for (var i in msg.config) {\n   37:         openpgp.config[i] = msg.config[i];\n   38        }\n   39        break;\n\n/Users/steph/Documents/projects/openpgpjs/test/co/gen.js:\n    6  var openpgp =  require('../../dist/openpgp');\n    7  \n    8: openpgp.generateKey({userIds:{email:\"steph@gmail.com\"},passphrase:\"xxx\",numBits:2048, expiration: 300}).then(function(res){\n    9  \t\n   10  \n   ..\n   13  \t\tvar privKey = openpgp.key.readArmored(armored).keys[0];\n   14  \n   15: \tconsole.log(\"expiration: \"+ privKey.getExpirationTime()   );\n   16  \n   17: \tfs.writeFileSync(\"new.asc\",armored,{encoding:\"utf8\"});\n   18  \n   19  \n   20  \n   21  }).catch(function(err){\n   22: \tconsole.log(\"error\");\n   23: \tconsole.log(err);\n   24  });\n\n/Users/steph/Documents/projects/openpgpjs/test/co/passphrase.js:\n    5  var openpgp =  require('../../dist/openpgp');\n    6  \n    7: var keyData = fs.readFileSync(\"key.asc\",{encoding:\"utf8\"});\n    8  \n    9  var originalPwd=\"xxx\";\n   ..\n   17  //check version\n   18  if(privKey.primaryKey.version !== 4){\n   19: \tconsole.log(\"Not version 4\");\n   20  \treturn;\n   21  }\n   ..\n   36  privKey = openpgp.key.readArmored(keyData).keys[0];\n   37  \n   38: console.log(privKey.decrypt(targetPwd));\n   39  \n   40  \n\n/Users/steph/Documents/projects/openpgpjs/test/co/revoke.js:\n    5  var openpgp =  require('../../dist/openpgp');\n    6  \n    7: var keyData = fs.readFileSync(\"key2.asc\",{encoding:\"utf8\"});\n    8  \n    9  \n   ..\n   21  \n   22  isRevoked = (privKey.verifyPrimaryKey() === openpgp.enums.keyStatus.revoked);\n   23: console.log(\"Revoked: \"+isRevoked);\n   24  \n   25  fs.writeFileSync(\"revoked-priv.asc\",keyData);\n   ..\n   29  \n   30  }).catch(function(err){\n   31: \tconsole.log(err);\n   32  \n   33  })\n\n/Users/steph/Documents/projects/openpgpjs/test/co/sign.js:\n    1  \n    2  \n    3: var msg = 'Content-Type: multipart/alternative;'+\n    4  '\\n \tboundary=\"----=_Part_152_15724726.1457955789174\"'+\n    5  '\\n'+\n    6  '\\n------=_Part_152_15724726.1457955789174'+\n    7: '\\nContent-Type: text/plain; charset=utf-8'+\n    8: '\\nContent-Transfer-Encoding: 7bit'+\n    9: '\\nContent-Disposition: inline'+\n   10  '\\n'+\n   11  '\\ndfgdfgdfg'+\n   12  '\\n------=_Part_152_15724726.1457955789174'+\n   13: '\\nContent-Type: text/html; charset=utf-8'+\n   14: '\\nContent-Transfer-Encoding: 7bit'+\n   15: '\\nContent-Disposition: inline'+\n   16  '\\n'+\n   17: '\\n<div style=\\'font-family:Times New Roman; color:rgb(0, 0, 0); font-size:13px;\\'>dfgdfgdfg<br></div>'+\n   18  '\\n------=_Part_152_15724726.1457955789174--';\n   19  \n   ..\n   26  var openpgp =  require('../../dist/openpgp');\n   27  \n   28: var keyData = fs.readFileSync(\"key\",{encoding:\"utf8\"});\n   29  var privKey = openpgp.key.readArmored(keyData).keys[0];\n   30  privKey.decrypt(\"xxx\"); \n   ..\n   35  \t\n   36  \n   37: \t\t\tconsole.log(res);\n   38  \n   39  \n   40  }).catch(function(err){\n   41: \tconsole.log(\"error\");\n   42: \tconsole.log(err);\n   43  });\n   44  \n\n/Users/steph/Documents/projects/openpgpjs/test/co/update.js:\n    5  var openpgp =  require('../../dist/openpgp');\n    6  \n    7: var keyData = fs.readFileSync(\"key.asc\",{encoding:\"utf8\"});\n    8  \n    9  \n   ..\n   13  //var isPassphraseValid = privKey.decrypt(\"xxx\"); \n   14  \n   15: console.log(\"inital expiration: \"+ privKey.getExpirationTime()   );\n   16  \n   17  \n   ..\n   20  //check version\n   21  if(privKey.primaryKey.version !== 4){\n   22: \tconsole.log(\"Not version 4\");\n   23  \treturn;\n   24  }\n   ..\n   94  fs.writeFileSync(\"keypub.asc\",privKey.toPublic().armor());\n   95  \n   96: //console.log(privKey2.decrypt(\"xxx\"));\n   97  keyData =privKey.toPublic().armor();\n   98  privKey= openpgp.key.readArmored(keyData).keys[0];\n   99: console.log(\"expiration final: \"+privKey.getExpirationTime());\n  100: console.log(\"expiration subkey: \"+privKey.subKeys[0].getExpirationTime())\n  101  \n  102: //console.log(\"expiration: \"+ privKey2.getExpirationTime()   );\n  103  \n  104  //http://www.g-loaded.eu/2010/11/01/change-expiration-date-gpg-key/\n\n/Users/steph/Documents/projects/openpgpjs/test/crypto/cipher/blowfish.js:\n    8    expect = chai.expect;\n    9  \n   10: it('Blowfish cipher test with test vectors from http://www.schneier.com/code/vectors.txt', function(done) {\n   11    function test_bf(input, key, output) {\n   12      var blowfish = new openpgp.crypto.cipher.blowfish(util.bin2str(key));\n\n/Users/steph/Documents/projects/openpgpjs/test/crypto/cipher/twofish.js:\n    7    expect = chai.expect;\n    8  \n    9: it('Twofish with test vectors from http://www.schneier.com/code/ecb_ival.txt', function(done) {\n   10    function TFencrypt(block, key) {\n   11      var tf = new openpgp.crypto.cipher.twofish(util.str2Uint8Array(key));\n   ..\n   45      } else if (i === 2) {\n   46        blk = testvectors[i-1];\n   47:       key = util.bin2str(testvectors[i-2].concat(start_short));\n   48        ct = testvectors[i];\n   49        res = util.bin2str(TFencrypt(blk,key));\n   ..\n   51      } else if (i < 10 || i > 46) {\n   52        blk = testvectors[i-1];\n   53:       key = util.bin2str(testvectors[i-2].concat(testvectors[i-3]));\n   54        ct = testvectors[i];\n   55        res = util.bin2str(TFencrypt(blk,key));\n   56        exp = util.bin2str(ct);\n   57      } else {\n   58:       testvectors[i] = TFencrypt(testvectors[i-1],util.bin2str(testvectors[i-2].concat(testvectors[i-3])));\n   59:       continue;\n   60      }\n   61      expect(res, 'vector with block ' + util.hexidump(blk) +\n\n/Users/steph/Documents/projects/openpgpjs/test/crypto/crypto.js:\n  231        //Originally we passed public and secret MPI separately, now they are joined. Is this what we want to do long term?\n  232        // RSA\n  233:       var RSAsignedData = openpgp.crypto.signature.sign(2, 1, RSApubMPIs.concat(RSAsecMPIs), data);\n  234        var RSAsignedDataMPI = new openpgp.MPI();\n  235        RSAsignedDataMPI.read(RSAsignedData);\n  ...\n  241      it('DSA', function (done) {\n  242        // DSA\n  243:       var DSAsignedData = util.Uint8Array2str(openpgp.crypto.signature.sign(2, 17, DSApubMPIs.concat(DSAsecMPIs), data));\n  244  \n  245        var DSAmsgMPIs = [];\n  ...\n  312        var symmKey = util.Uint8Array2str(openpgp.crypto.generateSessionKey('aes256'));\n  313        var RSAUnencryptedData = new openpgp.MPI();\n  314:       RSAUnencryptedData.fromBytes(openpgp.crypto.pkcs1.eme.encode(symmKey, RSApubMPIs[0].byteLength()));\n  315        var RSAEncryptedData = openpgp.crypto.publicKeyEncrypt(\"rsa_encrypt_sign\", RSApubMPIs, RSAUnencryptedData);\n  316  \n  317:       var data = openpgp.crypto.publicKeyDecrypt(\"rsa_encrypt_sign\", RSApubMPIs.concat(RSAsecMPIs), RSAEncryptedData).write();\n  318        data = util.Uint8Array2str(data.subarray(2, data.length));\n  319  \n  320:       var result = openpgp.crypto.pkcs1.eme.decode(data, RSApubMPIs[0].byteLength());\n  321        expect(result).to.equal(symmKey);\n  322        done();\n  ...\n  326        var symmKey = util.Uint8Array2str(openpgp.crypto.generateSessionKey('aes256'));\n  327        var ElgamalUnencryptedData = new openpgp.MPI();\n  328:       ElgamalUnencryptedData.fromBytes(openpgp.crypto.pkcs1.eme.encode(symmKey, ElgamalpubMPIs[0].byteLength()));\n  329        var ElgamalEncryptedData = openpgp.crypto.publicKeyEncrypt(\"elgamal\", ElgamalpubMPIs, ElgamalUnencryptedData);\n  330  \n  331:       var data = openpgp.crypto.publicKeyDecrypt(\"elgamal\", ElgamalpubMPIs.concat(ElgamalsecMPIs), ElgamalEncryptedData).write();\n  332        data = util.Uint8Array2str(data.subarray(2, data.length));\n  333  \n  334:       var result = openpgp.crypto.pkcs1.eme.decode(data, ElgamalpubMPIs[0].byteLength());\n  335        expect(result).to.equal(symmKey);\n  336        done();\n\n/Users/steph/Documents/projects/openpgpjs/test/crypto/random.js:\n   10  \n   11    before(function() {\n   12:     randomBuffer = new openpgp.crypto.random.randomBuffer.constructor();\n   13      expect(randomBuffer).to.exist;\n   14    });\n\n/Users/steph/Documents/projects/openpgpjs/test/general/armor.js:\n   11    function getArmor(headers) {\n   12      return ['-----BEGIN PGP SIGNED MESSAGE-----']\n   13:       .concat(headers)\n   14:       .concat(\n   15          ['',\n   16          'sign this',\n   ..\n   64  \n   65    it('Non-hash header line throws exception', function () {\n   66:     var msg = getArmor(['Hash: SHA1', 'Comment: could be anything']);\n   67      msg = openpgp.cleartext.readArmored.bind(null, msg);\n   68      expect(msg).to.throw(Error, /Only \"Hash\" header allowed in cleartext signed message/);\n   ..\n  136        ['-----BEGIN PGP PRIVATE KEY BLOCK-----',\n  137        'Version: OpenPGP.js v0.3.0',\n  138:       'Comment: http://openpgpjs.org',\n  139        '',\n  140        'xbYEUubX7gEBANDWhzoP+Tr/IyRSv++vl5jBesQIPTYGQBdzF4YDnGEBABEB',\n  ...\n  162        ['-----BEGIN PGP PRIVATE KEY BLOCK-----\\t \\r',\n  163        'Version: OpenPGP.js v0.3.0',\n  164:       'Comment: http://openpgpjs.org',\n  165        '',\n  166        'xbYEUubX7gEBANDWhzoP+Tr/IyRSv++vl5jBesQIPTYGQBdzF4YDnGEBABEB',\n\n/Users/steph/Documents/projects/openpgpjs/test/general/hkp.js:\n   13    var pub_key = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n' +\n   14        'Version: SKS 1.1.5\\r\\n' +\n   15:       'Comment: Hostname: keyserver.ubuntu.com\\r\\n' +\n   16        '\\r\\n' +\n   17        'mQENBFUUKBcBCACwrPNnlBKPnwPXcjIdJUREoeeZx9Zw2mHPqZ3XJxq/zW38RUQgbTmjJjJv\\r\\n' +\n   ..\n   23        'BQJVFCgXBgsJCAcDAgkQRTDnvxQqhQQEFQgCCgMWAgECGwMCHgEAAAk9CACsT8cmBhWfNdEB\\r\\n' +\n   24        'jTwiCJUwnE6YzYmxMqDkkkDXThZa45g0Mh2vJPSNw+kjdb8KM1L9KrqGwyN7DbYvRhEZTCKN\\r\\n' +\n   25:       '1Z5Xk1DfTlqHyXbUvFedP7kO6d/tdH3e6uwSz/ZaDnV7eAO9Ixh9OfZbBweFeCo/LzKSkEUa\\r\\n' +\n   26        'bKNiZd925LfGhif7FLXlNeOFlTZ3PLf4RRtvQzWZsEWl3IlBJdg8NP4EdZPjoLC//o8gMuNQ\\r\\n' +\n   27:       'IxnHc+ZFGAJx/KfPy4el+4byvZ/1dkEO9XLbArJBKI+7gJY4PRRzcOyiHd2CHjW1F8EbJ1wB\\r\\n' +\n   28        'WSZhofi6ppTVUjVvNOZo4C7fyoYx4yOJgQRX4b2duQENBFUUKBcBCADGIbvJXq4eyr2ZslA3\\r\\n' +\n   29        'AJFIbu7GCkuz5N1ksaTIlgSa3mI20mkiUqdaqTT6K7of+G/QjBSHAgeP6Z7yJSXiQVMW+be5\\r\\n' +\n   ..\n   37        'pSRgO+w2ytdLoHk6a1FF6yen3wzLzSpciaTFaokIVS+Y7HarM9/TcgCPKQ3HbrtBQwtlyWtv\\r\\n' +\n   38        'OAvlmaptvt4+EU4Cxz5THVCI0SwaRVyHckThWFPVMbNVLLZBYx7DKPU7nvT7Mqh5e6r975kB\\r\\n' +\n   39:       'DQRVFBHJAQgAwt0+JmQHKg6tcORZeQJHYMAwyLnwSj+2OaaoVcjRzjOcrhm66gCCQe8ZgKFm\\r\\n' +\n   40        'X1rELXQaVq/RVabj3Kv9Lu1J/NKzOcqBRGFkL7VLj0v78XfBZK/pdedhn1mBAu85vpixrFGv\\r\\n' +\n   41        'sa6YBGepEP/Wggu+iei+WXlbdqln00xg9bj1MTKf7bB9a7mmyJ7/F7mWP6qsIT6te5ponr4N\\r\\n' +\n   ..\n   83        'Ds4BB/9iOF4THsjQMY+WEpT7ShgKxj4bHzRRaQkqczS4nZvP0U3gqeqCnbpagyeKXA+bhWFQ\\r\\n' +\n   84        'W4GmXtgAoeD5PXs6AZYrw3tWNxLKu2Oe6Tp9K/XIxTMQ2wl4qZKDXHvuPsJ7cmgaWqpPyXtx\\r\\n' +\n   85:       'A4zHHS3WrkI/6VzHAcI/y6x4szSBKgSuhI3hjh3s7TybUC1U6AfoQGx/S7e3WwlCOrK8GTCl\\r\\n' +\n   86        'irN/2mCPRC5wuIftnkoMfA6jK8d2OPrJ63shy5cgwHOjQg/xuk46dNS7tkvGmbaa+X0PgqSK\\r\\n' +\n   87        'B+HfYPPNS/ylg911DH9qa8BqYU2QpNh9jUKXSF+HbaOM+plWkCSAL7czV+R3ABEBAAG0LVdo\\r\\n' +\n   ..\n  108  \n  109    beforeEach(function() {\n  110:     hkp = new openpgp.HKP(openpgp.config.keyserver);\n  111    });\n  112  \n  ...\n  116      it('by email address should work', function(done) {\n  117        hkp.lookup({\n  118:         query: 'safewithme.testuser@gmail.com'\n  119        }).then(function(key) {\n  120          expect(key).to.exist;\n  ...\n  125      it('by email address should not find a key', function(done) {\n  126        hkp.lookup({\n  127:         query: 'safewithme.testuse@gmail.com'\n  128        }).then(function(key) {\n  129          expect(key).to.be.undefined;\n\n/Users/steph/Documents/projects/openpgpjs/test/general/key.js:\n   17          'YS9OAhsvBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQSmNhOk1uQJQwDAP6',\n   18          'AgrTyqkRlJVqz2pb46TfbDM2TDF7o9CBnBzIGoxBhlRwpqALz7z2kxBDmwpQa+ki',\n   19:         'Bq3jZN/UosY9y8bhwMAlnrDY9jP1gdCo+H0sD48CdXybblNwaYpwqC8VSpDdTndf',\n   20          '9j2wE/weihGp/DAdy/2kyBCaiOY1sjhUfJ1GogF49rC4jQRSYS9OAQQA6R/PtBFa',\n   21          'JaT4jq10yqASk4sqwVMsc6HcifM5lSdxzExFP74naUMMyEsKHP53QxTF0Grqusag',\n   22:         'Qg/ZtgT0CN1HUM152y7ACOdp1giKjpMzOTQClqCoclyvWOFB+L/SwGEIJf7LSCEr',\n   23          'woBuJifJc8xAVr0XX0JthoW+uP91eTQ3XpsAEQEAAYkBPQQYAQIACQUCUmEvTgIb',\n   24:         'LgCoCRBKY2E6TW5AlJ0gBBkBAgAGBQJSYS9OAAoJEOCE90RsICyXuqIEANmmiRCA',\n   25          'SF7YK7PvFkieJNwzeK0V3F2lGX+uu6Y3Q/Zxdtwc4xR+me/CSBmsURyXTO29OWhP',\n   26          'GLszPH9zSJU9BdDi6v0yNprmFPX/1Ng0Abn/sCkwetvjxC1YIvTLFwtUL/7v6NS2',\n   ..\n   43          'je16CP98vw3/k6TncLS5AQ0EUpXQVQEIAMEjHMeqg7B04FliUFWr/8C6sJDb492M',\n   44          'lGAWgghIbnuJfXAnUGdNoAzn0S+n93Y/qHbW6YcjHD4/G+kK3MuxthAFqcVjdHZQ',\n   45:         'XK0rkhXO/u1co7v1cdtkOTEcyOpyLXolM/1S2UYImhrml7YulTHMnWVja7xu6QIR',\n   46          'so+7HBFT/u9D47L/xXrXMzXFVZfBtVY+yoeTrOY3OX9cBMOAu0kuN9eT18Yv2yi6',\n   47          'XMzP3iONVHtl6HfFrAA7kAtx4ne0jgAPWZ+a8hMy59on2ZFs/AvSpJtSc1kw/vMT',\n   ..\n   63        'mQENBFKpincBCADhZjIihK15f3l+j87JgeLp9eUTSbn+g3gOFSR73TOMyBHMPt8O',\n   64        'KwuA+TN2sM86AooOR/2B2MjHBUZqrgeJe+sk5411yXezyYdQGZ8vlq/FeLeNF70D',\n   65:       'JrvIC6tsEe2F9F7ICO7o7G+k5yveLaYQNU/okiP8Gj79XW3wN77+yAMwpQzBsrwa',\n   66        'UO/X4mDV59h1DdrTuN4g8SZhAmY/JfT7YCZuQ8ivOs9n7xPdbGpIQWGWjJLVWziC',\n   67        '7uvxN4eFOlCqvc6JwmS/xyYGKL2B3RcQuY+OlvQ3wxKFEGDfG73HtWBd2soB7/7p',\n   ..\n  131        'PN40iJUDBRAvSgDsU5OkROGu2G8BAeUqBACbC45t4+wYxWCxxp81pkFRb8RWBvEvbXI+Spwd',\n  132        '4NcKs8jc5OVC8V02yiq4KbKFDRxdw2OWpUCSRAJe1gjsfFrZ+2RivpKk06kbAYthES03MjXg',\n  133:       'cfcV3z2d7IWanJzdcOlzsHzPe1+RoUAaqBjvcqPRCGRlk0ogkYHyWYxElc6574iVAwUQL9iL',\n  134        'CXr7ES8bepftAQGPywP/d9GSpEmS7LLIqazl4rgN1nkXN5KqduiH8Whu3xcBrdOAn7IYnGTp',\n  135        'O+Ag4qwKKH+y/ke9CeZL6AnrU9c0pux150dHsDeHtpTPyInkjgKI7BofprydvpiFNd0nlAi4',\n  ...\n  156      'H9zFiy54x7+zTov94SJE3xXppoQnIpeOTlFjTP2mjxm0VW1Dn9lGE3IFgWolpNPy',\n  157      'Rv6dnLQdU2Vjb25kIFVzZXIgPHNlY29uZEB1c2VyLmNvbT6IowQwAQIADQUCUrF1',\n  158:     'hwYdIEh1cnoACgkQSmNhOk1uQJRVeQP9GQoLvan5FMYcPPY4a9dNlkvtheRXcoif',\n  159      'oYdQoEyy9zAFCqmg2pC6RrHaMwNINw534JDh2vgWQ0MU3ktMJjSvGBBHayQc6ov8',\n  160      'i4I6rUPBlYoSDKyFnhCCXWF56bHMGyEGJhcQLv1hrGPVv6PTKj3hyR+2n50Impwo',\n  ...\n  173      'OFqfB4byISOIxL9LqFVRndbgOw7ICi+qE2e7+9G2koCtEkjpPg3ZCF4mfZiaLT9p',\n  174      'QhoFS4yxiJwEEAECAAYFAlKgqhYACgkQSmNhOk1uQJSJ0gP9F5RRwGBbXD4Mg4gq',\n  175:     'wcQYrzw9ZAapLKZ2vuco6gHknQAM1YuaOpKQu1rd6eFzKE4M11CLmoS/CalDhg9f',\n  176      'aN6fvTZG7lbUnSZKl/tgvG7qeneA919/b1RtMNDkHmRxvHysiyDYmkJYlmZlwXZB',\n  177      '5FBoRvv5b2oXfWLLEcNvUvbetuC5AQ0EUqCpdQEIAOMvycVLkIKm9EMbxFqGc019',\n  ...\n  185      'SPvOJXrK728b/OXKB3IaMknKTB7gLGH4oA9/dmzHgbeqNWXYok5GSwPxLSUoeIrZ',\n  186      'j+6DkUz2ebDx1FO797eibeL1Dn15iyWh/l3QMT+1fLjJyVDnEtNhZibMlDPohVuS',\n  187:     'suJfoKbQJkT6mRy4nDWsPLzFOt3VreJKXo9MMrrHV44XeOKo5nqCK3KsfCoeoqft',\n  188      'G7e/NP4DgcfkgNrU/XnBmR9ZVn9/o3EbDENniOVlNH2JaSQskspv5fv7k6dRWn4Q',\n  189      'NRhN5uMWiQEfBBgBAgAJBQJSoKl1AhsMAAoJEMB25jTTK0mNgaEIAKBkMGTSexox',\n  ...\n  194      'SU+DbbDHw3G97gRNE7QcHZPGyRtjbKv3nV2mJ8DMKrTzLuPUUcFqd7AlpdrFeDx/',\n  195      '8YM3DBS79eW5Ay4EUqCq0hEIAMIgqJsi3uTPzJw4b4c1Oue+O98jWaacrk7M57+y',\n  196:     'Ol209yRUDyLgojs8ZmEZWdvjBG1hr15FIYI4BmusVXHCokVDGv8KNP4pvbf5wljM',\n  197      '2KG1FAxvxZ38/VXTDVH8dOERTf8JPLKlSLbF6rNqfePIL/1wto47b6oRCdawIC25',\n  198      'ft6XX18WlE+dgIefbYcmc0BOgHTHf8YY04IIg67904/RRE6yAWS42Ibx4h1J/haP',\n  ...\n  214      'Da5k6Vf7F7ytbDAA/jb47AhgcDXQRcMw0ElTap5AP/JgtuglW/fO4cJxJfa8Yf0H',\n  215      '/i95k6w/MOn5CIwgpZyHc/F4bAVyaZmZ8gAT4lhn03ZDehFNrGJ0IhQH/QfqqNSp',\n  216:     'NqG8h7GQIH6ovJlLIcolszIL3khI7LhMsIS6Yi8xpPPB9QcqNmjYkuYAtPE2KyL+',\n  217      '2yBt+f4AJ/VFnBygcUf+AC6YxBS3cYclGKUAE9j6StRGj3kPNJPF7M5dZi+1+1Tu',\n  218      'yJ5ucX3iq+3GKLq98Lv7SPUxIqkxuZbkZIoX99Wqz8of9BUV2wTDvVXB7TEPC5Ho',\n  ...\n  245      'LsAI52nWCIqOkzM5NAKWoKhyXK9Y4UH4v9LAYQgl/stIISvCgG4mJ8lzzEBWvRdf',\n  246      'Qm2Ghb64/3V5NDdemwARAQAB/gMDAu7L//czBpE40iPcpLzL7GwBbWFhSWgSLy53',\n  247:     'Md99Kxw3cApWCok2E8R9/4VS0490xKZIa5y2I/K8thVhqk96Z8Kbt7MRMC1WLHgC',\n  248:     'qJvkeQCI6PrFM0PUIPLHAQtDJYKtaLXxYuexcAdKzZj3FHdtLNWCooK6n3vJlL1c',\n  249      'WjZcHJ1PH7USlj1jup4XfxsbziuysRUSyXkjn92GZLm+64vCIiwhqAYoizF2NHHG',\n  250      'hRTN4gQzxrxgkeVchl+ag7DkQUDANIIVI+A63JeLJgWJiH1fbYlwESByHW+zBFNt',\n  ...\n  272      'YS9OAhsvBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQSmNhOk1uQJQwDAP6',\n  273      'AgrTyqkRlJVqz2pb46TfbDM2TDF7o9CBnBzIGoxBhlRwpqALz7z2kxBDmwpQa+ki',\n  274:     'Bq3jZN/UosY9y8bhwMAlnrDY9jP1gdCo+H0sD48CdXybblNwaYpwqC8VSpDdTndf',\n  275      '9j2wE/weihGp/DAdy/2kyBCaiOY1sjhUfJ1GogF49rDRwc7BzAEQAAEBAAAAAAAA',\n  276      'AAAAAAAA/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQN',\n  ...\n  279      'MjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAAFABQDASIAAhEBAxEB/8QAHwAAAQUB',\n  280      'AQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQID',\n  281:     'AAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0',\n  282      'NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKT',\n  283      'lJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl',\n  ...\n  322      'nzOcRPuCHkCfy4C97qFlwZ2Tb2mDgwZYvACfvU7L5BY68WNnq0GKP5eZzM/Ge0xd',\n  323      'NU8oSSzQ2E5A6clW8Y4xUymhwcpG2CzfbFpA/dVobM4wplD5BPkyJsgWIgnRO9Lo',\n  324:     'VF83+7kBDQRTY6KNAQgA6tnPjznr7HHcoEFXNRC+LEkDOLAm5kTU9MY+2joJyHG7',\n  325      'XmEAhPRt4Cp5Fq79sXPvGZ6tQnD8NVvqc3+91ThTLLKCIRdLOunIGIEJdCr7gN49',\n  326      'kgDYisWxt7QQIsv7Q0SqbGJa7F/jPj5EDf36XJlACJy1yfP6KI6NunffLa23BUU0',\n  327      't0S/TWqq4185nQczJ1JnZItyyBIyIWXrNtz56B/mIDvIU56SxxpsrcYctAT68vW0',\n  328      'njyQ7XRNIzsmvn4o+H9YHnSz3VdXeJaXd7TdU+WLT2lbgzF5BvDN3AlJI8jiONfu',\n  329:     '0rW9oBmHsQdjDcOlWdExsCx5Lz7+La7EK/mX0rUVeQARAQABiQJBBBgBAgErBQJT',\n  330      'Y6KPBRsMAAAAwF0gBBkBCAAGBQJTY6KOAAoJED0FhXx5gwvfTzoH/3j1tYLvkjM+',\n  331      'XghFCzRWDKB7qMzY1kRFV2TNQALnnu1sdUOrs4bQ3w2/viMp2uMqAyU/2WK1CDum',\n  ...\n  368      'ZOrysjcAC9TdqySvWEilEGsn/mu6/tnmZNaViDWlzah6mRgaz3Z+m2NkfcJbn/ZH',\n  369      'VHWfOZEku5mNtB1QR1AgRGVza3RvcCAxMC4zIDxwZ3BAc3ltLmRlPp0DxgRTY6KN',\n  370:     'AQgA6tnPjznr7HHcoEFXNRC+LEkDOLAm5kTU9MY+2joJyHG7XmEAhPRt4Cp5Fq79',\n  371      'sXPvGZ6tQnD8NVvqc3+91ThTLLKCIRdLOunIGIEJdCr7gN49kgDYisWxt7QQIsv7',\n  372      'Q0SqbGJa7F/jPj5EDf36XJlACJy1yfP6KI6NunffLa23BUU0t0S/TWqq4185nQcz',\n  373      'J1JnZItyyBIyIWXrNtz56B/mIDvIU56SxxpsrcYctAT68vW0njyQ7XRNIzsmvn4o',\n  374:     '+H9YHnSz3VdXeJaXd7TdU+WLT2lbgzF5BvDN3AlJI8jiONfu0rW9oBmHsQdjDcOl',\n  375      'WdExsCx5Lz7+La7EK/mX0rUVeQARAQAB/gkDAm8zCrvNFCfycCMEudU+3gQFw9Vw',\n  376      'YP5SEAiCwegbNw/RsPXxIy6nzFbKMP9qN8SApFwhuz9qf6SeeSafNtXLDz1dZEQd',\n  ...\n  439      var packetlist = new openpgp.packet.List();\n  440  \n  441:     packetlist.read(openpgp.armor.decode(pub_sig_test).data);\n  442  \n  443      var subkeys = pubKey.getSubkeyPackets();\n  ...\n  615      key2.getPrimaryUser().selfCertificate.preferredSymmetricAlgorithms = null;\n  616      var prefAlgo = openpgp.key.getPreferredSymAlgo([key1, key2]);\n  617:     expect(prefAlgo).to.equal(openpgp.config.encryption_cipher);\n  618    });\n  619  \n  ...\n  624        expect(key.users[0].selfCertifications[0].keyFlags[0] & keyFlags.certify_keys).to.equal(keyFlags.certify_keys);\n  625        expect(key.users[0].selfCertifications[0].keyFlags[0] & keyFlags.sign_data).to.equal(keyFlags.sign_data);\n  626:       expect(key.subKeys[0].bindingSignature.keyFlags[0] & keyFlags.encrypt_communication).to.equal(keyFlags.encrypt_communication);\n  627        expect(key.subKeys[0].bindingSignature.keyFlags[0] & keyFlags.encrypt_storage).to.equal(keyFlags.encrypt_storage);\n  628        var sym = openpgp.enums.symmetric;\n  ...\n  630        var hash = openpgp.enums.hash;\n  631        expect(key.users[0].selfCertifications[0].preferredHashAlgorithms).to.eql([hash.sha256, hash.sha1, hash.sha512]);\n  632:       var compr = openpgp.enums.compression;\n  633:       expect(key.users[0].selfCertifications[0].preferredCompressionAlgorithms).to.eql([compr.zlib, compr.zip]);\n  634:       expect(key.users[0].selfCertifications[0].features).to.eql(openpgp.config.integrity_protect ? [1] : null); // modification detection\n  635      };\n  636:     var opt = {numBits: 512, userIds: 'test <a@b.com>', passphrase: 'hello'};\n  637      if (openpgp.util.getWebCrypto()) { opt.numBits = 2048; } // webkit webcrypto accepts minimum 2048 bit keys\n  638      openpgp.generateKey(opt).then(function(key) {\n  ...\n  653      var primUser = key.getPrimaryUser();\n  654      expect(primUser).to.exist;\n  655:     expect(primUser.user.userId.userid).to.equal('Signature Test <signature@test.com>');\n  656      expect(primUser.selfCertificate).to.be.an.instanceof(openpgp.packet.Signature);\n  657    });\n  658  \n  659    it('Generated key is not unlocked by default', function(done) {\n  660:     var opt = {numBits: 512, userIds: 'test <a@b.com>', passphrase: '123'};\n  661      if (openpgp.util.getWebCrypto()) { opt.numBits = 2048; } // webkit webcrypto accepts minimum 2048 bit keys\n  662      openpgp.generateKey(opt).then(function(key) {\n  ...\n  669  \n  670    it('Generate key - single userid', function(done) {\n  671:     var userId = 'test <a@b.com>';\n  672      var opt = {numBits: 512, userIds: userId, passphrase: '123'};\n  673      if (openpgp.util.getWebCrypto()) { opt.numBits = 2048; } // webkit webcrypto accepts minimum 2048 bit keys\n  ...\n  681  \n  682    it('Generate key - multi userid', function(done) {\n  683:     var userId1 = 'test <a@b.com>';\n  684:     var userId2 = 'test <b@c.com>';\n  685      var opt = {numBits: 512, userIds: [userId1, userId2], passphrase: '123'};\n  686      if (openpgp.util.getWebCrypto()) { opt.numBits = 2048; } // webkit webcrypto accepts minimum 2048 bit keys\n\n/Users/steph/Documents/projects/openpgpjs/test/general/keyring.js:\n   15      pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\n' +\n   16        'Version: OpenPGP.js v.1.20131011\\n' +\n   17:       'Comment: http://openpgpjs.org\\n' +\n   18        '\\n' +\n   19        'xk0EUlhMvAEB/2MZtCUOAYvyLFjDp3OBMGn3Ev8FwjzyPbIF0JUw+L7y2XR5\\n' +\n   ..\n   26      privkey = '-----BEGIN PGP PRIVATE KEY BLOCK-----\\n' +\n   27        'Version: OpenPGP.js v.1.20131011\\n' +\n   28:       'Comment: http://openpgpjs.org\\n' +\n   29        '\\n' +\n   30        'xcBeBFJYTLwBAf9jGbQlDgGL8ixYw6dzgTBp9xL/BcI88j2yBdCVMPi+8tl0\\n' +\n   ..\n   48        'Version: GnuPG v2.0.22 (GNU/Linux)',\n   49        '',\n   50:       'mQMuBFLVgdQRCACOlpq0cd1IazNjOEpWPZvx/O3JMbdDs3B3iCG0Mo5OUZ8lpKU5',\n   51        'EslVgTd8IcUU14ZMOO7y91dw0KP4q61b4OIy7oVxzfFfKCC1s0Dc7GTay+qo5afJ',\n   52        'wbWcgTyCIahTRmi5UepU7xdRHRMlqAclOwY2no8fw0JRQfFwRFCjbMdmvzC/k+Wo',\n   ..\n   69        'C1rQ5qiWpFq9UNTFg2P/gASvAP92TzUMLK2my8ew1xXShtrfXked5fkSuFrPlZBs',\n   70        'b4Ta67kCDQRS1YHUEAgAxOKx4y5QD78uPLlgNBHXrcncUNBIt4IXBGjQTxpFcn5j',\n   71:       'rSuj+ztvXJQ8wCkx+TTb2yuL5M+nXd7sx4s+M4KZ/MZfI6ZX4lhcoUdAbB9FWiV7',\n   72        'uNntyeFo8qgGM5at/Q0EsyzMSqbeBxk4bpd5MfYGThn0Ae2xaw3X94KaZ3LjtHo2',\n   73:       'V27FD+jvmmoAj9b1+zcO/pJ8SuojQmcnS4VDVV+Ba5WPTav0LzDdQXyGMZI9PDxC',\n   74        'jAI2f1HjTuxIt8X8rAQSQdoMIcQRYEjolsXS6iob1eVigyL86hLJjI3VPn6kBCv3',\n   75        'Tb+WXX+9LgSAt9yvv4HMwBLK33k6IH7M72SqQulZywADBQgAt2xVTMjdVyMniMLj',\n   ..\n   77        'zn4cGKDL2dmwk2ZBeXWZDgGKoKvGKYf8PRpTAYweFzol3OUdfXH5SngOylCD4OCL',\n   78        's4RSVkSsllIWqLpnS5IJFgt6PDVcQgGXo2ZhVYkoLNhWTIEBuJWIyc4Vj20YpTms',\n   79:       'lgHnjeq5rP6781MwAJQnViyJ2SziGK4/+3CoDiQLO1zId42otXBvsbUuLSL5peX4',\n   80        'v2XNVMLJMY5iSfzbBWczecyapiQ3fbVtWgucgrqlrqM3546v+GdATBhGOu8ppf5j',\n   81        '7d1A7ohhBBgRCAAJBQJS1YHUAhsMAAoJELqZP8Ku4Yo6SgoBAIVcZstwz4lyA2et',\n   82:       'y61IhKbJCOlQxyem+kepjNapkhKDAQDIDL38bZWU4Rm0nq82Xb4yaI0BCWDcFkHV',\n   83        'og2umGfGng==',\n   84        '=v3+L',\n   ..\n   95        'AgkQ7SQeHedV1TwEFQgCCgMWAgECGQECGwMCHgEAAGJmBACVJPoFtW96UkIW',\n   96        'GX1bgW99c4K87Me+5ZCHqPOdXFpRinAPBdJT9vkBWLb/aOQQCDWJvdVXKFLD',\n   97:       'FCbSBjcohR71n6145F5im8b0XzXnKh+MRRv/0UHiHGtB/Pkg38jbLeXbVfCM',\n   98:       '9JJm+s+PFef+8wN84sEtD/MX2cj61teuPf2VEs6NBFXusGsBBACoJW/0y5Ea',\n   99        'FH0nJOuoenrEBZkFtGbdwo8A4ufCCrm9ppFHVVnw4uTPH9dOjw8IAnNy7wA8',\n  100        '8yZCkreQ491em09knR7k2YdJccWwW8mGRILHQDDEPetZO1dSVW+MA9X7Pcle',\n  ...\n  195  \n  196    it('publicKeys.getForAddress() - unknown address', function() {\n  197:     var keys = keyring.publicKeys.getForAddress('nobody@example.com');\n  198      expect(keys).to.be.empty;\n  199    });\n  ...\n  222  \n  223    it('privateKeys.getForAddress() - unknown address', function() {\n  224:     var key = keyring.privateKeys.getForAddress('nobody@example.com');\n  225      expect(key).to.be.empty;\n  226    });\n\n/Users/steph/Documents/projects/openpgpjs/test/general/openpgp.js:\n   19    'YS9OAhsvBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQSmNhOk1uQJQwDAP6',\n   20    'AgrTyqkRlJVqz2pb46TfbDM2TDF7o9CBnBzIGoxBhlRwpqALz7z2kxBDmwpQa+ki',\n   21:   'Bq3jZN/UosY9y8bhwMAlnrDY9jP1gdCo+H0sD48CdXybblNwaYpwqC8VSpDdTndf',\n   22    '9j2wE/weihGp/DAdy/2kyBCaiOY1sjhUfJ1GogF49rC4jQRSYS9OAQQA6R/PtBFa',\n   23    'JaT4jq10yqASk4sqwVMsc6HcifM5lSdxzExFP74naUMMyEsKHP53QxTF0Grqusag',\n   24:   'Qg/ZtgT0CN1HUM152y7ACOdp1giKjpMzOTQClqCoclyvWOFB+L/SwGEIJf7LSCEr',\n   25    'woBuJifJc8xAVr0XX0JthoW+uP91eTQ3XpsAEQEAAYkBPQQYAQIACQUCUmEvTgIb',\n   26:   'LgCoCRBKY2E6TW5AlJ0gBBkBAgAGBQJSYS9OAAoJEOCE90RsICyXuqIEANmmiRCA',\n   27    'SF7YK7PvFkieJNwzeK0V3F2lGX+uu6Y3Q/Zxdtwc4xR+me/CSBmsURyXTO29OWhP',\n   28    'GLszPH9zSJU9BdDi6v0yNprmFPX/1Ng0Abn/sCkwetvjxC1YIvTLFwtUL/7v6NS2',\n   ..\n   57    'LsAI52nWCIqOkzM5NAKWoKhyXK9Y4UH4v9LAYQgl/stIISvCgG4mJ8lzzEBWvRdf',\n   58    'Qm2Ghb64/3V5NDdemwARAQAB/gMDAu7L//czBpE40iPcpLzL7GwBbWFhSWgSLy53',\n   59:   'Md99Kxw3cApWCok2E8R9/4VS0490xKZIa5y2I/K8thVhqk96Z8Kbt7MRMC1WLHgC',\n   60:   'qJvkeQCI6PrFM0PUIPLHAQtDJYKtaLXxYuexcAdKzZj3FHdtLNWCooK6n3vJlL1c',\n   61    'WjZcHJ1PH7USlj1jup4XfxsbziuysRUSyXkjn92GZLm+64vCIiwhqAYoizF2NHHG',\n   62    'hRTN4gQzxrxgkeVchl+ag7DkQUDANIIVI+A63JeLJgWJiH1fbYlwESByHW+zBFNt',\n   ..\n   78    'Version: GnuPG v2.0.22 (GNU/Linux)',\n   79    '',\n   80:   'mQMuBFLVgdQRCACOlpq0cd1IazNjOEpWPZvx/O3JMbdDs3B3iCG0Mo5OUZ8lpKU5',\n   81    'EslVgTd8IcUU14ZMOO7y91dw0KP4q61b4OIy7oVxzfFfKCC1s0Dc7GTay+qo5afJ',\n   82    'wbWcgTyCIahTRmi5UepU7xdRHRMlqAclOwY2no8fw0JRQfFwRFCjbMdmvzC/k+Wo',\n   ..\n   99    'C1rQ5qiWpFq9UNTFg2P/gASvAP92TzUMLK2my8ew1xXShtrfXked5fkSuFrPlZBs',\n  100    'b4Ta67kCDQRS1YHUEAgAxOKx4y5QD78uPLlgNBHXrcncUNBIt4IXBGjQTxpFcn5j',\n  101:   'rSuj+ztvXJQ8wCkx+TTb2yuL5M+nXd7sx4s+M4KZ/MZfI6ZX4lhcoUdAbB9FWiV7',\n  102    'uNntyeFo8qgGM5at/Q0EsyzMSqbeBxk4bpd5MfYGThn0Ae2xaw3X94KaZ3LjtHo2',\n  103:   'V27FD+jvmmoAj9b1+zcO/pJ8SuojQmcnS4VDVV+Ba5WPTav0LzDdQXyGMZI9PDxC',\n  104    'jAI2f1HjTuxIt8X8rAQSQdoMIcQRYEjolsXS6iob1eVigyL86hLJjI3VPn6kBCv3',\n  105    'Tb+WXX+9LgSAt9yvv4HMwBLK33k6IH7M72SqQulZywADBQgAt2xVTMjdVyMniMLj',\n  ...\n  107    'zn4cGKDL2dmwk2ZBeXWZDgGKoKvGKYf8PRpTAYweFzol3OUdfXH5SngOylCD4OCL',\n  108    's4RSVkSsllIWqLpnS5IJFgt6PDVcQgGXo2ZhVYkoLNhWTIEBuJWIyc4Vj20YpTms',\n  109:   'lgHnjeq5rP6781MwAJQnViyJ2SziGK4/+3CoDiQLO1zId42otXBvsbUuLSL5peX4',\n  110    'v2XNVMLJMY5iSfzbBWczecyapiQ3fbVtWgucgrqlrqM3546v+GdATBhGOu8ppf5j',\n  111    '7d1A7ohhBBgRCAAJBQJS1YHUAhsMAAoJELqZP8Ku4Yo6SgoBAIVcZstwz4lyA2et',\n  112:   'y61IhKbJCOlQxyem+kepjNapkhKDAQDIDL38bZWU4Rm0nq82Xb4yaI0BCWDcFkHV',\n  113    'og2umGfGng==',\n  114    '=v3+L',\n  ...\n  119    'Version: GnuPG v2.0.22 (GNU/Linux)',\n  120    '',\n  121:   'lQN5BFLVgdQRCACOlpq0cd1IazNjOEpWPZvx/O3JMbdDs3B3iCG0Mo5OUZ8lpKU5',\n  122    'EslVgTd8IcUU14ZMOO7y91dw0KP4q61b4OIy7oVxzfFfKCC1s0Dc7GTay+qo5afJ',\n  123    'wbWcgTyCIahTRmi5UepU7xdRHRMlqAclOwY2no8fw0JRQfFwRFCjbMdmvzC/k+Wo',\n  ...\n  142    'TzUMLK2my8ew1xXShtrfXked5fkSuFrPlZBsb4Ta650CYwRS1YHUEAgAxOKx4y5Q',\n  143    'D78uPLlgNBHXrcncUNBIt4IXBGjQTxpFcn5jrSuj+ztvXJQ8wCkx+TTb2yuL5M+n',\n  144:   'Xd7sx4s+M4KZ/MZfI6ZX4lhcoUdAbB9FWiV7uNntyeFo8qgGM5at/Q0EsyzMSqbe',\n  145:   'Bxk4bpd5MfYGThn0Ae2xaw3X94KaZ3LjtHo2V27FD+jvmmoAj9b1+zcO/pJ8Suoj',\n  146    'QmcnS4VDVV+Ba5WPTav0LzDdQXyGMZI9PDxCjAI2f1HjTuxIt8X8rAQSQdoMIcQR',\n  147    'YEjolsXS6iob1eVigyL86hLJjI3VPn6kBCv3Tb+WXX+9LgSAt9yvv4HMwBLK33k6',\n  ...\n  150    'KYf8PRpTAYweFzol3OUdfXH5SngOylCD4OCLs4RSVkSsllIWqLpnS5IJFgt6PDVc',\n  151    'QgGXo2ZhVYkoLNhWTIEBuJWIyc4Vj20YpTmslgHnjeq5rP6781MwAJQnViyJ2Szi',\n  152:   'GK4/+3CoDiQLO1zId42otXBvsbUuLSL5peX4v2XNVMLJMY5iSfzbBWczecyapiQ3',\n  153    'fbVtWgucgrqlrqM3546v+GdATBhGOu8ppf5j7d1A7v4DAwJta87fJ43wicncdV+Y',\n  154    '7ess/j8Rx6/4Jt7ptmRjJNRNbB0ORLZ5BA9544qzAWNtfPOs2PUEDT1L+ChXfD4w',\n  ...\n  213      it('should fail for invalid user name', function() {\n  214        var opt = {\n  215:         userIds: [{ name: {}, email: 'text@example.com' }]\n  216        };\n  217        var test = openpgp.generateKey.bind(null, opt);\n  ...\n  221      it('should fail for invalid user email address', function() {\n  222        var opt = {\n  223:         userIds: [{ name: 'Test User', email: 'textexample.com' }]\n  224        };\n  225        var test = openpgp.generateKey.bind(null, opt);\n  ...\n  229      it('should fail for invalid user email address', function() {\n  230        var opt = {\n  231:         userIds: [{ name: 'Test User', email: 'text@examplecom' }]\n  232        };\n  233        var test = openpgp.generateKey.bind(null, opt);\n  ...\n  237      it('should fail for invalid string user id', function() {\n  238        var opt = {\n  239:         userIds: ['Test User text@example.com>']\n  240        };\n  241        var test = openpgp.generateKey.bind(null, opt);\n  ...\n  245      it('should fail for invalid single string user id', function() {\n  246        var opt = {\n  247:         userIds: 'Test User text@example.com>'\n  248        };\n  249        var test = openpgp.generateKey.bind(null, opt);\n  ...\n  253      it('should work for valid single string user id', function(done) {\n  254        var opt = {\n  255:         userIds: 'Test User <text@example.com>'\n  256        };\n  257        openpgp.generateKey(opt).then(function() { done(); });\n  ...\n  260      it('should work for valid string user id', function(done) {\n  261        var opt = {\n  262:         userIds: ['Test User <text@example.com>']\n  263        };\n  264        openpgp.generateKey(opt).then(function() { done(); });\n  ...\n  267      it('should work for valid single user id hash', function(done) {\n  268        var opt = {\n  269:         userIds: { name: 'Test User', email: 'text@example.com' }\n  270        };\n  271        openpgp.generateKey(opt).then(function() { done(); });\n  ...\n  274      it('should work for valid single user id hash', function(done) {\n  275        var opt = {\n  276:         userIds: [{ name: 'Test User', email: 'text@example.com' }]\n  277        };\n  278        openpgp.generateKey(opt).then(function() { done(); });\n  ...\n  281      it('should work for an empty name', function(done) {\n  282        var opt = {\n  283:         userIds: { email: 'text@example.com' }\n  284        };\n  285        openpgp.generateKey(opt).then(function() { done(); });\n  ...\n  295      it('should have default params set', function(done) {\n  296        var opt = {\n  297:         userIds: { name: 'Test User', email: 'text@example.com' },\n  298          passphrase: 'secret',\n  299          unlocked: true\n  ...\n  301        openpgp.generateKey(opt).then(function(newKey) {\n  302          expect(keyGenStub.withArgs({\n  303:           userIds: ['Test User <text@example.com>'],\n  304            passphrase: 'secret',\n  305            numBits: 2048,\n  ...\n  365  \n  366      beforeEach(function() {\n  367:       useNativeVal = openpgp.config.useNative;\n  368      });\n  369  \n  370      afterEach(function() {\n  371:       openpgp.config.useNative = useNativeVal;\n  372        openpgp.destroyWorker();\n  373      });\n  374  \n  375      it('should work in JS (without worker)', function(done) {\n  376:       openpgp.config.useNative = false;\n  377        openpgp.destroyWorker();\n  378        var opt = {\n  379:         userIds: [{ name: 'Test User', email: 'text@example.com' }],\n  380          numBits: 512\n  381        };\n  382  \n  383        openpgp.generateKey(opt).then(function(newKey) {\n  384:         expect(newKey.key.getUserIds()[0]).to.equal('Test User <text@example.com>');\n  385          expect(newKey.publicKeyArmored).to.match(/^-----BEGIN PGP PUBLIC/);\n  386          expect(newKey.privateKeyArmored).to.match(/^-----BEGIN PGP PRIVATE/);\n  ...\n  390  \n  391      it('should work in JS (with worker)', function(done) {\n  392:       openpgp.config.useNative = false;\n  393        openpgp.initWorker({ path:'../dist/openpgp.worker.js' });\n  394        var opt = {\n  395:         userIds: [{ name: 'Test User', email: 'text@example.com' }],\n  396          numBits: 512\n  397        };\n  398  \n  399        openpgp.generateKey(opt).then(function(newKey) {\n  400:         expect(newKey.key.getUserIds()[0]).to.equal('Test User <text@example.com>');\n  401          expect(newKey.publicKeyArmored).to.match(/^-----BEGIN PGP PUBLIC/);\n  402          expect(newKey.privateKeyArmored).to.match(/^-----BEGIN PGP PRIVATE/);\n  ...\n  406  \n  407      it('should work in with native crypto', function(done) {\n  408:       openpgp.config.useNative = true;\n  409        var opt = {\n  410:         userIds: [{ name: 'Test User', email: 'text@example.com' }],\n  411          numBits: 512\n  412        };\n  ...\n  414  \n  415        openpgp.generateKey(opt).then(function(newKey) {\n  416:         expect(newKey.key.getUserIds()[0]).to.equal('Test User <text@example.com>');\n  417          expect(newKey.publicKeyArmored).to.match(/^-----BEGIN PGP PUBLIC/);\n  418          expect(newKey.privateKeyArmored).to.match(/^-----BEGIN PGP PRIVATE/);\n  ...\n  423  \n  424    describe('encrypt, decrypt, sign, verify - integration tests', function() {\n  425:     var privateKey, publicKey, zeroCopyVal;\n  426  \n  427      beforeEach(function() {\n  ...\n  432        expect(privateKey.keys).to.have.length(1);\n  433        expect(privateKey.err).to.not.exist;\n  434:       zeroCopyVal = openpgp.config.zeroCopy;\n  435      });\n  436  \n  437      afterEach(function() {\n  438:       openpgp.config.zeroCopy = zeroCopyVal;\n  439      });\n  440  \n  ...\n  443      });\n  444  \n  445:     it('Decrypting key with correct passphrase returns true', function () {\n  446        expect(privateKey.keys[0].decrypt(passphrase)).to.be.true;\n  447      });\n  ...\n  456  \n  457      function tests() {\n  458:       it('Configuration', function(done){\n  459:         openpgp.config.show_version = false;\n  460:         openpgp.config.commentstring = 'different';\n  461          openpgp.encrypt({ publicKeys:publicKey.keys, data:plaintext }).then(function(encrypted) {\n  462            expect(encrypted.data).to.exist;\n  463            expect(encrypted.data).not.to.match(/^Version:/);\n  464:           expect(encrypted.data).to.match(/Comment: different/);\n  465            done();\n  466          });\n  ...\n  468  \n  469        it('Calling decrypt with not decrypted key leads to exception', function (done) {\n  470:         var encOpt = {\n  471            data: plaintext,\n  472            publicKeys: publicKey.keys,\n  473          };\n  474:         var decOpt = {\n  475            privateKey: privateKey.keys[0]\n  476          };\n  477:         openpgp.encrypt(encOpt).then(function(encrypted) {\n  478:           decOpt.message = openpgp.message.readArmored(encrypted.data);\n  479:           return openpgp.decrypt(decOpt);\n  480          }).catch(function(error) {\n  481            expect(error.message).to.match(/not decrypted/);\n  ...\n  485  \n  486        describe('decryptKey', function() {\n  487:         it('should work for correct passphrase', function(done) {\n  488            openpgp.decryptKey({\n  489              privateKey: privateKey.keys[0],\n  ...\n  496          });\n  497  \n  498:         it('should fail for incorrect passphrase', function(done) {\n  499            openpgp.decryptKey({\n  500              privateKey: privateKey.keys[0],\n  501:             passphrase: 'incorrect'\n  502            }).catch(function(error){\n  503              expect(error.message).to.match(/Invalid passphrase/);\n  ...\n  598          var wrong_pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n' +\n  599            'Version: OpenPGP.js v0.9.0\\r\\n' +\n  600:           'Comment: Hoodiecrow - https://hoodiecrow.com\\r\\n' +\n  601            '\\r\\n' +\n  602            'xk0EUlhMvAEB/2MZtCUOAYvyLFjDp3OBMGn3Ev8FwjzyPbIF0JUw+L7y2XR5\\r\\n' +\n  ...\n  613  \n  614          it('should encrypt then decrypt', function(done) {\n  615:           var encOpt = {\n  616              data: plaintext,\n  617              publicKeys: publicKey.keys,\n  618            };\n  619:           var decOpt = {\n  620              privateKey: privateKey.keys[0]\n  621            };\n  622:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  623              expect(encrypted.data).to.match(/^-----BEGIN PGP MESSAGE/);\n  624:             decOpt.message = openpgp.message.readArmored(encrypted.data);\n  625:             return openpgp.decrypt(decOpt);\n  626            }).then(function(decrypted) {\n  627              expect(decrypted.data).to.equal(plaintext);\n  ...\n  632  \n  633          it('should encrypt/sign and decrypt/verify', function(done) {\n  634:           var encOpt = {\n  635              data: plaintext,\n  636              publicKeys: publicKey.keys,\n  637              privateKeys: privateKey.keys\n  638            };\n  639:           var decOpt = {\n  640              privateKey: privateKey.keys[0],\n  641              publicKeys: publicKey.keys\n  642            };\n  643:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  644:             decOpt.message = openpgp.message.readArmored(encrypted.data);\n  645:             return openpgp.decrypt(decOpt);\n  646            }).then(function(decrypted) {\n  647              expect(decrypted.data).to.equal(plaintext);\n  ...\n  653  \n  654          it('should fail to verify decrypted data with wrong public pgp key', function(done) {\n  655:           var encOpt = {\n  656              data: plaintext,\n  657              publicKeys: publicKey.keys,\n  658              privateKeys: privateKey.keys\n  659            };\n  660:           var decOpt = {\n  661              privateKey: privateKey.keys[0],\n  662              publicKeys: openpgp.key.readArmored(wrong_pubkey).keys\n  663            };\n  664:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  665:             decOpt.message = openpgp.message.readArmored(encrypted.data);\n  666:             return openpgp.decrypt(decOpt);\n  667            }).then(function(decrypted) {\n  668              expect(decrypted.data).to.equal(plaintext);\n  ...\n  760              ['-----BEGIN PGP MESSAGE-----',\n  761              'Version: GnuPG/MacGPG2 v2.0.19 (Darwin)',\n  762:             'Comment: GPGTools - http://gpgtools.org',\n  763              '',\n  764              'hIwDBU4Dycfvp2EBA/9tuhQgOrcATcm2PRmIOcs6q947YhlsBTZZdVJDfVjkKlyM',\n  ...\n  773              ['-----BEGIN PGP PRIVATE KEY BLOCK-----',\n  774              'Version: GnuPG/MacGPG2 v2.0.19 (Darwin)',\n  775:             'Comment: GPGTools - http://gpgtools.org',\n  776              '',\n  777:             'lQH+BFLqLegBBAC/rN3g30Jrcpx5lTb7Kxe+ZfS7ppOIoBjjN+qcOh81cJJVS5dT',\n  778              'UGcDsm2tCLVS3P2dGaYhfU9fsoSq/wK/tXsdoWXvXdjHbbueyi1kTZqlnyT190UE',\n  779              'vmDxH0yqquvUaf7+CNXC0T6l9gGS9p0x7xNydWRb7zeK1wIsYI+dRGQmzQARAQAB',\n  ...\n  803              'nwQYAQIACQUCUuot6AIbDAAKCRCSTaGiPl24PwYAA/sGIHvCKWP5+4ZlBHuOdbP9',\n  804              '9v3PXFCm61qFEL0DTSq7NgBcuf0ASRElRI3wIKlfkwaiSzVPfNLiMTexdc7XaiTz',\n  805:             'CHaOn1Xl2gmYTq2KiJkgtLuwptYU1iSj7vvSHKy0+nYIckOZB4pRCOjknT08O4ZJ',\n  806              '22q10ausyQXoOxXfDWVwKA==',\n  807              '=IkKW',\n  ...\n  824        describe('AES encrypt, decrypt', function() {\n  825          it('should encrypt and decrypt with one password', function(done) {\n  826:           var encOpt = {\n  827              data: plaintext,\n  828              passwords: password1\n  829            };\n  830:           var decOpt = {\n  831              password: password1\n  832            };\n  833:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  834:             decOpt.message = openpgp.message.readArmored(encrypted.data);\n  835:             return openpgp.decrypt(decOpt);\n  836            }).then(function(decrypted) {\n  837              expect(decrypted.data).to.equal(plaintext);\n  ...\n  841  \n  842          it('should encrypt and decrypt with two passwords', function(done) {\n  843:           var encOpt = {\n  844              data: plaintext,\n  845              passwords: [password1, password2]\n  846            };\n  847:           var decOpt = {\n  848              password: password2\n  849            };\n  850:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  851:             decOpt.message = openpgp.message.readArmored(encrypted.data);\n  852:             return openpgp.decrypt(decOpt);\n  853            }).then(function(decrypted) {\n  854              expect(decrypted.data).to.equal(plaintext);\n  ...\n  858  \n  859          it('should encrypt and decrypt with password and not ascii armor', function(done) {\n  860:           var encOpt = {\n  861              data: plaintext,\n  862              passwords: password1,\n  863              armor: false\n  864            };\n  865:           var decOpt = {\n  866              password: password1\n  867            };\n  868:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  869:             decOpt.message = encrypted.message;\n  870:             return openpgp.decrypt(decOpt);\n  871            }).then(function(decrypted) {\n  872              expect(decrypted.data).to.equal(plaintext);\n  ...\n  876  \n  877          it('should encrypt and decrypt with binary data and transferable objects', function(done) {\n  878:           openpgp.config.zeroCopy = true; // activate transferable objects\n  879:           var encOpt = {\n  880              data: new Uint8Array([0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01]),\n  881              passwords: password1,\n  882              armor: false\n  883            };\n  884:           var decOpt = {\n  885              password: password1,\n  886              format: 'binary'\n  887            };\n  888:           openpgp.encrypt(encOpt).then(function(encrypted) {\n  889:             decOpt.message = encrypted.message;\n  890:             return openpgp.decrypt(decOpt);\n  891            }).then(function(decrypted) {\n  892              if (openpgp.getWorker()) {\n  893:               expect(encOpt.data.byteLength).to.equal(0); // transfered buffer should be empty\n  894              }\n  895              expect(decrypted.data).to.deep.equal(new Uint8Array([0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01]));\n\n/Users/steph/Documents/projects/openpgpjs/test/general/packet.js:\n   10    var result = [];\n   11    for (var i = 0; i < array.length; i++) {\n   12:     result[i] = String.fromCharCode(array[i]);\n   13    }\n   14    return result.join('');\n   ..\n   33        'Uor5schwwdD3oRoLGcJZfR6Dyu9dCYdQSDWj+IQs95hJQfHNcfj7XFtTyOi7Kxx0\\n' +\n   34        'Jxio9De84QnxNAoNYuLtwkaRgkUVKVph2nYWJfAJunuMMosM2WdcidHJ5d6RIdxB\\n' +\n   35:       'U6o3T+d8BPXuRQEZH9+FkDkb4ihakKO3+Zcon85e1ZUUtB1QYXRyaWNrIDxwYXRy\\n' +\n   36        'aWNrQGV4YW1wbGUuY29tPoi5BBMBAgAjBQJRe/SfAhsDBwsJCAcDAgEGFQgCCQoL\\n' +\n   37        'BBYCAwECHgECF4AACgkQObliSdM/GEJbjgP/ffei4lU6fXp8Qu0ubNHh4A6swkTO\\n' +\n   38        'b3suuBELE4A2/pK5YnW5yByFFSi4kq8bJp5O6p9ydXpOA38t3aQ8wrbo0yDvGekr\\n' +\n   39:       '1S1HWOLgCaY7rEDQubuCOHd2R81/VQOJyG3zgX4KFIgkVyV9BZXUpz4PXuhMORmv\\n' +\n   40        '81uzej9r7BYkJ6GdAf4EUXv0nwEEAKbO02jtGEHet2fQfkAYyO+789sTxyfrUy5y\\n' +\n   41        'SAf5n3GgkuiHz8dFevhgqYyMK0OYEOCZqdd1lRBjL6Us7PxTljHc2jtGhoAgE4aZ\\n' +\n   ..\n   43        '4+4owTpRABEBAAH+AwMCKNq1Q15QVlLJyeuGBEA+7nXS3aSy6mE4lR5f3Ml5NRqt\\n' +\n   44        'jm6Q+UUI69DzhLGX4jHRxna6NMP74S3CghOz9eChMndkfWLC/c11h1npzLci+AwJ\\n' +\n   45:       '45xMbw/OW5PLlaxdtkg/SnsHpFGCAuTUWY87kuWoG0HSVMn9Clm+67rdicOW6L5a\\n' +\n   46        'ChfyWcVZ+Hvwjx8YM0/j11If7oUkCZEstSUeJYOI10JQLhNLpDdkB89vXhAMaCuU\\n' +\n   47        'Ijhdq0vvJi6JruKQGPK+jajJ4MMannpQtKAvt8aifqpdovYy8w4yh2pGkadFvrsZ\\n' +\n   ..\n   97      var msg2 = new openpgp.packet.List();\n   98      msg2.read(message.write());\n   99:     expect(msg2[0].decrypt.bind(msg2[0], algo, key)).to.throw('Decryption failed due to missing MDC in combination with modern cipher.');\n  100    });\n  101  \n  ...\n  122    });\n  123  \n  124:   it('Sym encrypted session key with a compressed packet', function(done) {\n  125      var msg =\n  126          '-----BEGIN PGP MESSAGE-----\\n' +\n  ...\n  132          '-----END PGP MESSAGE-----';\n  133  \n  134:     var msgbytes = openpgp.armor.decode(msg).data;\n  135  \n  136      var parsed = new openpgp.packet.List();\n  ...\n  141      var key = parsed[0].sessionKey;\n  142      parsed[1].decrypt(parsed[0].sessionKeyAlgorithm, key);\n  143:     var compressed = parsed[1].packets[0];\n  144  \n  145:     var result = stringify(compressed.packets[0].data);\n  146  \n  147      expect(result).to.equal('Hello world!\\n');\n  ...\n  190          '\\n' +\n  191          'lQHYBFF33iMBBAC9YfOYahJlWrVj2J1TjQiZLunWljI4G9e6ARTyD99nfOkV3swh\\n' +\n  192:         '0WaOse4Utj7BfTqdYcoezhCaQpuExUupKWZqmduBcwSmEBfNu1XyKcxlDQuuk0Vk\\n' +\n  193          'viGC3kFRce/cJaKVFSRU8V5zPgt6KQNv/wNz7ydEisaSoNbk51vQt5oGfwARAQAB\\n' +\n  194          'AAP5AVL8xWMuKgLj9g7/wftMH+jO7vhAxje2W3Y+8r8TnOSn0536lQvzl/eQyeLC\\n' +\n  ...\n  208  \n  209      var key = new openpgp.packet.List();\n  210:     key.read(openpgp.armor.decode(armored_key).data);\n  211      key = key[0];\n  212  \n  ...\n  232          'Version: GnuPG v2.0.19 (GNU/Linux)\\n' +\n  233          '\\n' +\n  234:         'lQHYBFF6gtkBBADKUOWZK6/V75MNwBS+hLYicoS0Sojbo3qWXXpS7eM+uhiDm4bP\\n' +\n  235          'DNjdNVA0R+TCjvhWbc3W6cvdHYTmHRMhTIOefncZRt3OwF7AvVk53fKKPiNNv5C9\\n' +\n  236:         'IK8bcDhAknSOg1TXRSpXLHtYy36A6iDgffNSjoCOVaeKpuRDMA37PvJWFQARAQAB\\n' +\n  237:         'AAP+KxHbOwcrnPPuXppCYEew3Xb7LMWESpvMFFgsmxx1COzFnLjek1P1E+yOWT7n\\n' +\n  238          '4opcsEuaazLk+TrYSMOuR6O6DgGg5c+ctVPU+NGNNCiiTkOzuD+8ow8NgsoINOxi\\n' +\n  239          '481qLK0NYpc5sEg394J3fRuzpfEi6DTS/RzCN7YDiGFccNECAM71NuaAzH5LrZ+B\\n' +\n  ...\n  241          't2T+L7ECAPpCFzZIwwk6giZ10HmXEhXZLXYmdhQD/1fwegpTrEciMA6MCcdkcCyO\\n' +\n  242          '2/J+S+NXM62ykMGDhg2cjhU1rj/uaaUCAJfCjkwpxMsDKHYDFDXyjJFy2vEmA3s8\\n' +\n  243:         'cnmAUDF1caPyEcPEZmYJRE+KdroOD6IGhzp7oA34Ef3D6HOCovH9YaCgbbQbSm9o\\n' +\n  244          'bm55IDxqb2hubnlAZXhhbXBsZS5jb20+iLkEEwECACMFAlF6gtkCGwMHCwkIBwMC\\n' +\n  245          'AQYVCAIJCgsEFgIDAQIeAQIXgAAKCRA6HTM8yP08keZgA/4vL273zrqnmOrqmo/K\\n' +\n  ...\n  268          '\\n' +\n  269          'hIwDFYET+7bfx/ABA/95Uc9942Tg8oqpO0vEu2eSKwPALM3a0DrVdAiFOIK/dJmZ\\n' +\n  270:         'YrtPRw3EEwHZjl6CO9RD+95iE27tPbsICw1K43gofSV/wWsPO6vvs3eftQYHSxxa\\n' +\n  271          'IQbTPImiRaJ73Mf7iM3CNtQM4iUBsx1HnUGl+rtD0nz3fLm6i3CjwiNQWW42I9JH\\n' +\n  272          'AWv8EvvpxZ8X2ClFfSW3UVBoROHe9CAWHM/40nGutAZK8MIgmUI4xqkLFBbqqTyx\\n' +\n  ...\n  276  \n  277      var key = new openpgp.packet.List();\n  278:     key.read(openpgp.armor.decode(armored_key).data);\n  279      key = key[3];\n  280  \n  281      var msg = new openpgp.packet.List();\n  282:     msg.read(openpgp.armor.decode(armored_msg).data);\n  283  \n  284      msg[0].decrypt(key);\n  ...\n  338  \n  339      var key = new openpgp.packet.List();\n  340:     key.read(openpgp.armor.decode(armored_key).data);\n  341      key = key[3];\n  342      key.decrypt('test');\n  343  \n  344      var msg = new openpgp.packet.List();\n  345:     msg.read(openpgp.armor.decode(armored_msg).data);\n  346  \n  347      msg[0].decrypt(key);\n  ...\n  356    it('Secret key reading with signature verification.', function(done) {\n  357      var key = new openpgp.packet.List();\n  358:     key.read(openpgp.armor.decode(armored_key).data);\n  359  \n  360  \n  ...\n  383          'A09boj8/9lFaipqu+AEdQKEjCB8sZ+OY0WiQPEPpuhG+mVqDqEiPFkdpcqNtS0VV\\n' +\n  384          'pwqplHo6QnH2MHfxprZHYuwcEC9ynJCxJ6kSCD8Xs99h+PjxNNw7NhMjkF+N69LA\\n' +\n  385:         'NwGPtbLx2/r2nR4gO8gV92A2RQCOwPP7ZV+6fXgWIs+mhyCHFP3xUP5DaFCNM8mo\\n' +\n  386          'PN97i659ucxF6IbOoK56FEaUbOPTD6xdyhWamxKfMsIb0UJgVUNhGaq+VlvOJxaB\\n' +\n  387          'iRcnY5UxsypKgtqfcKIseb21MIo4vcNdogyxBIDlAO472Zfxn0udzr6W2aQ77+NK\\n' +\n  ...\n  393  \n  394      var key = new openpgp.packet.List();\n  395:     key.read(openpgp.armor.decode(armored_key).data);\n  396      key[3].decrypt('test')\n  397  \n  398      var msg = new openpgp.packet.List();\n  399:     msg.read(openpgp.armor.decode(armored_msg).data);\n  400  \n  401      msg[0].decrypt(key[3]);\n\n/Users/steph/Documents/projects/openpgpjs/test/general/signature.js:\n   98        'LsAI52nWCIqOkzM5NAKWoKhyXK9Y4UH4v9LAYQgl/stIISvCgG4mJ8lzzEBWvRdf',\n   99        'Qm2Ghb64/3V5NDdemwARAQAB/gMDAu7L//czBpE40iPcpLzL7GwBbWFhSWgSLy53',\n  100:       'Md99Kxw3cApWCok2E8R9/4VS0490xKZIa5y2I/K8thVhqk96Z8Kbt7MRMC1WLHgC',\n  101:       'qJvkeQCI6PrFM0PUIPLHAQtDJYKtaLXxYuexcAdKzZj3FHdtLNWCooK6n3vJlL1c',\n  102        'WjZcHJ1PH7USlj1jup4XfxsbziuysRUSyXkjn92GZLm+64vCIiwhqAYoizF2NHHG',\n  103        'hRTN4gQzxrxgkeVchl+ag7DkQUDANIIVI+A63JeLJgWJiH1fbYlwESByHW+zBFNt',\n  ...\n  126        'YS9OAhsvBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQSmNhOk1uQJQwDAP6',\n  127        'AgrTyqkRlJVqz2pb46TfbDM2TDF7o9CBnBzIGoxBhlRwpqALz7z2kxBDmwpQa+ki',\n  128:       'Bq3jZN/UosY9y8bhwMAlnrDY9jP1gdCo+H0sD48CdXybblNwaYpwqC8VSpDdTndf',\n  129        '9j2wE/weihGp/DAdy/2kyBCaiOY1sjhUfJ1GogF49rC4jQRSYS9OAQQA6R/PtBFa',\n  130        'JaT4jq10yqASk4sqwVMsc6HcifM5lSdxzExFP74naUMMyEsKHP53QxTF0Grqusag',\n  131:       'Qg/ZtgT0CN1HUM152y7ACOdp1giKjpMzOTQClqCoclyvWOFB+L/SwGEIJf7LSCEr',\n  132        'woBuJifJc8xAVr0XX0JthoW+uP91eTQ3XpsAEQEAAYkBPQQYAQIACQUCUmEvTgIb',\n  133:       'LgCoCRBKY2E6TW5AlJ0gBBkBAgAGBQJSYS9OAAoJEOCE90RsICyXuqIEANmmiRCA',\n  134        'SF7YK7PvFkieJNwzeK0V3F2lGX+uu6Y3Q/Zxdtwc4xR+me/CSBmsURyXTO29OWhP',\n  135        'GLszPH9zSJU9BdDi6v0yNprmFPX/1Ng0Abn/sCkwetvjxC1YIvTLFwtUL/7v6NS2',\n  ...\n  160        '6kEZjPFwnsr+Y4A3oHcAwXq7nfOz71USojSmmo8pgdN8je16CP98vw3/k6TncLS5',\n  161        'AQ0EUpXQVQEIAMEjHMeqg7B04FliUFWr/8C6sJDb492MlGAWgghIbnuJfXAnUGdN',\n  162:       'oAzn0S+n93Y/qHbW6YcjHD4/G+kK3MuxthAFqcVjdHZQXK0rkhXO/u1co7v1cdtk',\n  163        'OTEcyOpyLXolM/1S2UYImhrml7YulTHMnWVja7xu6QIRso+7HBFT/u9D47L/xXrX',\n  164        'MzXFVZfBtVY+yoeTrOY3OX9cBMOAu0kuN9eT18Yv2yi6XMzP3iONVHtl6HfFrAA7',\n  ...\n  181        'mQENBFKpincBCADhZjIihK15f3l+j87JgeLp9eUTSbn+g3gOFSR73TOMyBHMPt8O',\n  182        'KwuA+TN2sM86AooOR/2B2MjHBUZqrgeJe+sk5411yXezyYdQGZ8vlq/FeLeNF70D',\n  183:       'JrvIC6tsEe2F9F7ICO7o7G+k5yveLaYQNU/okiP8Gj79XW3wN77+yAMwpQzBsrwa',\n  184        'UO/X4mDV59h1DdrTuN4g8SZhAmY/JfT7YCZuQ8ivOs9n7xPdbGpIQWGWjJLVWziC',\n  185        '7uvxN4eFOlCqvc6JwmS/xyYGKL2B3RcQuY+OlvQ3wxKFEGDfG73HtWBd2soB7/7p',\n  ...\n  250        'PN40iJUDBRAvSgDsU5OkROGu2G8BAeUqBACbC45t4+wYxWCxxp81pkFRb8RWBvEvbXI+Spwd',\n  251        '4NcKs8jc5OVC8V02yiq4KbKFDRxdw2OWpUCSRAJe1gjsfFrZ+2RivpKk06kbAYthES03MjXg',\n  252:       'cfcV3z2d7IWanJzdcOlzsHzPe1+RoUAaqBjvcqPRCGRlk0ogkYHyWYxElc6574iVAwUQL9iL',\n  253        'CXr7ES8bepftAQGPywP/d9GSpEmS7LLIqazl4rgN1nkXN5KqduiH8Whu3xcBrdOAn7IYnGTp',\n  254        'O+Ag4qwKKH+y/ke9CeZL6AnrU9c0pux150dHsDeHtpTPyInkjgKI7BofprydvpiFNd0nlAi4',\n  ...\n  401          '',\n  402          'qANQR1DBjAPghPdEbCAslwED/2S4oNvCjO5TdLUMMUuVOQc8fi6c5XIBu7Y09fEX',\n  403:         'Jm/UrkDHVgmPojLGBDF0CYENNZOVrNfpahY7A3r4HPzGucBzCO1uxuUIKjhtNAAM',\n  404          'mjD939ernjooOZrM6xDuRaX8adG0LSxpNaVJGxXd/EdlmKDJbYDI6aJ5INrUxzAR',\n  405          'DAqw0sBSAXgRWgiH6IIiAo5y5WFEDEN9sGStaEQT2wd32kX73M4iZuMt/GM2agiB',\n  406          'sWb7yLcNHiJ/3OnTfDg9+T543kFq9FlwFbwqygO/wm9e/kgMBq0ZsFOfV+GRtXep',\n  407:         '3qNbJsmzGvdqiUHb/+hkdE191jaSVcO/zaMW4N0Vc1IwIEhZ8I9+9bKwusdVhHT5',\n  408          'MySnhIogv+0Ilag/aY+UiCt+Zcie69T7Eix48fC/VVW5w3INf1T2CMmDm5ZLZFRN',\n  409          'oyqzb9Vsgu1gS7SCb6qTbnbV9PlSyU4wJB6siX8hz/U0urokT5se3uYRjiV0KbkA',\n  ...\n  443          'bJQNOhll0J0H839jFvt/16m20h/ZmDoWqJywapnypjdIjcXr+7rJFess40yenV7Q',\n  444          '2LSu/EX6Aq29x+dv+GPUMfuhTNE3viWWUR4PD6T7XfmdViUwmSf8fkRNUn/t3a2n',\n  445:         'cq46Xr36seCor/OLp0atSZwHrjx2SU5zPLheZn+zw/0d1/YZnD7AEeP9s/Cuycyv',\n  446          'CZ5HZNKufvB8fsh+dfdSXW0GfqkPfxk36Vw8ufpjaoZDyt2nxxg/6D4KS3UvZzv3',\n  447          'axdLZ9yd0OJNZv4P501If24W4vTGz6nI7Ser8Yd2PiOvE5MWMT0wLZQ+zPX1sv0/',\n  ...\n  598      var detachedSig = ['-----BEGIN PGP SIGNATURE-----',\n  599        'Version: GnuPG v1.4.13 (Darwin)',\n  600:       'Comment: GPGTools - https://gpgtools.org',\n  601:       'Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/',\n  602        '',\n  603        'iQEcBAEBCgAGBQJTqH5OAAoJENf7k/zfv8I8oFoH/R6EFTw2CYUQoOKSAQstWIHp',\n  ...\n  611      ].join('\\r\\n');\n  612  \n  613:     var content = ['Content-Type: multipart/mixed;',\n  614        ' boundary=\"------------070307080002050009010403\"',\n  615        '',\n  616        'This is a multi-part message in MIME format.',\n  617        '--------------070307080002050009010403',\n  618:       'Content-Type: text/plain; charset=ISO-8859-1',\n  619:       'Content-Transfer-Encoding: quoted-printable',\n  620        '',\n  621        'test11',\n  622        '',\n  623        '--------------070307080002050009010403',\n  624:       'Content-Type: application/macbinary;',\n  625        ' name=\"test.bin\"',\n  626:       'Content-Transfer-Encoding: base64',\n  627:       'Content-Disposition: attachment;',\n  628        ' filename=\"test.bin\"',\n  629        '',\n  ...\n  633      ].join('\\r\\n');\n  634  \n  635:     var publicKeyArmored = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\nVersion: OpenPGP.js v.1.20131116\\r\\nComment: Whiteout Mail - http://whiteout.io\\r\\n\\r\\nxsBNBFKODs4BB/9iOF4THsjQMY+WEpT7ShgKxj4bHzRRaQkqczS4nZvP0U3g\\r\\nqeqCnbpagyeKXA+bhWFQW4GmXtgAoeD5PXs6AZYrw3tWNxLKu2Oe6Tp9K/XI\\r\\nxTMQ2wl4qZKDXHvuPsJ7cmgaWqpPyXtxA4zHHS3WrkI/6VzHAcI/y6x4szSB\\r\\nKgSuhI3hjh3s7TybUC1U6AfoQGx/S7e3WwlCOrK8GTClirN/2mCPRC5wuIft\\r\\nnkoMfA6jK8d2OPrJ63shy5cgwHOjQg/xuk46dNS7tkvGmbaa+X0PgqSKB+Hf\\r\\nYPPNS/ylg911DH9qa8BqYU2QpNh9jUKXSF+HbaOM+plWkCSAL7czV+R3ABEB\\r\\nAAHNLVdoaXRlb3V0IFVzZXIgPHNhZmV3aXRobWUudGVzdHVzZXJAZ21haWwu\\r\\nY29tPsLAXAQQAQgAEAUCUo4O2gkQ1/uT/N+/wjwAAN2cB/9gFRmAfvEQ2qz+\\r\\nWubmT2EsSSnjPMxzG4uyykFoa+TaZCWo2Xa2tQghmU103kEkQb1OEjRjpgwJ\\r\\nYX9Kghnl8DByM686L5AXnRyHP78qRJCLXSXl0AGicboUDp5sovaa4rswQceH\\r\\nvcdWgZ/mgHTRoiQeJddy9k+H6MPFiyFaVcFwegVsmpc+dCcC8yT+qh8ZIbyG\\r\\nRJU60PmKKN7LUusP+8DbSv39zCGJCBlVVKyA4MzdF5uM+sqTdXbKzOrT5DGd\\r\\nCZaox4s+w16Sq1rHzZKFWfQPfKLDB9pyA0ufCVRA3AF6BUi7G3ZqhZiHNhMP\\r\\nNvE45V/hS1PbZcfPVoUjE2qc1Ix1\\r\\n=7Wpe\\r\\n-----END PGP PUBLIC KEY BLOCK-----';\n  636      var publicKeys = openpgp.key.readArmored(publicKeyArmored).keys;\n  637  \n  638:     var msg = openpgp.message.readSignedContent(content, detachedSig);\n  639      var result = msg.verify(publicKeys);\n  640      expect(result[0].valid).to.be.true;\n  ...\n  642  \n  643    it('Sign message with key without password', function(done) {\n  644:     var opt = {numBits: 512, userIds: { name:'test', email:'a@b.com' }, passphrase: null};\n  645      if (openpgp.util.getWebCrypto()) { opt.numBits = 2048; } // webkit webcrypto accepts minimum 2048 bit keys\n  646      openpgp.generateKey(opt).then(function(gen) {\n\n/Users/steph/Documents/projects/openpgpjs/test/general/util.js:\n   85    describe('isEmailAddress', function() {\n   86      it('should return true for valid email address', function() {\n   87:       var data = 'test@example.com';\n   88        expect(openpgp.util.isEmailAddress(data)).to.be.true;\n   89      });\n   90      it('should return false for invalid email address', function() {\n   91:       var data = 'Test User <test@example.com>';\n   92        expect(openpgp.util.isEmailAddress(data)).to.be.false;\n   93      });\n   94      it('should return false for invalid email address', function() {\n   95:       var data = 'test@examplecom';\n   96        expect(openpgp.util.isEmailAddress(data)).to.be.false;\n   97      });\n   98      it('should return false for invalid email address', function() {\n   99:       var data = 'testexamplecom';\n  100        expect(openpgp.util.isEmailAddress(data)).to.be.false;\n  101      });\n  ...\n  116    describe('isUserId', function() {\n  117      it('should return true for valid user id', function() {\n  118:       var data = 'Test User <test@example.com>';\n  119        expect(openpgp.util.isUserId(data)).to.be.true;\n  120      });\n  121      it('should return false for invalid user id', function() {\n  122:       var data = 'Test User test@example.com>';\n  123        expect(openpgp.util.isUserId(data)).to.be.false;\n  124      });\n  125      it('should return false for invalid user id', function() {\n  126:       var data = 'Test User <test@example.com';\n  127        expect(openpgp.util.isUserId(data)).to.be.false;\n  128      });\n  129      it('should return false for invalid user id', function() {\n  130:       var data = 'Test User test@example.com';\n  131        expect(openpgp.util.isUserId(data)).to.be.false;\n  132      });\n  ...\n  146  \n  147    describe('getTransferables', function() {\n  148:     var zeroCopyVal,\n  149        buf1 = new Uint8Array(1),\n  150        buf2 = new Uint8Array(1),\n  ...\n  158  \n  159      beforeEach(function() {\n  160:       zeroCopyVal = openpgp.config.zeroCopy;\n  161:       openpgp.config.zeroCopy = true;\n  162      });\n  163  \n  164      afterEach(function() {\n  165:       openpgp.config.zeroCopy = zeroCopyVal;\n  166      });\n  167  \n  168:     it('should return undefined when zeroCopy is false', function() {\n  169:       openpgp.config.zeroCopy = false;\n  170        expect(openpgp.util.getTransferables(obj)).to.be.undefined;\n  171      });\n  ...\n  182  \n  183    describe(\"Misc.\", function() {\n  184:     it('util.decode_utf8 throws error if invalid parameter type', function () {\n  185:       var test = openpgp.util.decode_utf8.bind(null, {chameleon: true});\n  186        expect(test).to.throw(Error, /Parameter \"utf8\" is not of type string/);\n  187      });\n\n/Users/steph/Documents/projects/openpgpjs/test/worker/async_proxy.js:\n   18    'YS9OAhsvBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQSmNhOk1uQJQwDAP6',\n   19    'AgrTyqkRlJVqz2pb46TfbDM2TDF7o9CBnBzIGoxBhlRwpqALz7z2kxBDmwpQa+ki',\n   20:   'Bq3jZN/UosY9y8bhwMAlnrDY9jP1gdCo+H0sD48CdXybblNwaYpwqC8VSpDdTndf',\n   21    '9j2wE/weihGp/DAdy/2kyBCaiOY1sjhUfJ1GogF49rC4jQRSYS9OAQQA6R/PtBFa',\n   22    'JaT4jq10yqASk4sqwVMsc6HcifM5lSdxzExFP74naUMMyEsKHP53QxTF0Grqusag',\n   23:   'Qg/ZtgT0CN1HUM152y7ACOdp1giKjpMzOTQClqCoclyvWOFB+L/SwGEIJf7LSCEr',\n   24    'woBuJifJc8xAVr0XX0JthoW+uP91eTQ3XpsAEQEAAYkBPQQYAQIACQUCUmEvTgIb',\n   25:   'LgCoCRBKY2E6TW5AlJ0gBBkBAgAGBQJSYS9OAAoJEOCE90RsICyXuqIEANmmiRCA',\n   26    'SF7YK7PvFkieJNwzeK0V3F2lGX+uu6Y3Q/Zxdtwc4xR+me/CSBmsURyXTO29OWhP',\n   27    'GLszPH9zSJU9BdDi6v0yNprmFPX/1Ng0Abn/sCkwetvjxC1YIvTLFwtUL/7v6NS2',\n\n1486 matches across 80 files\n\n\nSearching 95 files for \"\"CO\"\"\n\n0 matches\n\nSearching 95 files for \"OpenPGP.js\"\n\n/Users/steph/Documents/projects/openpgpjs/Gruntfile.js:\n   41        openpgp: {\n   42          files: {\n   43:           'dist/openpgp.js': [ './src/index.js' ]\n   44          },\n   45          options: {\n   ..\n   95      replace: {\n   96        openpgp: {\n   97:         src: ['dist/openpgp.js'],\n   98:         dest: ['dist/openpgp.js'],\n   99          replacements: [{\n  100:           from: /OpenPGP.js VERSION/g,\n  101            to: 'CO'\n  102          }]\n  ...\n  106          dest: ['dist/openpgp_debug.js'],\n  107          replacements: [{\n  108:           from: /OpenPGP.js VERSION/g,\n  109:           to: 'OpenPGP.js v<%= pkg.version %>'\n  110          }]\n  111        },\n  ...\n  114          dest: ['dist/openpgp.worker.min.js'],\n  115          replacements: [{\n  116:           from: \"importScripts('openpgp.js')\",\n  117            to: \"importScripts('openpgp.min.js?v=\"+dateTime+\"')\"\n  118          }]\n  ...\n  122        openpgp: {\n  123          files: {\n  124:           'dist/openpgp.min.js' : [ 'dist/openpgp.js' ],\n  125            'dist/openpgp.worker.min.js' : [ 'dist/openpgp.worker.min.js' ]\n  126          }\n  127        },\n  128        options: {\n  129:         banner: '/*! OpenPGP.js v<%= pkg.version %> - ' +\n  130            '<%= grunt.template.today(\"yyyy-mm-dd\") %> - ' +\n  131            'this is LGPL licensed code, see LICENSE/our website <%= pkg.homepage %> for more information. */'\n\n/Users/steph/Documents/projects/openpgpjs/src/config/config.js:\n   46    show_version: true,\n   47    show_comment: false,\n   48:   versionstring: \"OpenPGP.js VERSION\",\n   49    commentstring: \"\",\n   50    keyserver: \"https://keyserver.ubuntu.com\",\n\n/Users/steph/Documents/projects/openpgpjs/src/hkp.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2015 Tankred Hase\n    3  //\n\n/Users/steph/Documents/projects/openpgpjs/src/index.js:\n    5   * Usage:\n    6   *\n    7:  *   import openpgp from 'openpgp.js'\n    8   *   openpgp.encryptMessage(keys, text)\n    9   */\n   ..\n   15   * Usage:\n   16   *\n   17:  *   import { encryptMessage } from 'openpgp.js'\n   18   *   encryptMessage(keys, text)\n   19   */\n\n/Users/steph/Documents/projects/openpgpjs/src/openpgp.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2016 Tankred Hase\n    3  //\n    .\n   27  /**\n   28   * @fileoverview The openpgp base module should provide all of the functionality\n   29:  * to consume the openpgp.js library. All additional classes are documented\n   30   * for extending and developing on top of the base library.\n   31   */\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/clone.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2015 Tankred Hase\n    3  //\n\n/Users/steph/Documents/projects/openpgpjs/src/worker/worker.js:\n   20  self.window = {}; // to make UMD bundles work\n   21  \n   22: importScripts('openpgp.js');\n   23  var openpgp = window.openpgp;\n   24  \n\n/Users/steph/Documents/projects/openpgpjs/test/general/armor.js:\n  135      var privKey =\n  136        ['-----BEGIN PGP PRIVATE KEY BLOCK-----',\n  137:       'Version: OpenPGP.js v0.3.0',\n  138        'Comment: http://openpgpjs.org',\n  139        '',\n  ...\n  161      var privKey =\n  162        ['-----BEGIN PGP PRIVATE KEY BLOCK-----\\t \\r',\n  163:       'Version: OpenPGP.js v0.3.0',\n  164        'Comment: http://openpgpjs.org',\n  165        '',\n\n/Users/steph/Documents/projects/openpgpjs/test/general/index.js:\n    6    require('./signature.js');\n    7    require('./key.js');\n    8:   require('./openpgp.js');\n    9    require('./hkp.js');\n   10  });\n\n/Users/steph/Documents/projects/openpgpjs/test/general/keyring.js:\n   14      keyFingerP = '5856cef789c3a307e8a1b976f6f60e9b42cdff4c',\n   15      pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\n' +\n   16:       'Version: OpenPGP.js v.1.20131011\\n' +\n   17        'Comment: http://openpgpjs.org\\n' +\n   18        '\\n' +\n   ..\n   25        '-----END PGP PUBLIC KEY BLOCK-----',\n   26      privkey = '-----BEGIN PGP PRIVATE KEY BLOCK-----\\n' +\n   27:       'Version: OpenPGP.js v.1.20131011\\n' +\n   28        'Comment: http://openpgpjs.org\\n' +\n   29        '\\n' +\n\n/Users/steph/Documents/projects/openpgpjs/test/general/openpgp.js:\n  164  var password2 = 'I am another password';\n  165  \n  166: describe('OpenPGP.js public api tests', function() {\n  167  \n  168    describe('initWorker, getWorker, destroyWorker - unit tests', function() {\n  ...\n  597        describe('AES / RSA encrypt, decrypt, sign, verify', function() {\n  598          var wrong_pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n' +\n  599:           'Version: OpenPGP.js v0.9.0\\r\\n' +\n  600            'Comment: Hoodiecrow - https://hoodiecrow.com\\r\\n' +\n  601            '\\r\\n' +\n\n/Users/steph/Documents/projects/openpgpjs/test/general/signature.js:\n  633      ].join('\\r\\n');\n  634  \n  635:     var publicKeyArmored = '-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\nVersion: OpenPGP.js v.1.20131116\\r\\nComment: Whiteout Mail - http://whiteout.io\\r\\n\\r\\nxsBNBFKODs4BB/9iOF4THsjQMY+WEpT7ShgKxj4bHzRRaQkqczS4nZvP0U3g\\r\\nqeqCnbpagyeKXA+bhWFQW4GmXtgAoeD5PXs6AZYrw3tWNxLKu2Oe6Tp9K/XI\\r\\nxTMQ2wl4qZKDXHvuPsJ7cmgaWqpPyXtxA4zHHS3WrkI/6VzHAcI/y6x4szSB\\r\\nKgSuhI3hjh3s7TybUC1U6AfoQGx/S7e3WwlCOrK8GTClirN/2mCPRC5wuIft\\r\\nnkoMfA6jK8d2OPrJ63shy5cgwHOjQg/xuk46dNS7tkvGmbaa+X0PgqSKB+Hf\\r\\nYPPNS/ylg911DH9qa8BqYU2QpNh9jUKXSF+HbaOM+plWkCSAL7czV+R3ABEB\\r\\nAAHNLVdoaXRlb3V0IFVzZXIgPHNhZmV3aXRobWUudGVzdHVzZXJAZ21haWwu\\r\\nY29tPsLAXAQQAQgAEAUCUo4O2gkQ1/uT/N+/wjwAAN2cB/9gFRmAfvEQ2qz+\\r\\nWubmT2EsSSnjPMxzG4uyykFoa+TaZCWo2Xa2tQghmU103kEkQb1OEjRjpgwJ\\r\\nYX9Kghnl8DByM686L5AXnRyHP78qRJCLXSXl0AGicboUDp5sovaa4rswQceH\\r\\nvcdWgZ/mgHTRoiQeJddy9k+H6MPFiyFaVcFwegVsmpc+dCcC8yT+qh8ZIbyG\\r\\nRJU60PmKKN7LUusP+8DbSv39zCGJCBlVVKyA4MzdF5uM+sqTdXbKzOrT5DGd\\r\\nCZaox4s+w16Sq1rHzZKFWfQPfKLDB9pyA0ufCVRA3AF6BUi7G3ZqhZiHNhMP\\r\\nNvE45V/hS1PbZcfPVoUjE2qc1Ix1\\r\\n=7Wpe\\r\\n-----END PGP PUBLIC KEY BLOCK-----';\n  636      var publicKeys = openpgp.key.readArmored(publicKeyArmored).keys;\n  637  \n\n25 matches across 12 files\n\n\nSearching 64 files for \"OpenPGP.js\"\n\n/Users/steph/Documents/projects/openpgpjs/src/config/config.js:\n   46    show_version: true,\n   47    show_comment: false,\n   48:   versionstring: \"OpenPGP.js VERSION\",\n   49    commentstring: \"\",\n   50    keyserver: \"https://keyserver.ubuntu.com\",\n\n/Users/steph/Documents/projects/openpgpjs/src/hkp.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2015 Tankred Hase\n    3  //\n\n/Users/steph/Documents/projects/openpgpjs/src/index.js:\n    5   * Usage:\n    6   *\n    7:  *   import openpgp from 'openpgp.js'\n    8   *   openpgp.encryptMessage(keys, text)\n    9   */\n   ..\n   15   * Usage:\n   16   *\n   17:  *   import { encryptMessage } from 'openpgp.js'\n   18   *   encryptMessage(keys, text)\n   19   */\n\n/Users/steph/Documents/projects/openpgpjs/src/openpgp.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2016 Tankred Hase\n    3  //\n    .\n   27  /**\n   28   * @fileoverview The openpgp base module should provide all of the functionality\n   29:  * to consume the openpgp.js library. All additional classes are documented\n   30   * for extending and developing on top of the base library.\n   31   */\n\n/Users/steph/Documents/projects/openpgpjs/src/packet/clone.js:\n    1: // OpenPGP.js - An OpenPGP implementation in javascript\n    2  // Copyright (C) 2015 Tankred Hase\n    3  //\n\n/Users/steph/Documents/projects/openpgpjs/src/worker/worker.js:\n   20  self.window = {}; // to make UMD bundles work\n   21  \n   22: importScripts('openpgp.js');\n   23  var openpgp = window.openpgp;\n   24  \n\n8 matches across 6 files\n\n\nSearching 64 files for \"versionstring\"\n\n/Users/steph/Documents/projects/openpgpjs/src/config/config.js:\n   46    show_version: true,\n   47    show_comment: false,\n   48:   versionstring: \"OpenPGP.js VERSION\",\n   49    commentstring: \"\",\n   50    keyserver: \"https://keyserver.ubuntu.com\",\n\n/Users/steph/Documents/projects/openpgpjs/src/encoding/armor.js:\n  100    var result = \"\";\n  101    if (config.show_version) {\n  102:     result += \"Version: \" + config.versionstring + '\\r\\n';\n  103    }\n  104    if (config.show_comment) {\n\n2 matches across 2 files\n\n\nSearching 64 files for \"armor\"\n\n/Users/steph/Documents/projects/openpgpjs/src/cleartext.js:\n   18  /**\n   19   * @requires config\n   20:  * @requires encoding/armor\n   21   * @requires enums\n   22   * @requires packet\n   ..\n   29  import packet from './packet';\n   30  import enums from './enums.js';\n   31: import armor from './encoding/armor.js';\n   32  \n   33  /**\n   ..\n  140  \n  141  /**\n  142:  * Returns ASCII armored text of cleartext signed message\n  143:  * @return {String} ASCII armor\n  144   */\n  145: CleartextMessage.prototype.armor = function() {\n  146    var body = {\n  147      hash: enums.read(enums.hash, config.prefer_hash_algorithm).toUpperCase(),\n  ...\n  149      data: this.packets.write()\n  150    };\n  151:   return armor.encode(enums.armor.signed, body);\n  152  };\n  153  \n  ...\n  155  /**\n  156   * reads an OpenPGP cleartext signed message and returns a CleartextMessage object\n  157:  * @param {String} armoredText text to be parsed\n  158   * @return {module:cleartext~CleartextMessage} new cleartext message object\n  159   * @static\n  160   */\n  161: export function readArmored(armoredText) {\n  162:   var input = armor.decode(armoredText);\n  163:   if (input.type !== enums.armor.signed) {\n  164      throw new Error('No cleartext signed message.');\n  165    }\n  ...\n  172  \n  173  /**\n  174:  * Compare hash algorithm specified in the armor header with signatures\n  175   * @private\n  176:  * @param  {Array<String>} headers    Armor headers\n  177   * @param  {module:packet/packetlist} packetlist The packetlist with signature packets\n  178   */\n  ...\n  201            return enums.write(enums.hash, hash);\n  202          } catch (e) {\n  203:           throw new Error('Unknown hash algorithm in armor header: ' + hash);\n  204          }\n  205        });\n  ...\n  212      throw new Error('If no \"Hash\" header in cleartext signed message, then only MD5 signatures allowed');\n  213    } else if (!checkHashAlgos(hashAlgos)) {\n  214:     throw new Error('Hash algorithm mismatch in armor header and signature');\n  215    }\n  216  }\n\n/Users/steph/Documents/projects/openpgpjs/src/encoding/armor.js:\n   20   * @requires enums\n   21   * @requires config\n   22:  * @module encoding/armor\n   23   */\n   24  \n   ..\n   30  \n   31  /**\n   32:  * Finds out which Ascii Armoring type is used. Throws error if unknown type.\n   33   * @private\n   34:  * @param {String} text [String] ascii armored text\n   35   * @returns {Integer} 0 = MESSAGE PART n of m\n   36   *         1 = MESSAGE PART n\n   ..\n   46  \n   47    if (!header) {\n   48:     throw new Error('Unknown ASCII armor type');\n   49    }\n   50  \n   51    // BEGIN PGP MESSAGE, PART X/Y\n   52:   // Used for multi-part messages, where the armor is split amongst Y\n   53    // parts, and this is the Xth part out of Y.\n   54    if (/MESSAGE, PART \\d+\\/\\d+/.test(header[1])) {\n   55:     return enums.armor.multipart_section;\n   56    } else\n   57    // BEGIN PGP MESSAGE, PART X\n   58    // Used for multi-part messages, where this is the Xth part of an\n   59:   // unspecified number of parts. Requires the MESSAGE-ID Armor\n   60    // Header to be used.\n   61    if (/MESSAGE, PART \\d+/.test(header[1])) {\n   62:     return enums.armor.multipart_last;\n   63  \n   64    } else\n   ..\n   68    // for detached signatures.\n   69    if (/SIGNED MESSAGE/.test(header[1])) {\n   70:     return enums.armor.signed;\n   71  \n   72    } else\n   ..\n   74    // Used for signed, encrypted, or compressed files.\n   75    if (/MESSAGE/.test(header[1])) {\n   76:     return enums.armor.message;\n   77  \n   78    } else\n   79    // BEGIN PGP PUBLIC KEY BLOCK\n   80:   // Used for armoring public keys.\n   81    if (/PUBLIC KEY BLOCK/.test(header[1])) {\n   82:     return enums.armor.public_key;\n   83  \n   84    } else\n   85    // BEGIN PGP PRIVATE KEY BLOCK\n   86:   // Used for armoring private keys.\n   87    if (/PRIVATE KEY BLOCK/.test(header[1])) {\n   88:     return enums.armor.private_key;\n   89    }\n   90  }\n   91  \n   92  /**\n   93:  * Add additional information to the armor version of an OpenPGP binary\n   94   * packet block.\n   95   * @author  Alex\n   ..\n  206  /**\n  207   * Splits a message into two parts, the headers and the body. This is an internal function\n  208:  * @param {String} text OpenPGP armored message part\n  209   * @returns {(Boolean|Object)} Either false in case of an error\n  210   * or an object with attribute \"headers\" containing the headers and\n  ...\n  223      body = text.slice(matchResult.index + matchResult[0].length);\n  224    } else {\n  225:     throw new Error('Mandatory blank line missing between armor headers and armor data');\n  226    }\n  227  \n  ...\n  234  \n  235  /**\n  236:  * Verify armored headers. RFC4880, section 6.3: \"OpenPGP should consider improperly formatted\n  237:  * Armor Headers to be corruption of the ASCII Armor.\"\n  238   * @private\n  239:  * @param  {Array<String>} headers Armor headers\n  240   */\n  241  function verifyHeaders(headers) {\n  242    for (var i = 0; i < headers.length; i++) {\n  243      if (!/^(Version|Comment|MessageID|Hash|Charset): .+$/.test(headers[i])) {\n  244:       throw new Error('Improperly formatted armor header: ' + headers[i]);\n  245      }\n  246    }\n  ...\n  249  /**\n  250   * Splits a message into two parts, the body and the checksum. This is an internal function\n  251:  * @param {String} text OpenPGP armored message part\n  252   * @returns {(Boolean|Object)} Either false in case of an error\n  253   * or an object with attribute \"body\" containing the body\n  ...\n  270  \n  271  /**\n  272:  * DeArmor an OpenPGP armored message; verify the checksum and return\n  273   * the encoded bytes\n  274:  * @param {String} text OpenPGP armored message\n  275   * @returns {Object} An object with attribute \"text\" containing the message text,\n  276:  * an attribute \"data\" containing the bytes and \"type\" for the ASCII armor type\n  277   * @static\n  278   */\n  279: function dearmor(text) {\n  280    var reSplit = /^-----[^-]+-----$\\n/m;\n  281  \n  ...\n  329  \n  330    if (!verifyCheckSum(result.data, checksum)) {\n  331:     throw new Error(\"Ascii armor integrity check on message failed: '\" +\n  332        checksum +\n  333        \"' should be '\" +\n  ...\n  342  \n  343  /**\n  344:  * Armor an OpenPGP binary packet block\n  345   * @param {Integer} messagetype type of the message\n  346   * @param body\n  347   * @param {Integer} partindex\n  348   * @param {Integer} parttotal\n  349:  * @returns {String} Armored text\n  350   * @static\n  351   */\n  352: function armor(messagetype, body, partindex, parttotal) {\n  353    var result = [];\n  354    switch (messagetype) {\n  355:     case enums.armor.multipart_section:\n  356        result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"/\" + parttotal + \"-----\\r\\n\");\n  357        result.push(addheader());\n  ...\n  360        result.push(\"-----END PGP MESSAGE, PART \" + partindex + \"/\" + parttotal + \"-----\\r\\n\");\n  361        break;\n  362:     case enums.armor.multipart_last:\n  363        result.push(\"-----BEGIN PGP MESSAGE, PART \" + partindex + \"-----\\r\\n\");\n  364        result.push(addheader());\n  ...\n  367        result.push(\"-----END PGP MESSAGE, PART \" + partindex + \"-----\\r\\n\");\n  368        break;\n  369:     case enums.armor.signed:\n  370        result.push(\"\\r\\n-----BEGIN PGP SIGNED MESSAGE-----\\r\\n\");\n  371        result.push(\"Hash: \" + body.hash + \"\\r\\n\\r\\n\");\n  ...\n  377        result.push(\"-----END PGP SIGNATURE-----\\r\\n\");\n  378        break;\n  379:     case enums.armor.message:\n  380        result.push(\"-----BEGIN PGP MESSAGE-----\\r\\n\");\n  381        result.push(addheader());\n  ...\n  384        result.push(\"-----END PGP MESSAGE-----\\r\\n\");\n  385        break;\n  386:     case enums.armor.public_key:\n  387        result.push(\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n\");\n  388        result.push(addheader());\n  ...\n  391        result.push(\"-----END PGP PUBLIC KEY BLOCK-----\\r\\n\\r\\n\");\n  392        break;\n  393:     case enums.armor.private_key:\n  394        result.push(\"-----BEGIN PGP PRIVATE KEY BLOCK-----\\r\\n\");\n  395        result.push(addheader());\n  ...\n  404  \n  405  export default {\n  406:   encode: armor,\n  407:   decode: dearmor\n  408  };\n  409  \n\n/Users/steph/Documents/projects/openpgpjs/src/enums.js:\n  287    },\n  288  \n  289:   /** Armor type\n  290     * @enum {Integer}\n  291     * @readonly\n  292     */\n  293:   armor: {\n  294      multipart_section: 0,\n  295      multipart_last: 1,\n\n/Users/steph/Documents/projects/openpgpjs/src/hkp.js:\n   41   * @param  {String}   options.query   This can be any part of the key user ID such as name\n   42   *   or email address.\n   43:  * @return {Promise<String>}          The ascii armored public key.\n   44   */\n   45  HKP.prototype.lookup = function(options) {\n   ..\n   60      }\n   61  \n   62:   }).then(function(publicKeyArmored) {\n   63:     if (!publicKeyArmored || publicKeyArmored.indexOf('-----END PGP PUBLIC KEY BLOCK-----') < 0) {\n   64        return;\n   65      }\n   66:     return publicKeyArmored.trim();\n   67    });\n   68  };\n   ..\n   70  /**\n   71   * Upload a public key to the server.\n   72:  * @param  {String}   publicKeyArmored  An ascii armored public key to be uploaded.\n   73   * @return {Promise}\n   74   */\n   75: HKP.prototype.upload = function(publicKeyArmored) {\n   76    var uri = this._baseUrl + '/pks/add',\n   77      fetch = this._fetch;\n   ..\n   82        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n   83      },\n   84:     body: 'keytext=' + encodeURIComponent(publicKeyArmored)\n   85    });\n   86  };\n\n/Users/steph/Documents/projects/openpgpjs/src/index.js:\n   72  \n   73  /**\n   74:  * @see module:encoding/armor\n   75:  * @name module:openpgp.armor\n   76   */\n   77: export { default as armor } from './encoding/armor';\n   78  \n   79  /**\n\n/Users/steph/Documents/projects/openpgpjs/src/key.js:\n   18  /**\n   19   * @requires config\n   20:  * @requires encoding/armor\n   21   * @requires enums\n   22   * @requires packet\n   ..\n   28  import packet from './packet';\n   29  import enums from './enums.js';\n   30: import armor from './encoding/armor.js';\n   31  import config from './config';\n   32  import util from './util';\n   ..\n  284  \n  285  /**\n  286:  * Returns ASCII armored text of key\n  287:  * @return {String} ASCII armor\n  288   */\n  289: Key.prototype.armor = function() {\n  290:   var type = this.isPublic() ? enums.armor.public_key : enums.armor.private_key;\n  291:   return armor.encode(type, this.toPacketlist().write());\n  292  };\n  293  \n  ...\n  883  \n  884  /**\n  885:  * Reads an OpenPGP armored text and returns one or multiple key objects\n  886:  * @param {String} armoredText text to be parsed\n  887   * @return {{keys: Array<module:key~Key>, err: (Array<Error>|null)}} result object with key and error arrays\n  888   * @static\n  889   */\n  890: export function readArmored(armoredText) {\n  891    var result = {};\n  892    result.keys = [];\n  893    try {\n  894:     var input = armor.decode(armoredText);\n  895:     if (!(input.type === enums.armor.public_key || input.type === enums.armor.private_key)) {\n  896:       throw new Error('Armored text not of type key');\n  897      }\n  898      var packetlist = new packet.List();\n  ...\n  900      var keyIndex = packetlist.indexOfTag(enums.packet.publicKey, enums.packet.secretKey);\n  901      if (keyIndex.length === 0) {\n  902:       throw new Error('No key packet found in armored text');\n  903      }\n  904      for (var i = 0; i < keyIndex.length; i++) {\n\n/Users/steph/Documents/projects/openpgpjs/src/keyring/keyring.js:\n  177  \n  178  /**\n  179:  * Imports a key from an ascii armored message\n  180:  * @param {String} armored message to read the keys/key from\n  181   * @return {Array<Error>|null} array of error objects or null\n  182   */\n  183: KeyArray.prototype.importKey = function (armored) {\n  184:   var imported = keyModule.readArmored(armored);\n  185    var that = this;\n  186    imported.keys.forEach(function(key) {\n\n/Users/steph/Documents/projects/openpgpjs/src/keyring/localstore.js:\n   63  \n   64  function loadKeys(storage, itemname) {\n   65:   var armoredKeys = JSON.parse(storage.getItem(itemname));\n   66    var keys = [];\n   67:   if (armoredKeys !== null && armoredKeys.length !== 0) {\n   68      var key;\n   69:     for (var i = 0; i < armoredKeys.length; i++) {\n   70:       key = keyModule.readArmored(armoredKeys[i]);\n   71        if (!key.err) {\n   72          keys.push(key.keys[0]);\n   73        } else {\n   74:         util.print_debug(\"Error reading armored key from keyring index: \" + i);\n   75        }\n   76      }\n   ..\n   98  \n   99  function storeKeys(storage, itemname, keys) {\n  100:   var armoredKeys = [];\n  101    if (keys.length) {\n  102      for (var i = 0; i < keys.length; i++) {\n  103:       armoredKeys.push(keys[i].armor());\n  104      }\n  105:     storage.setItem(itemname, JSON.stringify(armoredKeys));\n  106    } else {\n  107      storage.removeItem(itemname);\n\n/Users/steph/Documents/projects/openpgpjs/src/message.js:\n   19   * @requires config\n   20   * @requires crypto\n   21:  * @requires encoding/armor\n   22   * @requires enums\n   23   * @requires packet\n   ..\n   30  import packet from './packet';\n   31  import enums from './enums.js';\n   32: import armor from './encoding/armor.js';\n   33  import config from './config';\n   34  import crypto from './crypto';\n   ..\n  378  \n  379  /**\n  380:  * Returns ASCII armored text of message\n  381:  * @return {String} ASCII armor\n  382   */\n  383: Message.prototype.armor = function() {\n  384:   return armor.encode(enums.armor.message, this.packets.write());\n  385  };\n  386  \n  387  /**\n  388:  * reads an OpenPGP armored message and returns a message object\n  389:  * @param {String} armoredText text to be parsed\n  390   * @return {module:message~Message} new message object\n  391   * @static\n  392   */\n  393: export function readArmored(armoredText) {\n  394    //TODO how do we want to handle bad text? Exception throwing\n  395:   //TODO don't accept non-message armored texts\n  396:   var input = armor.decode(armoredText).data;\n  397    return read(input);\n  398  }\n  ...\n  411  \n  412  /**\n  413:  * Create a message object from signed content and a detached armored signature.\n  414   * @param {String} content An 8 bit ascii string containing e.g. a MIME subtree with text nodes or attachments\n  415:  * @param {String} detachedSignature The detached ascii armored PGP signature\n  416   */\n  417  export function readSignedContent(content, detachedSignature) {\n  ...\n  420    var packetlist = new packet.List();\n  421    packetlist.push(literalDataPacket);\n  422:   var input = armor.decode(detachedSignature).data;\n  423    packetlist.read(input);\n  424    return new Message(packetlist);\n\n/Users/steph/Documents/projects/openpgpjs/src/openpgp.js:\n   94   * @param  {Boolean} unlocked        (optional) If the returned secret part of the generated key is unlocked\n   95   * @return {Promise<Object>}         The generated key object in the form:\n   96:  *                                     { key:Key, privateKeyArmored:String, publicKeyArmored:String }\n   97   * @static\n   98   */\n   ..\n  107  \n  108      key: newKey,\n  109:     privateKeyArmored: newKey.armor(),\n  110:     publicKeyArmored: newKey.toPublic().armor()\n  111  \n  112    })).catch(err => {\n  ...\n  163   * @param  {String|Array<String>} passwords   (optional) array of passwords or a single password to encrypt the message\n  164   * @param  {String} filename                  (optional) a filename for the literal data packet\n  165:  * @param  {Boolean} armor                    (optional) if the return value should be ascii armored or the message object\n  166:  * @return {Promise<String|Message>}          encrypted ASCII armored message, or the full Message object if 'armor' is false\n  167   * @static\n  168   */\n  169: export function encrypt({ data, publicKeys, privateKeys, passwords, filename, armor=true }) {\n  170    checkData(data); publicKeys = toArray(publicKeys); privateKeys = toArray(privateKeys); passwords = toArray(passwords);\n  171  \n  172    if (asyncProxy) { // use web worker if available\n  173:     return asyncProxy.delegate('encrypt', { data, publicKeys, privateKeys, passwords, filename, armor });\n  174    }\n  175  \n  ...\n  182      message = message.encrypt(publicKeys, passwords);\n  183  \n  184:     if(armor) {\n  185        return {\n  186:         data: message.armor()\n  187        };\n  188      }\n  ...\n  238   * @param  {String} data                        cleartext input to be signed\n  239   * @param  {Key|Array<Key>} privateKeys         array of keys or single key with decrypted secret key data to sign cleartext\n  240:  * @param  {Boolean} armor                      (optional) if the return value should be ascii armored or the message object\n  241:  * @return {Promise<String|CleartextMessage>}   ASCII armored message or the message of type CleartextMessage\n  242   * @static\n  243   */\n  244: export function sign({ data, privateKeys, armor=true }) {\n  245    checkString(data);\n  246    privateKeys = toArray(privateKeys);\n  247  \n  248    if (asyncProxy) { // use web worker if available\n  249:     return asyncProxy.delegate('sign', { data, privateKeys, armor });\n  250    }\n  251  \n  ...\n  255      cleartextMessage.sign(privateKeys);\n  256  \n  257:     if(armor) {\n  258        return {\n  259:         data: cleartextMessage.armor()\n  260        };\n  261      }\n\n148 matches across 10 files\n",
			"settings":
			{
				"buffer_size": 255689,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/cleartext.js",
			"settings":
			{
				"buffer_size": 8115,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/encoding/armor.js",
			"settings":
			{
				"buffer_size": 16022,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/key.js",
			"settings":
			{
				"buffer_size": 44810,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/config/config.js",
			"settings":
			{
				"buffer_size": 2170,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 181.0,
		"last_filter": "instal",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Snippet: react",
				"Snippet: React: isMounted()"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ht",
				"HTMLBeautify"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"emm",
				"Emmet: Balance (inward)"
			],
			[
				"emme",
				"Emmet: Balance (inward)"
			],
			[
				"htm",
				"HTMLBeautify"
			]
		],
		"width": 579.0
	},
	"console":
	{
		"height": 134.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/steph/Documents/projects/openpgpjs"
	],
	"file_history":
	[
		"/Users/steph/Documents/projects/priintr_booth/scripts/11-local.rules",
		"/Users/steph/Documents/projects/priintr/server/admin/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/views/me.ejs",
		"/Users/steph/Documents/projects/priintr/app/me/index.js",
		"/Users/steph/Documents/projects/priintr/app/me/views/filter.js",
		"/Users/steph/Documents/projects/priintr/app/me/views/copies.js",
		"/Users/steph/Documents/projects/priintr/app/admin/containers/config.js",
		"/Users/steph/Documents/projects/priintr/app/me/views/end.js",
		"/Users/steph/Documents/projects/priintr/app/admin/actions/index.js",
		"/Users/steph/Documents/projects/priintr/server/conf/index.coffee",
		"/Users/steph/Documents/projects/priintr/app/me/css/style.css",
		"/Users/steph/Documents/projects/priintr/devops/edge x/README",
		"/Users/steph/Documents/projects/priintr/devops/README",
		"/Users/steph/Documents/projects/priintr/app/me/views/index.js",
		"/Users/steph/Documents/projects/priintr/app/me/api/index.js",
		"/Users/steph/Documents/projects/priintr/app/me/i18n.js",
		"/Users/steph/Documents/projects/priintr/package.json",
		"/Users/steph/Documents/projects/priintr/config/sequelize_cli.json",
		"/Users/steph/Documents/projects/priintr/app/me/views/email.js",
		"/Users/steph/Documents/projects/priintr/app/me/css/theme.css",
		"/Users/steph/Documents/projects/priintr/server/me/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/models/user.me.coffee",
		"/Users/steph/Documents/projects/priintr/config/development.json",
		"/Users/steph/Documents/projects/priintr/server/conf/schema.json",
		"/Users/steph/Documents/projects/priintr/server/views/me-popup.ejs",
		"/Users/steph/Documents/projects/priintr/server/mac/index.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/store/configureStore.dev.js",
		"/Users/steph/Documents/projects/priintr/print_server/driver/src/main.cpp",
		"/Users/steph/Documents/projects/priintr/app/me/views/home.js",
		"/Users/steph/Documents/projects/priintr/server/models/pic.coffee",
		"/Users/steph/Documents/projects/priintr/server/pic/gm/src/cmd.h",
		"/Users/steph/Documents/projects/priintr/sandbox/print/db.insert.coffee",
		"/Users/steph/Documents/projects/priintr/sandbox/youpost.coffee",
		"/Users/steph/Documents/projects/priintr/server/printer/mock/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/pic/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/slideshow/index.coffee",
		"/Users/steph/Documents/projects/picta2/print_service/PictaPrintService/PictaPrintService/PictaPrintService.cs",
		"/Users/steph/Documents/projects/priintr/server/monit/index.coffee",
		"/Users/steph/Documents/projects/priintr/sandbox/print/driver.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/socket.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/socket/server.coffee",
		"/Users/steph/Documents/projects/priintr/common/socket/client.coffee",
		"/Users/steph/Documents/projects/priintr/common/socket/server.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/mock/printerMock2.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/server.q.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/server.coffee",
		"/Users/steph/Documents/projects/priintr/sandbox/io/io.html",
		"/Users/steph/Documents/projects/priintr/sandbox/io/io.coffee",
		"/Users/steph/Documents/projects/priintr/monitor/index.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/containers/queue.js",
		"/Users/steph/Desktop/demo.mobileconfig",
		"/Users/steph/Documents/projects/priintr/server/printer/dnp/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/kiosk/index.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/queue.coffee",
		"/Users/steph/Documents/projects/priintr/monitor/handler/index.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/monit.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/models/printjob.coffee",
		"/Users/steph/Documents/projects/priintr/common/q/index.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/printjob.model.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/containers/prints.js",
		"/Users/steph/Documents/projects/priintr/sandbox/io/io2.html",
		"/Users/steph/Documents/projects/priintr/server/routes.coffee",
		"/Users/steph/Documents/projects/priintr/server/printer/index.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/socket/client.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/index.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/css/admin.css",
		"/Users/steph/Documents/projects/priintr/app/admin/components/print.js",
		"/Users/steph/Documents/projects/priintr/app/admin/containers/dash.js",
		"/Users/steph/Documents/projects/priintr/server/views/io.html",
		"/Users/steph/Documents/projects/priintr/server/index.coffee",
		"/Users/steph/Documents/projects/priintr/test/monit/monitor.counter.coffee",
		"/Users/steph/Documents/projects/priintr/test/slideshow/slide.coffee",
		"/Users/steph/Documents/projects/priintr/test/utils/index.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/monit/index.coffee",
		"/Users/steph/Documents/projects/priintr/test/monit/server.monit.coffee",
		"/Users/steph/Documents/projects/priintr/server/views/io.ejs",
		"/Users/steph/Documents/projects/priintr/monitor/socket/client.coffee",
		"/Users/steph/Documents/projects/priintr/monitor/socket/server.coffee",
		"/Users/steph/Documents/projects/priintr/config/default.json",
		"/Users/steph/Documents/projects/priintr/app/admin/components/navbar.js",
		"/Users/steph/Documents/projects/priintr/test/monit/monitor.default.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/reducers/index.js",
		"/Users/steph/Documents/projects/priintr/app.print.dev.json",
		"/Users/steph/Documents/projects/priintr/print_server/models/printer.coffee",
		"/Users/steph/Documents/projects/priintr/server/models/data.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/server.one.coffee",
		"/Users/steph/Documents/projects/priintr/test/kiosk/print.coffee",
		"/Users/steph/Documents/projects/priintr/test/print_server/server.one.offon.coffee",
		"/Users/steph/Documents/projects/priintr/config/test.json",
		"/Users/steph/Documents/projects/priintr/test/print_server/server.coffee",
		"/Users/steph/Documents/projects/priintr/print_server/driver/index.coffee",
		"/Users/steph/Documents/projects/priintr/migrations/20170120120919-print_job_queue.js",
		"/Users/steph/Documents/projects/priintr/sandbox/bcrypt.coffee",
		"/Users/steph/Documents/projects/priintr/app/admin/containers/export.js",
		"/Users/steph/Documents/projects/priintr/test/me/internet.coffee",
		"/Users/steph/Documents/projects/priintr/monitor/micro.coffee",
		"/Users/steph/Documents/projects/priintr/config/local-production-fest.json",
		"/Users/steph/Documents/projects/priintr/config/local-me.json",
		"/Users/steph/Documents/projects/priintr/config/local-selphy.json",
		"/Users/steph/Documents/projects/priintr/config/local-you.json",
		"/Users/steph/Documents/projects/priintr/config/production.json",
		"/Users/steph/Documents/projects/priintr/server/util/api.coffee",
		"/Users/steph/Documents/projects/priintr/server/middleware/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/me/fake.internet.coffee",
		"/Users/steph/Desktop/2017-01-19T07:58:41.192Z - info: [PQueue]: 2 jobs",
		"/Users/steph/Documents/projects/priintr/test/kiosk/store.coffee",
		"/Users/steph/Documents/projects/priintr/sandbox/kiosk-post.coffee",
		"/Users/steph/Documents/projects/priintr/server/pic/gm/index.coffee",
		"/Users/steph/Documents/projects/priintr/scripts/install.sh",
		"/Users/steph/Documents/projects/priintr/gulpfile.js",
		"/Users/steph/Documents/projects/priintr/server/admin/export/index.coffee",
		"/Users/steph/Documents/projects/priintr/server/models/stats.coffee",
		"/Users/steph/Documents/projects/priintr/migrations/20161228075736-email_counter.js",
		"/Users/steph/Documents/projects/priintr/test/models/print.coffee",
		"/Users/steph/Documents/projects/priintr/test/models/stats.coffee",
		"/Users/steph/Documents/projects/priintr/server/models/print.coffee",
		"/Users/steph/Documents/projects/priintr/migrations/20160906150913-pic_ratio.js",
		"/Users/steph/Documents/projects/priintr/test/kiosk/browse.coffee",
		"/Users/steph/Documents/projects/priintr/test/kiosk/captive.coffee",
		"/Users/steph/Documents/projects/priintr/test/kiosk/print.slideshow.coffee",
		"/Users/steph/Documents/projects/priintr/test/slideshow/_conf/1/config.json",
		"/Users/steph/Documents/projects/priintr/test/kiosk/_conf/1/config.json",
		"/Users/steph/Documents/projects/priintr/test/kiosk/_conf/2/config.json",
		"/Users/steph/Documents/projects/priintr/test/you/store.coffee",
		"/Users/steph/Documents/projects/priintr/test/you/store_print.coffee",
		"/Users/steph/Documents/projects/priintr/test/me/print.coffee",
		"/Users/steph/Documents/projects/priintr/app/webpack.dev.js",
		"/Users/steph/Documents/projects/priintr/app/webpack.prod.js"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/steph/Documents/projects/openpgpjs/src, *.js",
			"/Users/steph/Documents/projects/openpgpjs, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/me, *.js",
			"/Users/steph/Documents/projects/priintr/app, *.js",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr, *.coffee",
			"/Users/steph/Documents/projects/priintr/, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/mail, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/camera, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/monitor, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/camera, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/camera, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/net, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/net, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/camera, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.cpp",
			"/Users/steph/Documents/projects/priintr/print_server, *.h",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app, *.js",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/print_server, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/admin, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/me, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/booth, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/me, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app/admin, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/app, *.js",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/priintr/test, *.coffee",
			"/Users/steph/Documents/projects/priintr/server, *.coffee",
			"/Users/steph/Documents/projects/magixbox/server, *.coffee",
			"/Users/steph/Documents/projects/magixbox/, *.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/, *.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/*, *.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/, *.coffee",
			"/Users/steph/Documents/projects/magixbox/app/, *.js",
			"/Users/steph/Documents/projects/magixbox/lib/, *.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/*.*",
			"/Users/steph/Documents/projects/magixbox/lib/*.*;*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/**;*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/*;*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/**/*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/**/*.coffee",
			"/Users/steph/Documents/projects/magixbox/lib/**.coffee",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/app",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/",
			"/Users/steph/Documents/projects/magixbox/app",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox/lib",
			"/Users/steph/Documents/projects/magixbox/test",
			"/Users/steph/Documents/projects/magixbox",
			"/Users/steph/Documents/projects/picta/,*.coffee",
			"/Users/steph/Documents/projects/picta/lib,*.coffee",
			"/Users/steph/Documents/projects/picta2/lib,*.coffee",
			"/Users/steph/Documents/projects/picta2/lib .coffee",
			"/Users/steph/Documents/projects/picta2/lib/*,*.coffee",
			"/Users/steph/Documents/projects/picta2/lib/,*.coffee",
			"/Users/steph/Documents/projects/picta2/lib/**.coffee"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"show_comment",
			"armor",
			"revoke",
			"addheader",
			"versionstring",
			"OpenPGP.js",
			"\"CO\"",
			"CO",
			"revoke",
			"revojk",
			"CO",
			"_handleData",
			"_p",
			"_command",
			"_sendError",
			"path",
			"_handleData",
			"form",
			"_em\t",
			"email",
			"getLabel",
			"checked",
			"check",
			"getLabel",
			"console.log",
			"renderMaxPrints",
			"onSelfiieMaxPrintPhotoChange",
			"config",
			"value",
			"saveConfigValue",
			"onSelfiieMaxPrintPhotoChange",
			"max_print",
			"onSelfiieMaxPrintPhotoChange",
			"onSelfiieMaxPrintChange",
			"max_print",
			"max_pr",
			"max",
			"State",
			"max_print_photo",
			"isPrinterReady",
			"updateDate",
			"fetchIPs",
			"fetchIPsfetchIPs",
			"end",
			"ok",
			"api",
			"maxPrintCheck",
			"> ",
			"maxPrintCheck",
			"hasP",
			"resetDB",
			"Models",
			"resetDB",
			"mys",
			"mari",
			"CREATE DATABASE",
			"models",
			"retry",
			"seque",
			"thu",
			"thumb",
			"thumn",
			"temp",
			"PrintEventHandler",
			"PrintPageEventHandler",
			"printServer",
			"PrintServer",
			"PrintQueue",
			"Purge",
			"ListJobs",
			"printers",
			"sele",
			"EnumPrinters",
			"enumPrinters",
			"printerJobCount",
			"crop",
			"crop(",
			"Geometry(",
			"makeSquare",
			"size().height()",
			".width()",
			"top",
			"picHeight",
			"land",
			"text",
			"border",
			"optin",
			"node",
			"updateStatus",
			"go to",
			"maxFreeBuffer",
			"updateStatus",
			"no-print",
			"h1.small",
			"finis",
			"swiper",
			"no_print_check",
			"round-button",
			".pic",
			"onProcessEnd",
			"onPrintDone",
			"this.$body",
			"isPrinterReady",
			"console",
			"print",
			"hasPrintRemaining",
			"PRINTER",
			"isPrinterReady",
			"render",
			"onConfigUpdated",
			"updateStatus",
			"outputStatus",
			"printer_s",
			"printer_online",
			"updateS",
			"updateST",
			"firstCopy = FALSE",
			"updateSt",
			"updateStatus",
			"if(false",
			"updateStatus",
			"thread_mutex",
			"updateStatus",
			"goto top",
			"updateStatus",
			"firstCopy",
			"updateStatus",
			"print"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_printer",
			"className",
			"className\nclassName",
			"className\n",
			".next_time_frame.\n",
			">\n",
			"",
			"http://www.disaronnosour.be/img/",
			"transparent",
			"eventCache",
			"picStore",
			"picsStore",
			"store",
			"eventCache",
			"cache",
			"fn.call",
			"pic",
			"\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "update_deps.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 389,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 255689,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										136,
										138
									],
									[
										333,
										335
									],
									[
										534,
										536
									],
									[
										644,
										646
									],
									[
										678,
										680
									],
									[
										871,
										873
									],
									[
										1086,
										1088
									],
									[
										1274,
										1276
									],
									[
										1414,
										1416
									],
									[
										1526,
										1528
									],
									[
										1748,
										1750
									],
									[
										1831,
										1833
									],
									[
										2009,
										2011
									],
									[
										2164,
										2166
									],
									[
										2406,
										2408
									],
									[
										2414,
										2416
									],
									[
										2457,
										2459
									],
									[
										2509,
										2511
									],
									[
										2517,
										2519
									],
									[
										2611,
										2613
									],
									[
										2780,
										2782
									],
									[
										3012,
										3014
									],
									[
										3040,
										3042
									],
									[
										3107,
										3109
									],
									[
										3127,
										3129
									],
									[
										3317,
										3319
									],
									[
										3548,
										3550
									],
									[
										3792,
										3794
									],
									[
										3821,
										3823
									],
									[
										3936,
										3938
									],
									[
										3951,
										3953
									],
									[
										4067,
										4069
									],
									[
										4184,
										4186
									],
									[
										4513,
										4515
									],
									[
										4758,
										4760
									],
									[
										4974,
										4976
									],
									[
										5121,
										5123
									],
									[
										5267,
										5269
									],
									[
										5431,
										5433
									],
									[
										5653,
										5655
									],
									[
										5920,
										5922
									],
									[
										6151,
										6153
									],
									[
										6397,
										6399
									],
									[
										6406,
										6408
									],
									[
										6584,
										6586
									],
									[
										6674,
										6676
									],
									[
										6866,
										6868
									],
									[
										6873,
										6875
									],
									[
										7017,
										7019
									],
									[
										7036,
										7038
									],
									[
										7363,
										7365
									],
									[
										7509,
										7511
									],
									[
										7580,
										7582
									],
									[
										7645,
										7647
									],
									[
										7797,
										7799
									],
									[
										7804,
										7806
									],
									[
										7829,
										7831
									],
									[
										7918,
										7920
									],
									[
										8057,
										8059
									],
									[
										8115,
										8117
									],
									[
										8190,
										8192
									],
									[
										8301,
										8303
									],
									[
										8376,
										8378
									],
									[
										8397,
										8399
									],
									[
										8424,
										8426
									],
									[
										8554,
										8556
									],
									[
										8667,
										8669
									],
									[
										8689,
										8691
									],
									[
										8756,
										8758
									],
									[
										8830,
										8832
									],
									[
										8961,
										8963
									],
									[
										8990,
										8992
									],
									[
										9194,
										9196
									],
									[
										9264,
										9266
									],
									[
										9503,
										9505
									],
									[
										9690,
										9692
									],
									[
										9750,
										9752
									],
									[
										9842,
										9844
									],
									[
										10068,
										10070
									],
									[
										10079,
										10081
									],
									[
										10315,
										10317
									],
									[
										10549,
										10551
									],
									[
										10736,
										10738
									],
									[
										10796,
										10798
									],
									[
										10888,
										10890
									],
									[
										11072,
										11074
									],
									[
										11119,
										11121
									],
									[
										11346,
										11348
									],
									[
										11585,
										11587
									],
									[
										11772,
										11774
									],
									[
										11777,
										11779
									],
									[
										12008,
										12010
									],
									[
										12072,
										12074
									],
									[
										12278,
										12280
									],
									[
										12543,
										12545
									],
									[
										12737,
										12739
									],
									[
										12844,
										12846
									],
									[
										12862,
										12864
									],
									[
										12873,
										12875
									],
									[
										13074,
										13076
									],
									[
										13129,
										13131
									],
									[
										13315,
										13317
									],
									[
										13455,
										13457
									],
									[
										13737,
										13739
									],
									[
										13830,
										13832
									],
									[
										14071,
										14073
									],
									[
										14349,
										14351
									],
									[
										14570,
										14572
									],
									[
										14681,
										14683
									],
									[
										14731,
										14733
									],
									[
										15090,
										15092
									],
									[
										15277,
										15279
									],
									[
										15536,
										15538
									],
									[
										15792,
										15794
									],
									[
										16023,
										16025
									],
									[
										16400,
										16402
									],
									[
										16537,
										16539
									],
									[
										16727,
										16729
									],
									[
										16858,
										16860
									],
									[
										16934,
										16936
									],
									[
										17229,
										17231
									],
									[
										17475,
										17477
									],
									[
										17614,
										17616
									],
									[
										17769,
										17771
									],
									[
										17811,
										17813
									],
									[
										17842,
										17844
									],
									[
										18101,
										18103
									],
									[
										18256,
										18258
									],
									[
										18547,
										18549
									],
									[
										18797,
										18799
									],
									[
										18816,
										18818
									],
									[
										18845,
										18847
									],
									[
										18875,
										18877
									],
									[
										19035,
										19037
									],
									[
										19212,
										19214
									],
									[
										19445,
										19447
									],
									[
										19680,
										19682
									],
									[
										19867,
										19869
									],
									[
										19983,
										19985
									],
									[
										20127,
										20129
									],
									[
										20242,
										20244
									],
									[
										20297,
										20299
									],
									[
										20352,
										20354
									],
									[
										20406,
										20408
									],
									[
										20553,
										20555
									],
									[
										20677,
										20679
									],
									[
										20793,
										20795
									],
									[
										20840,
										20842
									],
									[
										20899,
										20901
									],
									[
										20959,
										20961
									],
									[
										21043,
										21045
									],
									[
										21143,
										21145
									],
									[
										21310,
										21312
									],
									[
										21319,
										21321
									],
									[
										21557,
										21559
									],
									[
										21649,
										21651
									],
									[
										21763,
										21765
									],
									[
										21928,
										21930
									],
									[
										22117,
										22119
									],
									[
										22272,
										22274
									],
									[
										22393,
										22395
									],
									[
										22469,
										22471
									],
									[
										22530,
										22532
									],
									[
										22651,
										22653
									],
									[
										22823,
										22825
									],
									[
										22992,
										22994
									],
									[
										23010,
										23012
									],
									[
										23079,
										23081
									],
									[
										23130,
										23132
									],
									[
										23185,
										23187
									],
									[
										23244,
										23246
									],
									[
										23296,
										23298
									],
									[
										23361,
										23363
									],
									[
										23384,
										23386
									],
									[
										23449,
										23451
									],
									[
										23492,
										23494
									],
									[
										23541,
										23543
									],
									[
										23649,
										23651
									],
									[
										23672,
										23674
									],
									[
										23707,
										23709
									],
									[
										23781,
										23783
									],
									[
										23824,
										23826
									],
									[
										23875,
										23877
									],
									[
										23924,
										23926
									],
									[
										24052,
										24054
									],
									[
										24070,
										24072
									],
									[
										24233,
										24235
									],
									[
										24264,
										24266
									],
									[
										24286,
										24288
									],
									[
										24401,
										24403
									],
									[
										24515,
										24517
									],
									[
										24640,
										24642
									],
									[
										24773,
										24775
									],
									[
										24948,
										24950
									],
									[
										25037,
										25039
									],
									[
										25184,
										25186
									],
									[
										25317,
										25319
									],
									[
										25482,
										25484
									],
									[
										25577,
										25579
									],
									[
										25595,
										25597
									],
									[
										25714,
										25716
									],
									[
										25801,
										25803
									],
									[
										25963,
										25965
									],
									[
										26096,
										26098
									],
									[
										26225,
										26227
									],
									[
										26354,
										26356
									],
									[
										26487,
										26489
									],
									[
										26623,
										26625
									],
									[
										26773,
										26775
									],
									[
										26918,
										26920
									],
									[
										27098,
										27100
									],
									[
										27251,
										27253
									],
									[
										27392,
										27394
									],
									[
										27476,
										27478
									],
									[
										27587,
										27589
									],
									[
										27740,
										27742
									],
									[
										27977,
										27979
									],
									[
										28046,
										28048
									],
									[
										28203,
										28205
									],
									[
										28371,
										28373
									],
									[
										28641,
										28643
									],
									[
										28852,
										28854
									],
									[
										29133,
										29135
									],
									[
										29414,
										29416
									],
									[
										29695,
										29697
									],
									[
										29976,
										29978
									],
									[
										30269,
										30271
									],
									[
										30498,
										30500
									],
									[
										30821,
										30823
									],
									[
										31144,
										31146
									],
									[
										31373,
										31375
									],
									[
										31695,
										31697
									],
									[
										31945,
										31947
									],
									[
										32116,
										32118
									],
									[
										32420,
										32422
									],
									[
										32696,
										32698
									],
									[
										32842,
										32844
									],
									[
										33076,
										33078
									],
									[
										33094,
										33096
									],
									[
										33113,
										33115
									],
									[
										33213,
										33215
									],
									[
										33292,
										33294
									],
									[
										33340,
										33342
									],
									[
										33489,
										33491
									],
									[
										33563,
										33565
									],
									[
										33597,
										33599
									],
									[
										33764,
										33766
									],
									[
										33824,
										33826
									],
									[
										33872,
										33874
									],
									[
										34002,
										34004
									],
									[
										34071,
										34073
									],
									[
										34119,
										34121
									],
									[
										34217,
										34219
									],
									[
										34277,
										34279
									],
									[
										34325,
										34327
									],
									[
										34425,
										34427
									],
									[
										34487,
										34489
									],
									[
										34535,
										34537
									],
									[
										34635,
										34637
									],
									[
										34697,
										34699
									],
									[
										34745,
										34747
									],
									[
										34885,
										34887
									],
									[
										35064,
										35066
									],
									[
										35252,
										35254
									],
									[
										35440,
										35442
									],
									[
										35628,
										35630
									],
									[
										35910,
										35912
									],
									[
										36064,
										36066
									],
									[
										36120,
										36122
									],
									[
										36169,
										36171
									],
									[
										36307,
										36309
									],
									[
										36372,
										36374
									],
									[
										36421,
										36423
									],
									[
										36527,
										36529
									],
									[
										36583,
										36585
									],
									[
										36632,
										36634
									],
									[
										36740,
										36742
									],
									[
										36798,
										36800
									],
									[
										36847,
										36849
									],
									[
										37008,
										37010
									],
									[
										37137,
										37139
									],
									[
										37313,
										37315
									],
									[
										37350,
										37352
									],
									[
										37375,
										37377
									],
									[
										37416,
										37418
									],
									[
										37579,
										37581
									],
									[
										37616,
										37618
									],
									[
										37641,
										37643
									],
									[
										37682,
										37684
									],
									[
										37893,
										37895
									],
									[
										38113,
										38115
									],
									[
										38344,
										38346
									],
									[
										38586,
										38588
									],
									[
										38793,
										38795
									],
									[
										39030,
										39032
									],
									[
										39193,
										39195
									],
									[
										39422,
										39424
									],
									[
										39562,
										39564
									],
									[
										39640,
										39642
									],
									[
										39754,
										39756
									],
									[
										39801,
										39803
									],
									[
										39875,
										39877
									],
									[
										39979,
										39981
									],
									[
										40125,
										40127
									],
									[
										40240,
										40242
									],
									[
										40333,
										40335
									],
									[
										40387,
										40389
									],
									[
										40451,
										40453
									],
									[
										40481,
										40483
									],
									[
										40498,
										40500
									],
									[
										40560,
										40562
									],
									[
										40699,
										40701
									],
									[
										40749,
										40751
									],
									[
										41099,
										41101
									],
									[
										41177,
										41179
									],
									[
										41225,
										41227
									],
									[
										41267,
										41269
									],
									[
										41532,
										41534
									],
									[
										41738,
										41740
									],
									[
										41822,
										41824
									],
									[
										42065,
										42067
									],
									[
										42108,
										42110
									],
									[
										42191,
										42193
									],
									[
										42286,
										42288
									],
									[
										42336,
										42338
									],
									[
										42413,
										42415
									],
									[
										42660,
										42662
									],
									[
										42891,
										42893
									],
									[
										43198,
										43200
									],
									[
										43217,
										43219
									],
									[
										43361,
										43363
									],
									[
										43740,
										43742
									],
									[
										43778,
										43780
									],
									[
										43828,
										43830
									],
									[
										43866,
										43868
									],
									[
										44050,
										44052
									],
									[
										44306,
										44308
									],
									[
										44537,
										44539
									],
									[
										44836,
										44838
									],
									[
										45039,
										45041
									],
									[
										45227,
										45229
									],
									[
										45303,
										45305
									],
									[
										45438,
										45440
									],
									[
										45480,
										45482
									],
									[
										45559,
										45561
									],
									[
										45806,
										45808
									],
									[
										46048,
										46050
									],
									[
										46152,
										46154
									],
									[
										46233,
										46235
									],
									[
										46246,
										46248
									],
									[
										46386,
										46388
									],
									[
										46496,
										46498
									],
									[
										46725,
										46727
									],
									[
										46943,
										46945
									],
									[
										47085,
										47087
									],
									[
										47169,
										47171
									],
									[
										47254,
										47256
									],
									[
										47400,
										47402
									],
									[
										47489,
										47491
									],
									[
										47531,
										47533
									],
									[
										47720,
										47722
									],
									[
										47865,
										47867
									],
									[
										48047,
										48049
									],
									[
										48158,
										48160
									],
									[
										48183,
										48185
									],
									[
										48317,
										48319
									],
									[
										48490,
										48492
									],
									[
										48605,
										48607
									],
									[
										48644,
										48646
									],
									[
										48771,
										48773
									],
									[
										48782,
										48784
									],
									[
										48930,
										48932
									],
									[
										49072,
										49074
									],
									[
										49225,
										49227
									],
									[
										49450,
										49452
									],
									[
										49656,
										49658
									],
									[
										49768,
										49770
									],
									[
										49782,
										49784
									],
									[
										49959,
										49961
									],
									[
										50014,
										50016
									],
									[
										50142,
										50144
									],
									[
										50154,
										50156
									],
									[
										50390,
										50392
									],
									[
										50404,
										50406
									],
									[
										50581,
										50583
									],
									[
										50691,
										50693
									],
									[
										50894,
										50896
									],
									[
										51082,
										51084
									],
									[
										51158,
										51160
									],
									[
										51293,
										51295
									],
									[
										51335,
										51337
									],
									[
										51414,
										51416
									],
									[
										51661,
										51663
									],
									[
										51903,
										51905
									],
									[
										52007,
										52009
									],
									[
										52088,
										52090
									],
									[
										52101,
										52103
									],
									[
										52227,
										52229
									],
									[
										52311,
										52313
									],
									[
										52420,
										52422
									],
									[
										52604,
										52606
									],
									[
										52708,
										52710
									],
									[
										52811,
										52813
									],
									[
										52951,
										52953
									],
									[
										53037,
										53039
									],
									[
										53133,
										53135
									],
									[
										53260,
										53262
									],
									[
										53371,
										53373
									],
									[
										53514,
										53516
									],
									[
										53613,
										53615
									],
									[
										53701,
										53703
									],
									[
										53915,
										53917
									],
									[
										54018,
										54020
									],
									[
										54127,
										54129
									],
									[
										54144,
										54146
									],
									[
										54314,
										54316
									],
									[
										54445,
										54447
									],
									[
										54621,
										54623
									],
									[
										54814,
										54816
									],
									[
										55025,
										55027
									],
									[
										55172,
										55174
									],
									[
										55302,
										55304
									],
									[
										55373,
										55375
									],
									[
										55604,
										55606
									],
									[
										55666,
										55668
									],
									[
										55832,
										55834
									],
									[
										55868,
										55870
									],
									[
										55947,
										55949
									],
									[
										56031,
										56033
									],
									[
										56111,
										56113
									],
									[
										56326,
										56328
									],
									[
										56339,
										56341
									],
									[
										56590,
										56592
									],
									[
										56821,
										56823
									],
									[
										57129,
										57131
									],
									[
										57148,
										57150
									],
									[
										57281,
										57283
									],
									[
										57422,
										57424
									],
									[
										57543,
										57545
									],
									[
										57763,
										57765
									],
									[
										57797,
										57799
									],
									[
										57879,
										57881
									],
									[
										57972,
										57974
									],
									[
										58139,
										58141
									],
									[
										58319,
										58321
									],
									[
										58577,
										58579
									],
									[
										58728,
										58730
									],
									[
										58956,
										58958
									],
									[
										59228,
										59230
									],
									[
										59459,
										59461
									],
									[
										59761,
										59763
									],
									[
										59938,
										59940
									],
									[
										60017,
										60019
									],
									[
										60174,
										60176
									],
									[
										60411,
										60413
									],
									[
										60545,
										60547
									],
									[
										60704,
										60706
									],
									[
										61103,
										61105
									],
									[
										61352,
										61354
									],
									[
										61403,
										61405
									],
									[
										61642,
										61644
									],
									[
										61895,
										61897
									],
									[
										62175,
										62177
									],
									[
										62406,
										62408
									],
									[
										62652,
										62654
									],
									[
										62712,
										62714
									],
									[
										62739,
										62741
									],
									[
										62872,
										62874
									],
									[
										62888,
										62890
									],
									[
										63011,
										63013
									],
									[
										63185,
										63187
									],
									[
										63243,
										63245
									],
									[
										63298,
										63300
									],
									[
										63310,
										63312
									],
									[
										63343,
										63345
									],
									[
										63356,
										63358
									],
									[
										63363,
										63365
									],
									[
										63526,
										63528
									],
									[
										63636,
										63638
									],
									[
										63834,
										63836
									],
									[
										63933,
										63935
									],
									[
										63979,
										63981
									],
									[
										64106,
										64108
									],
									[
										64179,
										64181
									],
									[
										64449,
										64451
									],
									[
										64510,
										64512
									],
									[
										64676,
										64678
									],
									[
										64736,
										64738
									],
									[
										64969,
										64971
									],
									[
										65304,
										65306
									],
									[
										65362,
										65364
									],
									[
										65546,
										65548
									],
									[
										65673,
										65675
									],
									[
										65732,
										65734
									],
									[
										65882,
										65884
									],
									[
										66088,
										66090
									],
									[
										66349,
										66351
									],
									[
										66691,
										66693
									],
									[
										66997,
										66999
									],
									[
										67285,
										67287
									],
									[
										67570,
										67572
									],
									[
										67869,
										67871
									],
									[
										68064,
										68066
									],
									[
										68088,
										68090
									],
									[
										68230,
										68232
									],
									[
										68239,
										68241
									],
									[
										68256,
										68258
									],
									[
										68492,
										68494
									],
									[
										68679,
										68681
									],
									[
										68739,
										68741
									],
									[
										68831,
										68833
									],
									[
										68999,
										69001
									],
									[
										69067,
										69069
									],
									[
										69146,
										69148
									],
									[
										69268,
										69270
									],
									[
										69348,
										69350
									],
									[
										69492,
										69494
									],
									[
										69514,
										69516
									],
									[
										69643,
										69645
									],
									[
										69671,
										69673
									],
									[
										69801,
										69803
									],
									[
										69992,
										69994
									],
									[
										70108,
										70110
									],
									[
										70175,
										70177
									],
									[
										70242,
										70244
									],
									[
										70410,
										70412
									],
									[
										70576,
										70578
									],
									[
										70917,
										70919
									],
									[
										71250,
										71252
									],
									[
										71561,
										71563
									],
									[
										71909,
										71911
									],
									[
										72141,
										72143
									],
									[
										72234,
										72236
									],
									[
										72519,
										72521
									],
									[
										72715,
										72717
									],
									[
										72964,
										72966
									],
									[
										73002,
										73004
									],
									[
										73151,
										73153
									],
									[
										73413,
										73415
									],
									[
										73604,
										73606
									],
									[
										73763,
										73765
									],
									[
										73998,
										74000
									],
									[
										74223,
										74225
									],
									[
										74538,
										74540
									],
									[
										74685,
										74687
									],
									[
										74700,
										74702
									],
									[
										74768,
										74770
									],
									[
										74836,
										74838
									],
									[
										74965,
										74967
									],
									[
										75130,
										75132
									],
									[
										75321,
										75323
									],
									[
										75328,
										75330
									],
									[
										75411,
										75413
									],
									[
										75418,
										75420
									],
									[
										75598,
										75600
									],
									[
										75642,
										75644
									],
									[
										75710,
										75712
									],
									[
										75717,
										75719
									],
									[
										75890,
										75892
									],
									[
										76008,
										76010
									],
									[
										76138,
										76140
									],
									[
										76238,
										76240
									],
									[
										76344,
										76346
									],
									[
										76425,
										76427
									],
									[
										76432,
										76434
									],
									[
										76470,
										76472
									],
									[
										76515,
										76517
									],
									[
										76532,
										76534
									],
									[
										76539,
										76541
									],
									[
										76697,
										76699
									],
									[
										76928,
										76930
									],
									[
										77172,
										77174
									],
									[
										77201,
										77203
									],
									[
										77380,
										77382
									],
									[
										77412,
										77414
									],
									[
										77427,
										77429
									],
									[
										77570,
										77572
									],
									[
										77607,
										77609
									],
									[
										77937,
										77939
									],
									[
										78210,
										78212
									],
									[
										78473,
										78475
									],
									[
										78688,
										78690
									],
									[
										78808,
										78810
									],
									[
										78965,
										78967
									],
									[
										79133,
										79135
									],
									[
										79254,
										79256
									],
									[
										79481,
										79483
									],
									[
										79647,
										79649
									],
									[
										79903,
										79905
									],
									[
										80113,
										80115
									],
									[
										80391,
										80393
									],
									[
										80548,
										80550
									],
									[
										80838,
										80840
									],
									[
										80897,
										80899
									],
									[
										80950,
										80952
									],
									[
										81161,
										81163
									],
									[
										81427,
										81429
									],
									[
										81567,
										81569
									],
									[
										81689,
										81691
									],
									[
										81927,
										81929
									],
									[
										82194,
										82196
									],
									[
										82686,
										82688
									],
									[
										83109,
										83111
									],
									[
										83499,
										83501
									],
									[
										83565,
										83567
									],
									[
										83598,
										83600
									],
									[
										83655,
										83657
									],
									[
										83688,
										83690
									],
									[
										83820,
										83822
									],
									[
										84176,
										84178
									],
									[
										84274,
										84276
									],
									[
										84539,
										84541
									],
									[
										84747,
										84749
									],
									[
										84830,
										84832
									],
									[
										84907,
										84909
									],
									[
										85167,
										85169
									],
									[
										85400,
										85402
									],
									[
										85689,
										85691
									],
									[
										85910,
										85912
									],
									[
										86141,
										86143
									],
									[
										86509,
										86511
									],
									[
										86740,
										86742
									],
									[
										86818,
										86820
									],
									[
										87048,
										87050
									],
									[
										87123,
										87125
									],
									[
										87337,
										87339
									],
									[
										87531,
										87533
									],
									[
										87762,
										87764
									],
									[
										88121,
										88123
									],
									[
										88282,
										88284
									],
									[
										88298,
										88300
									],
									[
										88537,
										88539
									],
									[
										88831,
										88833
									],
									[
										88965,
										88967
									],
									[
										89181,
										89183
									],
									[
										89369,
										89371
									],
									[
										89445,
										89447
									],
									[
										89570,
										89572
									],
									[
										89612,
										89614
									],
									[
										89691,
										89693
									],
									[
										90024,
										90026
									],
									[
										90129,
										90131
									],
									[
										90195,
										90197
									],
									[
										90406,
										90408
									],
									[
										90447,
										90449
									],
									[
										90520,
										90522
									],
									[
										90741,
										90743
									],
									[
										90845,
										90847
									],
									[
										90858,
										90860
									],
									[
										90890,
										90892
									],
									[
										91171,
										91173
									],
									[
										91270,
										91272
									],
									[
										91373,
										91375
									],
									[
										91472,
										91474
									],
									[
										91644,
										91646
									],
									[
										91678,
										91680
									],
									[
										91716,
										91718
									],
									[
										91753,
										91755
									],
									[
										91910,
										91912
									],
									[
										92013,
										92015
									],
									[
										92116,
										92118
									],
									[
										92192,
										92194
									],
									[
										92302,
										92304
									],
									[
										92345,
										92347
									],
									[
										92569,
										92571
									],
									[
										92866,
										92868
									],
									[
										93010,
										93012
									],
									[
										93093,
										93095
									],
									[
										93177,
										93179
									],
									[
										93266,
										93268
									],
									[
										93364,
										93366
									],
									[
										93503,
										93505
									],
									[
										93626,
										93628
									],
									[
										93978,
										93980
									],
									[
										94049,
										94051
									],
									[
										94063,
										94065
									],
									[
										94274,
										94276
									],
									[
										94498,
										94500
									],
									[
										94626,
										94628
									],
									[
										94713,
										94715
									],
									[
										94973,
										94975
									],
									[
										95325,
										95327
									],
									[
										95426,
										95428
									],
									[
										95656,
										95658
									],
									[
										95831,
										95833
									],
									[
										96061,
										96063
									],
									[
										96082,
										96084
									],
									[
										96286,
										96288
									],
									[
										96566,
										96568
									],
									[
										96797,
										96799
									],
									[
										97041,
										97043
									],
									[
										97097,
										97099
									],
									[
										97276,
										97278
									],
									[
										97308,
										97310
									],
									[
										97323,
										97325
									],
									[
										97557,
										97559
									],
									[
										97875,
										97877
									],
									[
										98281,
										98283
									],
									[
										98645,
										98647
									],
									[
										98845,
										98847
									],
									[
										99001,
										99003
									],
									[
										99377,
										99379
									],
									[
										99590,
										99592
									],
									[
										99969,
										99971
									],
									[
										100194,
										100196
									],
									[
										100358,
										100360
									],
									[
										100708,
										100710
									],
									[
										100975,
										100977
									],
									[
										101154,
										101156
									],
									[
										101224,
										101226
									],
									[
										101235,
										101237
									],
									[
										101296,
										101298
									],
									[
										101335,
										101337
									],
									[
										101386,
										101388
									],
									[
										101412,
										101414
									],
									[
										101463,
										101465
									],
									[
										101616,
										101618
									],
									[
										101843,
										101845
									],
									[
										101976,
										101978
									],
									[
										102044,
										102046
									],
									[
										102074,
										102076
									],
									[
										102265,
										102267
									],
									[
										102273,
										102275
									],
									[
										102414,
										102416
									],
									[
										102593,
										102595
									],
									[
										102833,
										102835
									],
									[
										103064,
										103066
									],
									[
										103289,
										103291
									],
									[
										103574,
										103576
									],
									[
										103750,
										103752
									],
									[
										104010,
										104012
									],
									[
										104025,
										104027
									],
									[
										104032,
										104034
									],
									[
										104348,
										104350
									],
									[
										104534,
										104536
									],
									[
										104787,
										104789
									],
									[
										104862,
										104864
									],
									[
										104878,
										104880
									],
									[
										105092,
										105094
									],
									[
										105108,
										105110
									],
									[
										105369,
										105371
									],
									[
										105620,
										105622
									],
									[
										106045,
										106047
									],
									[
										106316,
										106318
									],
									[
										106655,
										106657
									],
									[
										106831,
										106833
									],
									[
										107024,
										107026
									],
									[
										107045,
										107047
									],
									[
										107148,
										107150
									],
									[
										107270,
										107272
									],
									[
										107309,
										107311
									],
									[
										107576,
										107578
									],
									[
										107820,
										107822
									],
									[
										107836,
										107838
									],
									[
										108185,
										108187
									],
									[
										108226,
										108228
									],
									[
										108247,
										108249
									],
									[
										108472,
										108474
									],
									[
										108745,
										108747
									],
									[
										108970,
										108972
									],
									[
										109239,
										109241
									],
									[
										109488,
										109490
									],
									[
										109513,
										109515
									],
									[
										109786,
										109788
									],
									[
										109961,
										109963
									],
									[
										110229,
										110231
									],
									[
										110460,
										110462
									],
									[
										110716,
										110718
									],
									[
										110850,
										110852
									],
									[
										110873,
										110875
									],
									[
										110882,
										110884
									],
									[
										110949,
										110951
									],
									[
										111051,
										111053
									],
									[
										111103,
										111105
									],
									[
										111140,
										111142
									],
									[
										111183,
										111185
									],
									[
										111282,
										111284
									],
									[
										111424,
										111426
									],
									[
										111484,
										111486
									],
									[
										111550,
										111552
									],
									[
										111612,
										111614
									],
									[
										111666,
										111668
									],
									[
										111804,
										111806
									],
									[
										111918,
										111920
									],
									[
										111959,
										111961
									],
									[
										112051,
										112053
									],
									[
										112128,
										112130
									],
									[
										112246,
										112248
									],
									[
										112348,
										112350
									],
									[
										112412,
										112414
									],
									[
										112456,
										112458
									],
									[
										112531,
										112533
									],
									[
										112601,
										112603
									],
									[
										112677,
										112679
									],
									[
										112730,
										112732
									],
									[
										112766,
										112768
									],
									[
										112827,
										112829
									],
									[
										112866,
										112868
									],
									[
										112918,
										112920
									],
									[
										112969,
										112971
									],
									[
										113006,
										113008
									],
									[
										113068,
										113070
									],
									[
										113093,
										113095
									],
									[
										113109,
										113111
									],
									[
										113173,
										113175
									],
									[
										113196,
										113198
									],
									[
										113236,
										113238
									],
									[
										113319,
										113321
									],
									[
										113347,
										113349
									],
									[
										113365,
										113367
									],
									[
										113487,
										113489
									],
									[
										113515,
										113517
									],
									[
										113538,
										113540
									],
									[
										113652,
										113654
									],
									[
										113680,
										113682
									],
									[
										113703,
										113705
									],
									[
										113843,
										113845
									],
									[
										113958,
										113960
									],
									[
										114058,
										114060
									],
									[
										114110,
										114112
									],
									[
										114145,
										114147
									],
									[
										114179,
										114181
									],
									[
										114200,
										114202
									],
									[
										114240,
										114242
									],
									[
										114272,
										114274
									],
									[
										114377,
										114379
									],
									[
										114410,
										114412
									],
									[
										114439,
										114441
									],
									[
										114454,
										114456
									],
									[
										114605,
										114607
									],
									[
										114636,
										114638
									],
									[
										114657,
										114659
									],
									[
										114801,
										114803
									],
									[
										114832,
										114834
									],
									[
										114853,
										114855
									],
									[
										115005,
										115007
									],
									[
										115120,
										115122
									],
									[
										115310,
										115312
									],
									[
										115532,
										115534
									],
									[
										115763,
										115765
									],
									[
										116156,
										116158
									],
									[
										116304,
										116306
									],
									[
										116520,
										116522
									],
									[
										116710,
										116712
									],
									[
										116798,
										116800
									],
									[
										116880,
										116882
									],
									[
										117023,
										117025
									],
									[
										117060,
										117062
									],
									[
										117242,
										117244
									],
									[
										117525,
										117527
									],
									[
										117698,
										117700
									],
									[
										117923,
										117925
									],
									[
										118154,
										118156
									],
									[
										118395,
										118397
									],
									[
										118536,
										118538
									],
									[
										118735,
										118737
									],
									[
										118966,
										118968
									],
									[
										119402,
										119404
									],
									[
										119651,
										119653
									],
									[
										119784,
										119786
									],
									[
										119943,
										119945
									],
									[
										120160,
										120162
									],
									[
										120391,
										120393
									],
									[
										120637,
										120639
									],
									[
										120789,
										120791
									],
									[
										121023,
										121025
									],
									[
										121262,
										121264
									],
									[
										121510,
										121512
									],
									[
										121632,
										121634
									],
									[
										121990,
										121992
									],
									[
										122258,
										122260
									],
									[
										122476,
										122478
									],
									[
										122671,
										122673
									],
									[
										122819,
										122821
									],
									[
										122923,
										122925
									],
									[
										123089,
										123091
									],
									[
										123181,
										123183
									],
									[
										123322,
										123324
									],
									[
										123398,
										123400
									],
									[
										123481,
										123483
									],
									[
										123742,
										123744
									],
									[
										123973,
										123975
									],
									[
										124310,
										124312
									],
									[
										124461,
										124463
									],
									[
										124491,
										124493
									],
									[
										124589,
										124591
									],
									[
										124760,
										124762
									],
									[
										124787,
										124789
									],
									[
										124914,
										124916
									],
									[
										125150,
										125152
									],
									[
										125333,
										125335
									],
									[
										125360,
										125362
									],
									[
										125423,
										125425
									],
									[
										125519,
										125521
									],
									[
										125639,
										125641
									],
									[
										125844,
										125846
									],
									[
										126100,
										126102
									],
									[
										126127,
										126129
									],
									[
										126184,
										126186
									],
									[
										126423,
										126425
									],
									[
										126654,
										126656
									],
									[
										126895,
										126897
									],
									[
										127037,
										127039
									],
									[
										127203,
										127205
									],
									[
										127359,
										127361
									],
									[
										127508,
										127510
									],
									[
										127681,
										127683
									],
									[
										127867,
										127869
									],
									[
										127894,
										127896
									],
									[
										127953,
										127955
									],
									[
										127974,
										127976
									],
									[
										128176,
										128178
									],
									[
										128186,
										128188
									],
									[
										128366,
										128368
									],
									[
										128597,
										128599
									],
									[
										128838,
										128840
									],
									[
										128998,
										129000
									],
									[
										129178,
										129180
									],
									[
										129409,
										129411
									],
									[
										129746,
										129748
									],
									[
										129897,
										129899
									],
									[
										129927,
										129929
									],
									[
										130025,
										130027
									],
									[
										130179,
										130181
									],
									[
										130314,
										130316
									],
									[
										130501,
										130503
									],
									[
										130632,
										130634
									],
									[
										130748,
										130750
									],
									[
										130875,
										130877
									],
									[
										131167,
										131169
									],
									[
										131368,
										131370
									],
									[
										131554,
										131556
									],
									[
										131702,
										131704
									],
									[
										131864,
										131866
									],
									[
										132063,
										132065
									],
									[
										132220,
										132222
									],
									[
										132471,
										132473
									],
									[
										132687,
										132689
									],
									[
										132918,
										132920
									],
									[
										133159,
										133161
									],
									[
										133319,
										133321
									],
									[
										133498,
										133500
									],
									[
										133729,
										133731
									],
									[
										134126,
										134128
									],
									[
										134317,
										134319
									],
									[
										134491,
										134493
									],
									[
										134702,
										134704
									],
									[
										134936,
										134938
									],
									[
										135177,
										135179
									],
									[
										135374,
										135376
									],
									[
										135488,
										135490
									],
									[
										135771,
										135773
									],
									[
										136064,
										136066
									],
									[
										136294,
										136296
									],
									[
										136394,
										136396
									],
									[
										136470,
										136472
									],
									[
										136690,
										136692
									],
									[
										137058,
										137060
									],
									[
										137214,
										137216
									],
									[
										137324,
										137326
									],
									[
										137473,
										137475
									],
									[
										137653,
										137655
									],
									[
										137787,
										137789
									],
									[
										137808,
										137810
									],
									[
										137922,
										137924
									],
									[
										137981,
										137983
									],
									[
										138102,
										138104
									],
									[
										138123,
										138125
									],
									[
										138233,
										138235
									],
									[
										138278,
										138280
									],
									[
										138391,
										138393
									],
									[
										138459,
										138461
									],
									[
										138641,
										138643
									],
									[
										138876,
										138878
									],
									[
										139060,
										139062
									],
									[
										139272,
										139274
									],
									[
										139403,
										139405
									],
									[
										139633,
										139635
									],
									[
										139822,
										139824
									],
									[
										139925,
										139927
									],
									[
										140186,
										140188
									],
									[
										140449,
										140451
									],
									[
										140680,
										140682
									],
									[
										141103,
										141105
									],
									[
										141145,
										141147
									],
									[
										141266,
										141268
									],
									[
										141443,
										141445
									],
									[
										141491,
										141493
									],
									[
										141558,
										141560
									],
									[
										141788,
										141790
									],
									[
										141979,
										141981
									],
									[
										142278,
										142280
									],
									[
										142363,
										142365
									],
									[
										142450,
										142452
									],
									[
										142525,
										142527
									],
									[
										142599,
										142601
									],
									[
										142659,
										142661
									],
									[
										142787,
										142789
									],
									[
										142973,
										142975
									],
									[
										143259,
										143261
									],
									[
										143406,
										143408
									],
									[
										143532,
										143534
									],
									[
										143743,
										143745
									],
									[
										143929,
										143931
									],
									[
										144217,
										144219
									],
									[
										144373,
										144375
									],
									[
										144677,
										144679
									],
									[
										144908,
										144910
									],
									[
										145149,
										145151
									],
									[
										145317,
										145319
									],
									[
										145495,
										145497
									],
									[
										145718,
										145720
									],
									[
										145983,
										145985
									],
									[
										146214,
										146216
									],
									[
										146640,
										146642
									],
									[
										146737,
										146739
									],
									[
										146804,
										146806
									],
									[
										147063,
										147065
									],
									[
										147079,
										147081
									],
									[
										147118,
										147120
									],
									[
										147319,
										147321
									],
									[
										147449,
										147451
									],
									[
										147699,
										147701
									],
									[
										147944,
										147946
									],
									[
										148123,
										148125
									],
									[
										148335,
										148337
									],
									[
										148566,
										148568
									],
									[
										148932,
										148934
									],
									[
										149139,
										149141
									],
									[
										149284,
										149286
									],
									[
										149456,
										149458
									],
									[
										149518,
										149520
									],
									[
										149793,
										149795
									],
									[
										150024,
										150026
									],
									[
										150339,
										150341
									],
									[
										150452,
										150454
									],
									[
										150571,
										150573
									],
									[
										150721,
										150723
									],
									[
										150849,
										150851
									],
									[
										150928,
										150930
									],
									[
										151070,
										151072
									],
									[
										151233,
										151235
									],
									[
										151413,
										151415
									],
									[
										151644,
										151646
									],
									[
										151885,
										151887
									],
									[
										152084,
										152086
									],
									[
										152315,
										152317
									],
									[
										152639,
										152641
									],
									[
										152766,
										152768
									],
									[
										152883,
										152885
									],
									[
										153133,
										153135
									],
									[
										153290,
										153292
									],
									[
										153549,
										153551
									],
									[
										153579,
										153581
									],
									[
										153643,
										153645
									],
									[
										153844,
										153846
									],
									[
										154075,
										154077
									],
									[
										154485,
										154487
									],
									[
										154704,
										154706
									],
									[
										154854,
										154856
									],
									[
										154964,
										154966
									],
									[
										155119,
										155121
									],
									[
										155139,
										155141
									],
									[
										155251,
										155253
									],
									[
										155442,
										155444
									],
									[
										155522,
										155524
									],
									[
										155704,
										155706
									],
									[
										155897,
										155899
									],
									[
										156047,
										156049
									],
									[
										156182,
										156184
									],
									[
										156198,
										156200
									],
									[
										156236,
										156238
									],
									[
										156334,
										156336
									],
									[
										156427,
										156429
									],
									[
										156490,
										156492
									],
									[
										156538,
										156540
									],
									[
										156628,
										156630
									],
									[
										156740,
										156742
									],
									[
										156934,
										156936
									],
									[
										157165,
										157167
									],
									[
										157411,
										157413
									],
									[
										157458,
										157460
									],
									[
										157548,
										157550
									],
									[
										157563,
										157565
									],
									[
										157661,
										157663
									],
									[
										157964,
										157966
									],
									[
										158266,
										158268
									],
									[
										158277,
										158279
									],
									[
										158337,
										158339
									],
									[
										158381,
										158383
									],
									[
										158529,
										158531
									],
									[
										158559,
										158561
									],
									[
										158671,
										158673
									],
									[
										158725,
										158727
									],
									[
										158933,
										158935
									],
									[
										158958,
										158960
									],
									[
										159079,
										159081
									],
									[
										159273,
										159275
									],
									[
										159317,
										159319
									],
									[
										159478,
										159480
									],
									[
										159641,
										159643
									],
									[
										159700,
										159702
									],
									[
										159744,
										159746
									],
									[
										159934,
										159936
									],
									[
										160153,
										160155
									],
									[
										160282,
										160284
									],
									[
										160389,
										160391
									],
									[
										160480,
										160482
									],
									[
										160537,
										160539
									],
									[
										160544,
										160546
									],
									[
										160606,
										160608
									],
									[
										160810,
										160812
									],
									[
										161006,
										161008
									],
									[
										161013,
										161015
									],
									[
										161128,
										161130
									],
									[
										161249,
										161251
									],
									[
										161462,
										161464
									],
									[
										161563,
										161565
									],
									[
										161653,
										161655
									],
									[
										161858,
										161860
									],
									[
										161947,
										161949
									],
									[
										162022,
										162024
									],
									[
										162248,
										162250
									],
									[
										162337,
										162339
									],
									[
										162547,
										162549
									],
									[
										162756,
										162758
									],
									[
										162857,
										162859
									],
									[
										162910,
										162912
									],
									[
										162990,
										162992
									],
									[
										163035,
										163037
									],
									[
										163076,
										163078
									],
									[
										163289,
										163291
									],
									[
										163418,
										163420
									],
									[
										163468,
										163470
									],
									[
										163524,
										163526
									],
									[
										163599,
										163601
									],
									[
										163804,
										163806
									],
									[
										163852,
										163854
									],
									[
										163887,
										163889
									],
									[
										164048,
										164050
									],
									[
										164218,
										164220
									],
									[
										164341,
										164343
									],
									[
										164389,
										164391
									],
									[
										164590,
										164592
									],
									[
										164597,
										164599
									],
									[
										164753,
										164755
									],
									[
										164782,
										164784
									],
									[
										164957,
										164959
									],
									[
										164964,
										164966
									],
									[
										165225,
										165227
									],
									[
										165306,
										165308
									],
									[
										165401,
										165403
									],
									[
										165435,
										165437
									],
									[
										165518,
										165520
									],
									[
										165570,
										165572
									],
									[
										165717,
										165719
									],
									[
										165733,
										165735
									],
									[
										165929,
										165931
									],
									[
										166097,
										166099
									],
									[
										166167,
										166169
									],
									[
										166274,
										166276
									],
									[
										166366,
										166368
									],
									[
										166503,
										166505
									],
									[
										166599,
										166601
									],
									[
										166748,
										166750
									],
									[
										166841,
										166843
									],
									[
										167124,
										167126
									],
									[
										167289,
										167291
									],
									[
										167385,
										167387
									],
									[
										167554,
										167556
									],
									[
										167673,
										167675
									],
									[
										167810,
										167812
									],
									[
										168032,
										168034
									],
									[
										168263,
										168265
									],
									[
										168528,
										168530
									],
									[
										168769,
										168771
									],
									[
										168899,
										168901
									],
									[
										168908,
										168910
									],
									[
										168926,
										168928
									],
									[
										169171,
										169173
									],
									[
										169361,
										169363
									],
									[
										169415,
										169417
									],
									[
										169427,
										169429
									],
									[
										169542,
										169544
									],
									[
										169713,
										169715
									],
									[
										169916,
										169918
									],
									[
										170091,
										170093
									],
									[
										170328,
										170330
									],
									[
										170604,
										170606
									],
									[
										170835,
										170837
									],
									[
										171101,
										171103
									],
									[
										171144,
										171146
									],
									[
										171177,
										171179
									],
									[
										171193,
										171195
									],
									[
										171415,
										171417
									],
									[
										171594,
										171596
									],
									[
										171709,
										171711
									],
									[
										171789,
										171791
									],
									[
										171819,
										171821
									],
									[
										172025,
										172027
									],
									[
										172162,
										172164
									],
									[
										172297,
										172299
									],
									[
										172528,
										172530
									],
									[
										172667,
										172669
									],
									[
										172817,
										172819
									],
									[
										172947,
										172949
									],
									[
										173124,
										173126
									],
									[
										173176,
										173178
									],
									[
										173195,
										173197
									],
									[
										173220,
										173222
									],
									[
										173347,
										173349
									],
									[
										173398,
										173400
									],
									[
										173417,
										173419
									],
									[
										173442,
										173444
									],
									[
										173537,
										173539
									],
									[
										173772,
										173774
									],
									[
										173917,
										173919
									],
									[
										173990,
										173992
									],
									[
										174020,
										174022
									],
									[
										174230,
										174232
									],
									[
										174342,
										174344
									],
									[
										174508,
										174510
									],
									[
										174652,
										174654
									],
									[
										174799,
										174801
									],
									[
										174869,
										174871
									],
									[
										174960,
										174962
									],
									[
										175294,
										175296
									],
									[
										175298,
										175300
									],
									[
										175638,
										175640
									],
									[
										175642,
										175644
									],
									[
										175927,
										175929
									],
									[
										176170,
										176172
									],
									[
										176428,
										176430
									],
									[
										176469,
										176471
									],
									[
										176854,
										176856
									],
									[
										177153,
										177155
									],
									[
										177448,
										177450
									],
									[
										177708,
										177710
									],
									[
										177888,
										177890
									],
									[
										178229,
										178231
									],
									[
										178491,
										178493
									],
									[
										178679,
										178681
									],
									[
										178959,
										178961
									],
									[
										179204,
										179206
									],
									[
										179234,
										179236
									],
									[
										179417,
										179419
									],
									[
										179426,
										179428
									],
									[
										179728,
										179730
									],
									[
										179977,
										179979
									],
									[
										180289,
										180291
									],
									[
										180325,
										180327
									],
									[
										180721,
										180723
									],
									[
										180900,
										180902
									],
									[
										181348,
										181350
									],
									[
										181863,
										181865
									],
									[
										182156,
										182158
									],
									[
										182340,
										182342
									],
									[
										182572,
										182574
									],
									[
										182934,
										182936
									],
									[
										183173,
										183175
									],
									[
										183191,
										183193
									],
									[
										183321,
										183323
									],
									[
										183751,
										183753
									],
									[
										184171,
										184173
									],
									[
										184598,
										184600
									],
									[
										185071,
										185073
									],
									[
										185430,
										185432
									],
									[
										185870,
										185872
									],
									[
										186257,
										186259
									],
									[
										186632,
										186634
									],
									[
										187028,
										187030
									],
									[
										187146,
										187148
									],
									[
										187526,
										187528
									],
									[
										187955,
										187957
									],
									[
										188329,
										188331
									],
									[
										188706,
										188708
									],
									[
										189109,
										189111
									],
									[
										189471,
										189473
									],
									[
										189747,
										189749
									],
									[
										190043,
										190045
									],
									[
										190424,
										190426
									],
									[
										190465,
										190467
									],
									[
										190851,
										190853
									],
									[
										190873,
										190875
									],
									[
										190950,
										190952
									],
									[
										190981,
										190983
									],
									[
										190993,
										190995
									],
									[
										191086,
										191088
									],
									[
										191222,
										191224
									],
									[
										191606,
										191608
									],
									[
										191855,
										191857
									],
									[
										192167,
										192169
									],
									[
										192475,
										192477
									],
									[
										192518,
										192520
									],
									[
										192925,
										192927
									],
									[
										193197,
										193199
									],
									[
										193434,
										193436
									],
									[
										193882,
										193884
									],
									[
										194011,
										194013
									],
									[
										194438,
										194440
									],
									[
										194655,
										194657
									],
									[
										194945,
										194947
									],
									[
										195066,
										195068
									],
									[
										195391,
										195393
									],
									[
										195607,
										195609
									],
									[
										195925,
										195927
									],
									[
										196146,
										196148
									],
									[
										196164,
										196166
									],
									[
										196282,
										196284
									],
									[
										196683,
										196685
									],
									[
										196799,
										196801
									],
									[
										197059,
										197061
									],
									[
										197487,
										197489
									],
									[
										197608,
										197610
									],
									[
										198015,
										198017
									],
									[
										198220,
										198222
									],
									[
										198412,
										198414
									],
									[
										198812,
										198814
									],
									[
										198920,
										198922
									],
									[
										199263,
										199265
									],
									[
										199631,
										199633
									],
									[
										199886,
										199888
									],
									[
										200141,
										200143
									],
									[
										200375,
										200377
									],
									[
										200614,
										200616
									],
									[
										200855,
										200857
									],
									[
										201097,
										201099
									],
									[
										201361,
										201363
									],
									[
										201626,
										201628
									],
									[
										201860,
										201862
									],
									[
										202113,
										202115
									],
									[
										202352,
										202354
									],
									[
										202516,
										202518
									],
									[
										202612,
										202614
									],
									[
										202796,
										202798
									],
									[
										202952,
										202954
									],
									[
										203159,
										203161
									],
									[
										203436,
										203438
									],
									[
										203625,
										203627
									],
									[
										203832,
										203834
									],
									[
										204111,
										204113
									],
									[
										204228,
										204230
									],
									[
										204441,
										204443
									],
									[
										204758,
										204760
									],
									[
										204939,
										204941
									],
									[
										204957,
										204959
									],
									[
										204968,
										204970
									],
									[
										205052,
										205054
									],
									[
										205063,
										205065
									],
									[
										205074,
										205076
									],
									[
										205170,
										205172
									],
									[
										205366,
										205368
									],
									[
										205421,
										205423
									],
									[
										205473,
										205475
									],
									[
										205480,
										205482
									],
									[
										205781,
										205783
									],
									[
										205977,
										205979
									],
									[
										206104,
										206106
									],
									[
										206212,
										206214
									],
									[
										206264,
										206266
									],
									[
										206366,
										206368
									],
									[
										206579,
										206581
									],
									[
										206776,
										206778
									],
									[
										206937,
										206939
									],
									[
										207217,
										207219
									],
									[
										207258,
										207260
									],
									[
										207484,
										207486
									],
									[
										207619,
										207621
									],
									[
										207733,
										207735
									],
									[
										207866,
										207868
									],
									[
										207970,
										207972
									],
									[
										208201,
										208203
									],
									[
										208384,
										208386
									],
									[
										208545,
										208547
									],
									[
										208599,
										208601
									],
									[
										208703,
										208705
									],
									[
										208958,
										208960
									],
									[
										209141,
										209143
									],
									[
										209330,
										209332
									],
									[
										209384,
										209386
									],
									[
										209488,
										209490
									],
									[
										209744,
										209746
									],
									[
										210045,
										210047
									],
									[
										210181,
										210183
									],
									[
										210623,
										210625
									],
									[
										210884,
										210886
									],
									[
										211012,
										211014
									],
									[
										211115,
										211117
									],
									[
										211169,
										211171
									],
									[
										211273,
										211275
									],
									[
										211511,
										211513
									],
									[
										211652,
										211654
									],
									[
										211755,
										211757
									],
									[
										211809,
										211811
									],
									[
										211913,
										211915
									],
									[
										212166,
										212168
									],
									[
										212327,
										212329
									],
									[
										212430,
										212432
									],
									[
										212484,
										212486
									],
									[
										212562,
										212564
									],
									[
										212825,
										212827
									],
									[
										212836,
										212838
									],
									[
										212905,
										212907
									],
									[
										213114,
										213116
									],
									[
										213254,
										213256
									],
									[
										213308,
										213310
									],
									[
										213386,
										213388
									],
									[
										213516,
										213518
									],
									[
										213906,
										213908
									],
									[
										214188,
										214190
									],
									[
										214509,
										214511
									],
									[
										214973,
										214975
									],
									[
										215358,
										215360
									],
									[
										215487,
										215489
									],
									[
										215694,
										215696
									],
									[
										215899,
										215901
									],
									[
										215976,
										215978
									],
									[
										216214,
										216216
									],
									[
										216537,
										216539
									],
									[
										216731,
										216733
									],
									[
										216905,
										216907
									],
									[
										216997,
										216999
									],
									[
										217436,
										217438
									],
									[
										217776,
										217778
									],
									[
										218101,
										218103
									],
									[
										218243,
										218245
									],
									[
										218406,
										218408
									],
									[
										218580,
										218582
									],
									[
										218815,
										218817
									],
									[
										219076,
										219078
									],
									[
										219390,
										219392
									],
									[
										219541,
										219543
									],
									[
										219867,
										219869
									],
									[
										219987,
										219989
									],
									[
										220377,
										220379
									],
									[
										220610,
										220612
									],
									[
										220628,
										220630
									],
									[
										220754,
										220756
									],
									[
										221218,
										221220
									],
									[
										221590,
										221592
									],
									[
										222017,
										222019
									],
									[
										222426,
										222428
									],
									[
										222739,
										222741
									],
									[
										223141,
										223143
									],
									[
										223495,
										223497
									],
									[
										223552,
										223554
									],
									[
										223773,
										223775
									],
									[
										223785,
										223787
									],
									[
										224030,
										224032
									],
									[
										224091,
										224093
									],
									[
										224110,
										224112
									],
									[
										224263,
										224265
									],
									[
										224349,
										224351
									],
									[
										224368,
										224370
									],
									[
										224399,
										224401
									],
									[
										224640,
										224642
									],
									[
										224918,
										224920
									],
									[
										225732,
										225734
									],
									[
										225740,
										225742
									],
									[
										226014,
										226016
									],
									[
										226441,
										226443
									],
									[
										226654,
										226656
									],
									[
										226857,
										226859
									],
									[
										227058,
										227060
									],
									[
										227312,
										227314
									],
									[
										227513,
										227515
									],
									[
										227716,
										227718
									],
									[
										227917,
										227919
									],
									[
										228084,
										228086
									],
									[
										228237,
										228239
									],
									[
										228255,
										228257
									],
									[
										228266,
										228268
									],
									[
										228293,
										228295
									],
									[
										228304,
										228306
									],
									[
										228395,
										228397
									],
									[
										228406,
										228408
									],
									[
										228417,
										228419
									],
									[
										228497,
										228499
									],
									[
										228547,
										228549
									],
									[
										228558,
										228560
									],
									[
										228736,
										228738
									],
									[
										228840,
										228842
									],
									[
										229246,
										229248
									],
									[
										229467,
										229469
									],
									[
										229485,
										229487
									],
									[
										229603,
										229605
									],
									[
										230060,
										230070
									],
									[
										230217,
										230227
									],
									[
										230259,
										230269
									],
									[
										230329,
										230339
									],
									[
										230505,
										230515
									],
									[
										230549,
										230559
									],
									[
										230745,
										230755
									],
									[
										230951,
										230961
									],
									[
										231132,
										231142
									],
									[
										231500,
										231510
									],
									[
										231666,
										231676
									],
									[
										231888,
										231898
									],
									[
										232035,
										232045
									],
									[
										232166,
										232176
									],
									[
										232401,
										232411
									],
									[
										232611,
										232621
									],
									[
										232864,
										232874
									],
									[
										233092,
										233102
									],
									[
										233289,
										233299
									],
									[
										233524,
										233534
									],
									[
										233801,
										233811
									],
									[
										234044,
										234054
									],
									[
										234283,
										234293
									],
									[
										234609,
										234619
									],
									[
										234919,
										234929
									],
									[
										236206,
										236216
									],
									[
										236372,
										236382
									],
									[
										236594,
										236604
									],
									[
										236741,
										236751
									],
									[
										236872,
										236882
									],
									[
										237107,
										237117
									],
									[
										237317,
										237327
									],
									[
										237570,
										237580
									],
									[
										237829,
										237842
									],
									[
										238116,
										238129
									],
									[
										238374,
										238379
									],
									[
										238530,
										238535
									],
									[
										238553,
										238558
									],
									[
										238632,
										238637
									],
									[
										238706,
										238711
									],
									[
										238757,
										238762
									],
									[
										238957,
										238962
									],
									[
										238976,
										238981
									],
									[
										239148,
										239153
									],
									[
										239317,
										239322
									],
									[
										239325,
										239330
									],
									[
										239361,
										239366
									],
									[
										239374,
										239379
									],
									[
										239422,
										239427
									],
									[
										239584,
										239589
									],
									[
										239677,
										239682
									],
									[
										239946,
										239951
									],
									[
										240229,
										240234
									],
									[
										240425,
										240430
									],
									[
										240507,
										240512
									],
									[
										240625,
										240630
									],
									[
										240808,
										240813
									],
									[
										240933,
										240938
									],
									[
										241093,
										241098
									],
									[
										241312,
										241317
									],
									[
										241425,
										241430
									],
									[
										241587,
										241592
									],
									[
										241758,
										241763
									],
									[
										241857,
										241862
									],
									[
										241954,
										241959
									],
									[
										242057,
										242062
									],
									[
										242156,
										242161
									],
									[
										242258,
										242263
									],
									[
										242495,
										242500
									],
									[
										242824,
										242829
									],
									[
										242842,
										242847
									],
									[
										242917,
										242922
									],
									[
										243012,
										243017
									],
									[
										243056,
										243061
									],
									[
										243125,
										243130
									],
									[
										243379,
										243384
									],
									[
										243589,
										243594
									],
									[
										243783,
										243788
									],
									[
										243800,
										243805
									],
									[
										243915,
										243920
									],
									[
										244096,
										244101
									],
									[
										244154,
										244159
									],
									[
										244326,
										244331
									],
									[
										244462,
										244467
									],
									[
										244682,
										244687
									],
									[
										244740,
										244745
									],
									[
										244869,
										244874
									],
									[
										245185,
										245190
									],
									[
										245462,
										245467
									],
									[
										245718,
										245723
									],
									[
										245940,
										245945
									],
									[
										246187,
										246192
									],
									[
										246371,
										246376
									],
									[
										246397,
										246402
									],
									[
										246511,
										246516
									],
									[
										246594,
										246599
									],
									[
										246904,
										246909
									],
									[
										247047,
										247052
									],
									[
										247083,
										247088
									],
									[
										247103,
										247108
									],
									[
										247225,
										247230
									],
									[
										247364,
										247369
									],
									[
										247382,
										247387
									],
									[
										247504,
										247509
									],
									[
										247752,
										247757
									],
									[
										247891,
										247896
									],
									[
										247928,
										247933
									],
									[
										247972,
										247977
									],
									[
										247997,
										248002
									],
									[
										248146,
										248151
									],
									[
										248302,
										248307
									],
									[
										248325,
										248330
									],
									[
										248457,
										248462
									],
									[
										248510,
										248515
									],
									[
										248548,
										248553
									],
									[
										248613,
										248618
									],
									[
										248638,
										248643
									],
									[
										248673,
										248678
									],
									[
										248792,
										248797
									],
									[
										248871,
										248876
									],
									[
										249073,
										249078
									],
									[
										249081,
										249086
									],
									[
										249187,
										249192
									],
									[
										249200,
										249205
									],
									[
										249252,
										249257
									],
									[
										249293,
										249298
									],
									[
										249345,
										249350
									],
									[
										249633,
										249638
									],
									[
										249841,
										249846
									],
									[
										249883,
										249888
									],
									[
										250053,
										250058
									],
									[
										250102,
										250107
									],
									[
										250110,
										250115
									],
									[
										250330,
										250335
									],
									[
										250420,
										250425
									],
									[
										250444,
										250449
									],
									[
										250523,
										250528
									],
									[
										250583,
										250588
									],
									[
										250591,
										250596
									],
									[
										250745,
										250750
									],
									[
										250893,
										250898
									],
									[
										251003,
										251008
									],
									[
										251028,
										251033
									],
									[
										251103,
										251108
									],
									[
										251319,
										251324
									],
									[
										251475,
										251480
									],
									[
										251498,
										251503
									],
									[
										251634,
										251639
									],
									[
										251691,
										251696
									],
									[
										251733,
										251738
									],
									[
										251770,
										251775
									],
									[
										251789,
										251794
									],
									[
										251883,
										251888
									],
									[
										251954,
										251959
									],
									[
										252102,
										252107
									],
									[
										252110,
										252115
									],
									[
										252236,
										252241
									],
									[
										252271,
										252276
									],
									[
										252284,
										252289
									],
									[
										252435,
										252440
									],
									[
										252635,
										252640
									],
									[
										252856,
										252861
									],
									[
										253292,
										253297
									],
									[
										253317,
										253322
									],
									[
										253422,
										253427
									],
									[
										253438,
										253443
									],
									[
										253467,
										253472
									],
									[
										253494,
										253499
									],
									[
										253802,
										253807
									],
									[
										253874,
										253879
									],
									[
										253973,
										253978
									],
									[
										254021,
										254026
									],
									[
										254151,
										254156
									],
									[
										254464,
										254469
									],
									[
										254582,
										254587
									],
									[
										254642,
										254647
									],
									[
										254929,
										254934
									],
									[
										255003,
										255008
									],
									[
										255094,
										255099
									],
									[
										255228,
										255233
									],
									[
										255450,
										255455
									],
									[
										255554,
										255559
									],
									[
										255623,
										255628
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								238758,
								238758
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 89220.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/cleartext.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8115,
						"regions":
						{
						},
						"selection":
						[
							[
								4823,
								4823
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/encoding/armor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16022,
						"regions":
						{
						},
						"selection":
						[
							[
								3276,
								3280
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1301.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/key.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44810,
						"regions":
						{
						},
						"selection":
						[
							[
								8934,
								8940
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3909.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/config/config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2170,
						"regions":
						{
						},
						"selection":
						[
							[
								1093,
								1105
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 102.0
	},
	"pinned_build_system": "",
	"project": "pgp.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"store",
				"test/instagram/store.coffee"
			],
			[
				"stor",
				"lib/twitter/store.coffee"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 356.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
